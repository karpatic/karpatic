async function createPlaylist(){const t=document.getElementById("newPlaylistName").value;if(!t)return void(document.getElementById("playlistCreationStatus").innerText="Please enter a playlist name.");const e=(await dbPromise).transaction("youtubePlaylists","readwrite");try{await e.store.add({playlistName:t,tracks:[]}),await e.done,document.getElementById("playlistCreationStatus").innerText="Playlist created successfully.",renderPlaylists()}catch(t){console.error("Error in createPlaylist:",t),document.getElementById("playlistCreationStatus").innerText="Error creating playlist: "+t.message}}async function loadPlaylistsFromIndexedDB(){const t=(await dbPromise).transaction("youtubePlaylists","readonly"),e=await t.store.getAll();return await t.done,e}async function storePlaylistInIndexedDB(t,e){const a=(await dbPromise).transaction("youtubePlaylists","readwrite");await a.store.put({playlistName:t,tracks:e}),await a.done}async function deletePlaylist(t){if(confirm("Are you sure you want to delete this playlist?")){const e=(await dbPromise).transaction("youtubePlaylists","readwrite");await e.store.delete(t),await e.done,renderPlaylists()}}async function addTrackToPlaylist(t,e,a){const n=(await dbPromise).transaction("youtubePlaylists","readwrite");try{const l=await n.store.get(t);l?(l.tracks.push({title:e,url:a}),await n.store.put(l),alert("Track added to playlist successfully.")):alert("Playlist not found.")}catch(t){console.error("Error adding track to playlist:",t),alert("Error adding track to playlist.")}finally{await n.done,renderPlaylists()}}function removeFromPlaylist(t,e){confirm("Are you sure you want to remove this track from the playlist?")&&loadPlaylistsFromIndexedDB().then((a=>{const n=a.find((e=>e.playlistName===t));n&&(n.tracks.splice(e,1),storePlaylistInIndexedDB(t,n.tracks),renderPlaylists())}))}async function renderPlaylists(){const t=document.getElementById("playlistsContainer");t.innerHTML="<hr>";(await loadPlaylistsFromIndexedDB()).forEach((e=>{const a=e.playlistName;let n=`<details open><summary>${a}</summary>`;e.tracks.forEach(((t,e)=>{n+=`\n                <div>\n                    <button onclick="playFromPlaylist('${a}', ${e})">Play</button>\n                    <span style="float: right; color: red; cursor: pointer;" onclick="removeFromPlaylist('${a}', ${e})">\n                        <i class="fa fa-times"></i>\n                    </span>\n                    <p>${t.title}</p>\n                </div>\n            `})),n+=`<br><button style="float: right; color:" onclick="deletePlaylist('${a}')">Delete Playlist</button><br></details><hr>`,t.innerHTML+=n}))}async function populatePlaylistDropdowns(){const t=await loadPlaylistsFromIndexedDB(),e=document.getElementById("playlistSelect"),a=document.getElementById("bulkPlaylistSelect");e.innerHTML="",a.innerHTML="",t.forEach((t=>{e.innerHTML+=`<option value="${t.playlistName}">${t.playlistName}</option>`,a.innerHTML+=`<option value="${t.playlistName}">${t.playlistName}</option>`}))}async function populatePlaylistDropdowns(){const t=await loadPlaylistsFromIndexedDB(),e=document.getElementById("playlistSelect"),a=document.getElementById("bulkPlaylistSelect");e.innerHTML="",a.innerHTML="",t.forEach((t=>{e.innerHTML+=`<option value="${t.playlistName}">${t.playlistName}</option>`,a.innerHTML+=`<option value="${t.playlistName}">${t.playlistName}</option>`}))}async function addTrackToPlaylist(){const t=document.getElementById("playlistSelect").value,e=document.getElementById("trackName").value,a=document.getElementById("trackURL").value;if(console.log({playlistName:t,trackURL:a}),!a)return void(document.getElementById("trackAdditionStatus").innerText="Please enter a track URL.");if(!e)return void(document.getElementById("trackAdditionStatus").innerText="Please enter a track name.");const n=(await dbPromise).transaction("youtubePlaylists","readwrite");try{const l=await n.store.get(t);l.tracks.push({title:e,url:a.split("v=")[1]}),await n.store.put(l),document.getElementById("trackAdditionStatus").innerText="Track added successfully.",renderPlaylists()}catch(t){document.getElementById("trackAdditionStatus").innerText="Error adding track."}}async function bulkAddTracksToPlaylist(){const t=document.getElementById("bulkPlaylistSelect").value,e=document.getElementById("bulkAddTracks").value.split("\n");"title,id"===e[0]&&e.shift();const a=e.map((t=>{const[e,a]=t.split(",");return e&&a?{title:e.trim(),url:a.trim()}:null})).filter((t=>null!==t));if(0===a.length)return void(document.getElementById("bulkAdditionStatus").innerText="No valid tracks to add.");const n=(await dbPromise).transaction("youtubePlaylists","readwrite");try{const e=await n.store.get(t);e?(e.tracks.push(...a),await n.store.put(e),document.getElementById("bulkAdditionStatus").innerText="Tracks added successfully.",renderPlaylists()):document.getElementById("bulkAdditionStatus").innerText="Playlist not found."}catch(t){console.error("Error adding tracks to playlist:",t),document.getElementById("bulkAdditionStatus").innerText="Error adding tracks."}finally{await n.done}}function playFromPlaylist(t,e){currentPlaybackSource="YouTube",loadPlaylistsFromIndexedDB().then((a=>{const n=a.find((e=>e.playlistName===t));if(n&&n.tracks[e]){updateYouTubePlayer(n.tracks[e].url)}}))}function playYouTubeVideo(){let t=document.getElementById("youtube_video");(t.contentDocument||t.contentWindow.document).querySelector("button.play-selector").click()}function pauseYouTubeVideo(){let t=document.getElementById("youtube_video");(t.contentDocument||t.contentWindow.document).querySelector("button.pause-selector").click()}function updateYouTubePlayer(t){document.getElementById("youtube_video").src=`https://www.youtube.com/embed/${t}`}document.getElementById("bulkAddTracksToPlaylistButton").addEventListener("click",bulkAddTracksToPlaylist),document.getElementById("createPlaylistButton").addEventListener("click",(async()=>{await createPlaylist(),await populatePlaylistDropdowns()})),document.getElementById("addTrackToPlaylistButton").addEventListener("click",addTrackToPlaylist),document.addEventListener("DOMContentLoaded",(async()=>{await renderPlaylists(),await populatePlaylistDropdowns()}));