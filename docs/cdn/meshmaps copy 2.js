import*as THREE from"/cdn/three/three.js";import{OrbitControls}from"/cdn/three/OrbitControls.js";import proj4 from"https://cdn.jsdelivr.net/npm/proj4@2.11.0/+esm";import{STLExporter}from"/cdn/three/STLExporter.js";import{BufferGeometryUtils}from"/cdn/three/BufferGeometryUtils.js";import*as TCSG from"/cdn/three/CSG_Three.js";async function displayOnMap(e){window.map&&window.map.eachLayer?window.map.eachLayer((function(e){window.map.removeLayer(e)})):window.map=L.map("display_map"),L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{maxZoom:19,attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}).addTo(window.map);let t=L.geoJSON(e,{onEachFeature:function(e,t){e?.properties?.id&&t.bindTooltip(`LineString number: ${e.properties.id}`)}}).addTo(window.map);window.map.fitBounds(t.getBounds())}function scale(e){window.difX=window.maxX-window.minX,window.difY=window.maxY-window.minY;const t=window.scaleToThisSize/Math.max(difX,difY);return e.features.forEach((e=>{if(!e.geometry.coordinates)return;const recurse=e=>e.map((e=>Array.isArray(e[0])?recurse(e):function normalizeAndScale(e){return[Math.round((Math.abs(e[0])-window.minX)*t),Math.round((Math.abs(e[1])-window.minY)*t)]}(e)));e.geometry.coordinates=recurse(e.geometry.coordinates)})),e}export async function initialize(){window.innerHeight=600,window.innerWidth=800,window.precision=100,window.scaleToThisSize=180;const e=new THREE.Scene;e.add(new THREE.AmbientLight(16777215,.5)),e.add(new THREE.DirectionalLight(16777215,.5)),e.background=new THREE.Color(3355443),e.add(new THREE.AxesHelper(100));const t=new THREE.WebGLRenderer({antialias:!0}),o=window.innerWidth/window.innerHeight,n=new THREE.PerspectiveCamera(45,o,1,1e3);n.updateMatrixWorld();const r=new OrbitControls(n,t.domElement);t.setSize(window.innerWidth,window.innerHeight);const i=document.getElementById("renderer");i.innerHTML="",i.appendChild(t.domElement),function animate(){requestAnimationFrame(animate),t.render(e,n)}();let a=await(await fetch("https://raw.githubusercontent.com/benbalter/dc-maps/master/maps/ward-2012.geojson")).json(),[s,l,d,u]=turf.bbox(a);if(window.minX=s=Math.abs(s),d=Math.abs(d),s>d){let e=s;s=d,d=e}if(window.minY=l=Math.abs(l),u=Math.abs(u),l>u){let e=l;l=u,u=e}window.minX=s,window.minY=l,window.maxX=d,window.maxY=u,proj4.defs("EPSG:32618","+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs");let c=!1;a.features.forEach((e=>{"Polygon"===e.geometry.type?c=c?turf.union(c,e.geometry):e.geometry:"MultiPolygon"===e.geometry.type?e.geometry.coordinates.forEach((e=>{let t={type:"Polygon",coordinates:e};c=c?turf.union(c,t):e})):console.log("err",e)}));let p={features:[c],type:"FeatureCollection"},m=[],f={features:[],type:"FeatureCollection"};a.features.forEach(((e,t)=>{a.features.forEach(((o,n)=>{if(!["Polygon","MultiPolygon"].includes(e.geometry.type)||!["Polygon","MultiPolygon"].includes(o.geometry.type)||t===n||m.includes(o))return;let r=turf.lineOverlap(e,o);r.features.length&&r.features.forEach((e=>{f.features.push(e)}))})),m.push(e)})),displayOnMap(JSON.parse(JSON.stringify(f)));let removeInDistance=(e,t,o)=>{let n=!1,r=!1,i=!1,check=e=>Number.isInteger(e),a=e.filter(((e,a)=>{if(n)return!0;return turf.pointToLineDistance(turf.point(e),t,{units:"meters"})<=o?(check(r)||(r=a),!1):(check(i)||(i=a),n=!0,!0)})),getClosestPoint=(e,n)=>{let r=turf.midpoint(e,n),i=turf.pointToLineDistance(r,t,{units:"meters"});return i<=o?getClosestPoint(e,r):i>o+20?getClosestPoint(r,n):r};if(check(r)&&check(i)){let t=getClosestPoint(turf.point(e[i]),turf.point(e[r]));a.unshift(turf.getCoord(t))}return a},w={features:[],type:"FeatureCollection"};f.features.forEach((e=>{let t=turf.getCoords(e),o=turf.lineString(p.features[0].geometry.coordinates[0]),n=removeInDistance(t,o,300);if(n=removeInDistance(n.reverse(),o,300),n.length>=2)w.features.push(turf.lineString(n));else{let e=n[0];console.log("Error: Only 1 point left.",e);let o=turf.point(t[0]);turf.booleanEqual(o,e);let r=turf.point(t[t.length-1]);turf.booleanEqual(r,e)}})),p=scale(p),p.features.forEach((e=>{e.geometry=turf.cleanCoords(e.geometry)})),console.log("unionGeoJson",p),w=scale(w),w.features.forEach((e=>{e.geometry=turf.cleanCoords(e.geometry)})),console.log("updatedLines",w);let h=[];function createPolygon(e){const{geometries:t}=window.jscadModeling;return e.map((e=>{const o=e[0],n=e[e.length-1];if(o[0]===n[0]&&o[1]===n[1]||e.push([...o]),e.length<4)return console.error("Invalid polygon with fewer than 3 unique points:",e),null;const r=e.map((e=>[e[0],e[1]]));return t.geom2.fromPoints(r)})).filter((e=>null!==e))}w.features.forEach(((e,t)=>{const o=e.geometry.coordinates.map((e=>[e[0],e[1]])),n=new CSG.Path2D(o,!1).rectangularExtrude(3,4,16,!0);console.log(n);const r={polygons:[],transforms:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]};n.polygons.forEach((e=>{const t={plane:[e.plane.normal._x,e.plane.normal._y,e.plane.normal._z,e.plane.w],vertices:e.vertices.map((e=>[e.pos._x,e.pos._y,e.pos._z]))};r.polygons.push(t)})),h.push(r)})),console.log("extrudedLines",h);let g=p.features.flatMap((e=>{const t=e.geometry.type;let o;if("Polygon"===t)o=[createPolygon(e.geometry.coordinates)];else{if("MultiPolygon"!==t)return[];o=e.geometry.coordinates.map((e=>createPolygon(e))).flat()}return o.map((e=>window.jscadModeling.extrusions.extrudeLinear({height:3},e)))})).filter((e=>e));g=g[0],console.log("extrudedShape",g);let y=g;h.forEach((e=>{y=window.jscadModeling.booleans.subtract(y,e)}));let E=(e=>{let t=[];e.polygons.forEach((o=>{const n=[],r=[];o.vertices.forEach(((e,t)=>{n.push(e[0],e[1],e[2]-8)}));for(let e=2;e<o.vertices.length;e++)r.push(0,e-1,e);const i=new THREE.BufferGeometry;i.setAttribute("position",new THREE.Float32BufferAttribute(n,3)),i.setIndex(r),i.applyMatrix4((new THREE.Matrix4).fromArray(e.transforms)),i.computeVertexNormals();const a=new THREE.MeshNormalMaterial({side:THREE.DoubleSide}),s=new THREE.Mesh(i,a);t.push(s.clone())}));const o=t.map((e=>e.geometry)),n=BufferGeometryUtils.mergeBufferGeometries(o,!1);return new THREE.Mesh(n,new THREE.MeshNormalMaterial({side:THREE.DoubleSide}))})(y);e.add(E);let b=1.2*window.maxX,T=2.2*window.maxY;n.position.set(b,T,200),n.lookAt(b,T,0),r.target.set(b,T,0),r.update()}function exportScene(e,t){const o=new THREE.Scene;e.forEach((e=>o.add(e)));let n=(new STLExporter).parse(o),r=t+".stl",i=new Blob([n],{type:"text/plain"}),a=document.createElement("a");a.style.display="none",a.href=URL.createObjectURL(i),a.download=r,document.body.appendChild(a),a.click(),URL.revokeObjectURL(a.href),document.body.removeChild(a)}