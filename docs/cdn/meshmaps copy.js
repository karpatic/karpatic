import*as THREE from"/cdn/three/three.js";import{OrbitControls}from"/cdn/three/OrbitControls.js";import{STLExporter}from"/cdn/three/STLExporter.js";async function displayOnMap(e){window.map&&window.map.eachLayer?window.map.eachLayer((function(e){window.map.removeLayer(e)})):window.map=L.map("display_map"),L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{maxZoom:19,attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}).addTo(window.map);let t=L.geoJSON(e,{onEachFeature:function(e,t){e?.properties?.id&&t.bindTooltip(`LineString number: ${e.properties.id}`)}}).addTo(window.map);window.map.fitBounds(t.getBounds())}function createPolygon(e){const{geometries:t}=window.jscadModeling;return e.map((e=>{const o=e[0],r=e[e.length-1];if(o[0]===r[0]&&o[1]===r[1]||e.push([...o]),e.length<4)return console.error("Invalid polygon with fewer than 3 unique points:",e),null;const n=e.map((e=>[e[0],e[1]]));return t.geom2.fromPoints(n)})).filter((e=>null!==e))}function scale(e){let[t,o,r,n]=turf.bbox(e);if(t=Math.abs(t),r=Math.abs(r),t>r){let e=t;t=r,r=e}if(o=Math.abs(o),n=Math.abs(n),o>n){let e=o;o=n,n=e}window.minX=t,window.minY=o,window.maxX=r,window.maxY=n,window.difX=r-t,window.difY=n-o;const a=window.scaleToThisSize/Math.max(difX,difY);return e.features.forEach((e=>{if(!e.geometry.coordinates)return;const recurse=e=>e.map((e=>Array.isArray(e[0])?recurse(e):function normalizeAndScale(e){return[Math.round((Math.abs(e[0])-t)*a),Math.round((Math.abs(e[1])-o)*a)]}(e)));e.geometry.coordinates=recurse(e.geometry.coordinates)})),e}export async function initialize(){window.innerHeight=600,window.innerWidth=800,window.precision=100,window.scaleToThisSize=180;const e=new THREE.Scene;e.add(new THREE.AmbientLight(16777215,.5)),e.add(new THREE.DirectionalLight(16777215,.5)),e.background=new THREE.Color(3355443),e.add(new THREE.AxesHelper(100));const t=new THREE.WebGLRenderer({antialias:!0}),o=window.innerWidth/window.innerHeight,r=new THREE.PerspectiveCamera(45,o,1,1e3);r.updateMatrixWorld();const n=new OrbitControls(r,t.domElement);t.setSize(window.innerWidth,window.innerHeight);const a=document.getElementById("renderer");a.innerHTML="",a.appendChild(t.domElement),function animate(){requestAnimationFrame(animate),t.render(e,r)}();let i=scale(await(await fetch("https://raw.githubusercontent.com/benbalter/dc-maps/master/maps/ward-2012.geojson")).json());i.features.forEach((e=>{e.geometry=turf.cleanCoords(e.geometry)})),console.log("simplified",i),displayOnMap(JSON.parse(JSON.stringify(i)));let s=!1;i.features.forEach((e=>{"Polygon"===e.geometry.type?s=s?turf.union(s,e.geometry):e.geometry:"MultiPolygon"===e.geometry.type?e.geometry.coordinates.forEach((e=>{let t={type:"Polygon",coordinates:e};s=s?turf.union(s,t):e})):console.log("err",e)}));let c={features:[s],type:"FeatureCollection"}.features.flatMap((e=>{const t=e.geometry.type;let o;if("Polygon"===t)o=[createPolygon(e.geometry.coordinates)];else{if("MultiPolygon"!==t)return[];o=e.geometry.coordinates.map((e=>createPolygon(e))).flat()}return o.map((e=>window.jscadModeling.extrusions.extrudeLinear({height:10},e)))})).filter((e=>e));const l=window.jscadModeling.booleans.union(...c),p=[];l.polygons.forEach((e=>{const t=new THREE.Geometry;e.vertices.forEach((e=>{const o=new THREE.Vector3(e[0],e[1],e[2]-8);t.vertices.push(o)}));for(let e=2;e<t.vertices.length;e++)t.faces.push(new THREE.Face3(0,e-1,e));t.applyMatrix((new THREE.Matrix4).fromArray(l.transforms)),t.computeFaceNormals();const o=(new THREE.BufferGeometry).fromGeometry(t),r=new THREE.MeshNormalMaterial,n=new THREE.Mesh(o,r);p.push(n.clone())}));let d=[],u={features:[],type:"FeatureCollection"},m={features:[],type:"FeatureCollection"};i.features.forEach(((e,t)=>{i.features.forEach(((o,r)=>{if(!["Polygon","MultiPolygon"].includes(e.geometry.type)||!["Polygon","MultiPolygon"].includes(o.geometry.type)||t===r||d.includes(o))return;let n=turf.lineOverlap(e,o);if(n.features.length){n.features.forEach((e=>{u.features.push(e)}));let t=turf.difference(e,o);t&&("Polygon"===t.geometry.type?t.geometry.coordinates.forEach((e=>{m.features.push({type:"Feature",properties:{},geometry:{type:"LineString",coordinates:e}})})):"MultiPolygon"===t.geometry.type&&t.geometry.coordinates.forEach((e=>{e.forEach((e=>{m.features.push({type:"Feature",properties:{},geometry:{type:"LineString",coordinates:e}})}))})));let r=turf.difference(o,e);r&&("Polygon"===r.geometry.type?r.geometry.coordinates.forEach((e=>{m.features.push({type:"Feature",properties:{},geometry:{type:"LineString",coordinates:e}})})):"MultiPolygon"===r.geometry.type&&r.geometry.coordinates.forEach((e=>{e.forEach((e=>{m.features.push({type:"Feature",properties:{},geometry:{type:"LineString",coordinates:e}})}))})))}console.log("features overlap",n.features)})),d.push(e)})),u=m;let y=[];u.features.forEach(((e,t)=>{const o=e.geometry.coordinates.map((e=>[e[0],e[1]])),r=new CSG.Path2D(o,!1).rectangularExtrude(3,4,16,!0);y.push(r)})),console.log("lines",u),y.forEach((t=>{const o=new THREE.Geometry;t.polygons.forEach((e=>{const t=e.vertices.map((e=>{const t=new THREE.Vector3(e.pos.x,e.pos.y,e.pos.z);return o.vertices.push(t),o.vertices.length-1}));for(let e=2;e<t.length;e++)o.faces.push(new THREE.Face3(t[0],t[e-1],t[e]))})),o.computeBoundingSphere(),o.computeFaceNormals();const r=new THREE.MeshNormalMaterial,n=new THREE.Mesh(o,r);e.add(n)}));let f=1.2*window.maxX,w=2.2*window.maxY;r.position.set(f,w,200),r.lookAt(f,w,0),n.target.set(f,w,0),n.update(),exportScene(p,"extrudedShapes")}function exportScene(e,t){const o=new THREE.Scene;e.forEach((e=>o.add(e)));let r=(new STLExporter).parse(o),n=t+".stl",a=new Blob([r],{type:"text/plain"}),i=document.createElement("a");i.style.display="none",i.href=URL.createObjectURL(a),i.download=n,document.body.appendChild(i),i.click(),URL.revokeObjectURL(i.href),document.body.removeChild(i)}