import*as THREE from"/cdn/three/three.js";import{OrbitControls}from"/cdn/three/OrbitControls.js";import proj4 from"https://cdn.jsdelivr.net/npm/proj4@2.11.0/+esm";import{STLExporter}from"/cdn/three/STLExporter.js";import{BufferGeometryUtils}from"/cdn/three/BufferGeometryUtils.js";import*as TCSG from"/cdn/three/CSG_Three.js";async function displayOnMap(e){window.map&&window.map.eachLayer?window.map.eachLayer((function(e){window.map.removeLayer(e)})):window.map=L.map("display_map"),L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{maxZoom:19,attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}).addTo(window.map);let t=L.geoJSON(e,{onEachFeature:function(e,t){e?.properties?.id&&t.bindTooltip(`LineString number: ${e.properties.id}`)}}).addTo(window.map);window.map.fitBounds(t.getBounds())}async function createShapes(e,t){let o=[];const createGeomShape=e=>{const t=new THREE.Shape;return e.forEach((([e,o],n)=>{0===n?t.moveTo(e,o):t.lineTo(e,o)})),t},createLineShape=e=>{let t=e.map((([e,t])=>new THREE.Vector3(e,t,0)));const o=new THREE.CurvePath;return t.forEach(((e,n)=>{n<t.length-1&&o.add(new THREE.LineCurve3(e,t[n+1]))})),o};return e.features.forEach((e=>{let n=e.geometry.type,r=e.geometry.coordinates;"LineString"===n&&r.length>1?o.push("geom"===t?createGeomShape(r):createLineShape(r)):"Polygon"===n?o.push("geom"===t?createGeomShape(r[0]):createLineShape(r[0])):"MultiPolygon"===n&&r.forEach((e=>{e.forEach((e=>{o.push("geom"===t?createGeomShape(e):createLineShape(e))}))}))})),o}async function createBuffers(e,t){return"geom"===t?e.map((e=>{let t={depth:window.depth,bevelEnabled:!1};return new THREE.ExtrudeBufferGeometry(e,t)})):"line"===t?Promise.all(e.map((e=>{const t=(new THREE.Shape).moveTo(0,0).lineTo(0,width).lineTo(height,width).lineTo(height,0).closePath();if(!t)return console.error("Failed to create squareShape"),null;const o={depth:1,bevelEnabled:!1,extrudePath:e,steps:e.curves.length*window.stepMultiply};return console.log("Extruding with squareShape and settings:",t,o),new THREE.ExtrudeBufferGeometry(t,o)}))).filter((e=>null!==e)):void 0}function scale(e){window.difX=window.maxX-window.minX,window.difY=window.maxY-window.minY;const t=window.scaleToThisSize/Math.max(difX,difY);return e.features.forEach((e=>{if(!e.geometry.coordinates)return;const recurse=e=>e.map((e=>Array.isArray(e[0])?recurse(e):function normalizeAndScale(e){return[Math.round((Math.abs(e[0])-minX)*t*1)/1,Math.round((Math.abs(e[1])-minY)*t*1)/1]}(e)));e.geometry.coordinates=recurse(e.geometry.coordinates)})),e}export async function initialize(){window.innerHeight=600,window.innerWidth=800,window.precision=100,window.scaleToThisSize=180;const e=new THREE.Scene;e.add(new THREE.AmbientLight(16777215,.5)),e.add(new THREE.DirectionalLight(16777215,.5)),e.background=new THREE.Color(3355443),e.add(new THREE.AxesHelper(100));const t=new THREE.MeshNormalMaterial,o=new THREE.WebGLRenderer({antialias:!0}),n=window.innerWidth/window.innerHeight,r=new THREE.PerspectiveCamera(45,n,1,1e3);r.updateMatrixWorld();const i=new OrbitControls(r,o.domElement);o.setSize(window.innerWidth,window.innerHeight);const a=document.getElementById("renderer");a.innerHTML="",a.appendChild(o.domElement),function animate(){requestAnimationFrame(animate),o.render(e,r)}();let s=await(await fetch("https://raw.githubusercontent.com/benbalter/dc-maps/master/maps/ward-2012.geojson")).json(),[l,u,d,c]=turf.bbox(s);if(window.minX=l=Math.abs(l),d=Math.abs(d),l>d){let e=l;l=d,d=e}if(window.minY=u=Math.abs(u),c=Math.abs(c),u>c){let e=u;u=c,c=e}window.minX=l,window.minY=u,window.maxX=d,window.maxY=c,proj4.defs("EPSG:32618","+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs");let f=!1;s.features.forEach((e=>{"Polygon"===e.geometry.type?f=f?turf.union(f,e.geometry):e.geometry:"MultiPolygon"===e.geometry.type&&e.geometry.coordinates.forEach((e=>{let t={type:"Polygon",coordinates:e};f=f?turf.union(f,t):t}))}));console.log("Union:",f);const p="Polygon"==f.geometry.type?[f.geometry.coordinates]:f.geometry.coordinates.map(((e,t)=>e.filter((e=>turf.area({type:"Polygon",coordinates:[e]})>=15e4)))).filter((e=>e&&e.length>0));console.log("Filtered Coordinates:",p);let m={type:"Feature",geometry:{type:"MultiPolygon",coordinates:p}};console.log("Filtered Union:",m.geometry.coordinates);let h={features:[m],type:"FeatureCollection"},w=[],g=turf.featureCollection([]);s.features.forEach(((e,t)=>{s.features.forEach(((o,n)=>{if(!["Polygon","MultiPolygon"].includes(e.geometry.type)||!["Polygon","MultiPolygon"].includes(o.geometry.type)||t===n||w.includes(o))return;let r=turf.lineOverlap(e,o);r.features.length&&r.features.forEach((e=>{g.features.push(e)}))})),w.push(e)}));let removeInDistance=(e,t,o)=>{let n=!1,r=!1,i=!1,check=e=>Number.isInteger(e),a=e.filter(((e,a)=>{if(n)return!0;return turf.pointToLineDistance(turf.point(e),t,{units:"meters"})<=o?(check(r)||(r=a),!1):(check(i)||(i=a),n=!0,!0)})),getClosestPoint=(e,n)=>{let r=turf.midpoint(e,n),i=turf.pointToLineDistance(r,t,{units:"meters"});return i<=o?getClosestPoint(e,r):i>o+20?getClosestPoint(r,n):r};if(check(r)&&check(i)){let t=getClosestPoint(turf.point(e[i]),turf.point(e[r]));a.unshift(turf.getCoord(t))}return a},y={features:[],type:"FeatureCollection"};g.features.forEach((e=>{let t=turf.getCoords(e),o=h.features[0].geometry.coordinates[0][0],n=turf.lineString(o),r=removeInDistance(t,n,120);if(r=removeInDistance(r.reverse(),n,120),r.length>=2){let e=turf.lineString(r);y.features.push(e)}else if(r.length){let e=r[0];console.log("Handling Error: Only 1 point left.",e);let o=turf.point(t[0]);turf.booleanEqual(o,e);let n=turf.point(t[t.length-1]);turf.booleanEqual(n,e)}else;})),displayOnMap(JSON.parse(JSON.stringify(y)));let E=scale(h);function dedupe(e,t=!1){const o=new Set;let n=e.filter((e=>{const t=JSON.stringify(e);return!o.has(t)&&(o.add(t),!0)}));return t&&console.log("dedupe: oldCoords",e.length,"newCords",n.length),n}function dedupeAndUnkink(e,t,o=4){let n=function dedupePoly(e){let t=dedupe(e);return t.push(t[0]),t}(t);if(!(n.length<o))return function unkink(e){const t=turf.kinks(e);if(t.features.length>0)return console.warn("Found kinks:",t),turf.unkinkPolygon(e).features;return e}(turf.polygon([n],e.properties))}let T=E.features[0].geometry.coordinates.flatMap(((e,t)=>e.flatMap((e=>dedupeAndUnkink(E.features[0],e))))),S=turf.featureCollection(T);console.log("updatedLines afater",y.features[0].geometry.coordinates.length);let b=scale(JSON.parse(JSON.stringify(y)));b.features.forEach((e=>{let t=e.geometry.coordinates,o=dedupe(t,!0);t.len,e.geometry.coordinates=o})),console.log("scaledLines",b);let x=[];b.features.forEach(((e,t)=>{const o=e.geometry.coordinates.map((e=>[e[0],e[1]])),n=new CSG.Path2D(o,!1).rectangularExtrude(1,6,10);x.push(n)}));let M=[],H=[];x.forEach((e=>{const o=[],n=[],r=[];let i=0;e.polygons.forEach((e=>{const t=e.vertices.map((e=>(o.push(e.pos.x,e.pos.y,e.pos.z),r.push(e.pos.x,e.pos.y),i++)));for(let e=2;e<t.length;e++)n.push(t[0],t[e-1],t[e])}));const a=new THREE.BufferGeometry;a.setAttribute("position",new THREE.Float32BufferAttribute(o,3)),a.setIndex(n),a.setAttribute("uv",new THREE.Float32BufferAttribute(r,2)),a.computeVertexNormals(),H.push(a);let s=new THREE.Mesh(a,t);M.push(s)})),console.log("Three.js Meshes:",M);new THREE.Mesh(BufferGeometryUtils.mergeBufferGeometries(H,!0),t);window.depth=3;let R=await createShapes(S,"geom"),C=await createBuffers([R],"geom");const L=BufferGeometryUtils.mergeBufferGeometries(C,!0);let G=new THREE.Mesh(L,t),P=TCSG.CSG.fromMesh(G);M.map((e=>{let t=TCSG.CSG.fromMesh(e);try{P=P.subtract(t)}catch{console.log("Error subtracting:",e,G)}}));let B=TCSG.CSG.toMesh(P,G.matrix);B.geometry.computeVertexNormals(),B=new THREE.Mesh((new THREE.BufferGeometry).fromGeometry(B.geometry),t),e.add(B),console.log("extrudedShape",B);let v=1.2*window.maxX,k=2.2*window.maxY;r.position.set(v,k,200),r.lookAt(v,k,0),i.target.set(v,k,0),i.update(),exportScene([B.clone()],"extrudedShapes")}function exportScene(e,t){const o=new THREE.Scene;e.forEach((e=>o.add(e)));let n=(new STLExporter).parse(o),r=t+".stl",i=new Blob([n],{type:"text/plain"}),a=document.createElement("a");a.style.display="none",a.href=URL.createObjectURL(i),a.download=r,document.body.appendChild(a),a.click(),URL.revokeObjectURL(a.href),document.body.removeChild(a)}