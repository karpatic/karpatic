"use strict";(self.webpackChunkname=self.webpackChunkname||[]).push([[787],{376:function(e,t,a){a.r(t),a.d(t,{handleRoute:function(){return handleRoute},navEvent:function(){return navEvent}}),window.w=window;const navEvent=async()=>{console.log("~~~~> navEvent");let e=location.href;(-1==e.indexOf("#")?()=>window.scrollTo({top:0,behavior:"smooth"}):()=>w[e.split("#")[1]]?.scrollIntoView({behavior:"smooth"}))(),e.split("#")[0]!=w.href?.split("#")[0]&&(await handleRoute(),w.href=e)},handleRoute=async()=>{if(console.log("~~~~~~> handleRoute"),location.pathname.includes("undefined"))return;w.meta||!isLocal&&registerServiceWorker(),w.toast||await a.e(233).then(a.t.bind(a,648,23));let e="/"==location.pathname?"index":location.pathname.replaceAll("./","").replaceAll("../","").replace(".html","").replace(/^\//,"").replace(/\/$/,""),t=await(!isLocal||preRendering?(await fetch(`/posts/${e}.json`)).json():(await Promise.all([a.e(212),a.e(156)]).then(a.bind(a,996))).ipynb_publish(`/ipynb/${e}.ipynb`));w.oldMeta=w.meta,w.meta=t.meta,meta.content=t.content,w.meta.template||="template_article",meta.template!==document.body.getAttribute("data-template")&&(document.body.setAttribute("data-template",meta.template),document.body.innerHTML=await(await fetch(`/templates/${meta.template}.html`)).text(),document.body.insertAdjacentHTML("beforeend",`<style>${await(await fetch(`${w.location.origin}/templates/${meta.template}.css`)).text()}</style>`),Array.from(document.getElementsByTagName("script")).forEach((e=>{const t=document.createElement("script");["src","type","async","textContent"].forEach((a=>e[a]&&(t[a]=e[a]))),document.body.appendChild(t),e.parentNode.removeChild(e)})));let n=location.pathname.split("/")[1].replace(".html","")||"index";if(w.sitemap&&!w.meta.hide_sitemap){if(!w.sitemap_content){let e=await(await fetch(`${location.origin}/templates/${w.meta.template}_sitemap.css`)).text();document.body.insertAdjacentHTML("beforeend",`<style>${e}</style>`)}w.sm_name!=n&&(w.sm_name=n,w.sitemap_content=await(await fetch(`/posts/${sm_name}_map.json`)).json())}w.dispatchEvent(new CustomEvent("refreshTemplate"))},registerServiceWorker=async()=>{if("serviceWorker"in navigator)try{const e=await navigator.serviceWorker.register("/service-worker.js");e.onupdatefound=()=>{const t=e.installing;t.onstatechange=()=>{"installed"==t.state&&(navigator.serviceWorker.controller?console.log("New content is available; Purge occurred. fresh content added to the cache. Refresh."):console.log("Content is cached for offline use."))}}}catch(e){console.error(`Registration failed with ${e}`)}}}}]);