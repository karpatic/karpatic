{"meta":{"title":"NB2HTML TEST","summary":"This is a test colab publication.","prettify":"true","hide_sitemap":"false","hide_toc":"true","hide_transition":"true","description":"this isnt working","image":"images/company_logo.png","keywords":"thisworks","badges":"true","comments":"true","categories":"[test]","metadata_key1":"metadata_value1","metadata_key2":"metadata_value2","filename":"01_nb_2_html_tests"},"content":"<br>\n \n<p> <a href=\"https://colab.research.google.com/github/karpatic/karpatic/blob/main/src/ipynb/labs/01_nb_2_html_tests.ipynb\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Colab\"></a>\n <a href=\"https://mybinder.org/v2/gh/karpatic/karpatic/main?filepath=%2Fsrc%2Fipynb%2Flabs%2F01_nb_2_html_tests.ipynb\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/karpatic/karpatic/tree/main/src/ipynb/labs/01_nb_2_html_tests.ipynb\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a> \n <a href=\"https://github.com/ellerbrock/open-source-badges/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a>\n <br>\n <a href=\"https://github.com/karpatic/karpatic/blob/main/LICENSE\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://karpatic.github.io\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a>\n <a href=\"\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/karpatic/karpatic.svg?style=flat\" alt=\"GitHub last commit\"></a>\n <br>\n <a href=\"https://github.com/karpatic/karpatic\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/karpatic/karpatic.svg?style=social&label=Star\" alt=\"GitHub stars\"></a>\n <a href=\"https://github.com/karpatic/karpatic\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/karpatic/karpatic.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a>\n <a href=\"https://github.com/karpatic/karpatic\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/karpatic/karpatic.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a>\n <a href=\"https://github.com/karpatic/karpatic\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/karpatic.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a> </p>\n <script src='https://cdn.bokeh.org/bokeh/release/bokeh-3.7.3.min.js'></script>\n <script>\n   console.log(window)\n   console.log(window.Bokeh)\n </script> <h2>Ipynb&#39;s were made for the web</h2>\n  <style>\n .shapedImage {\n   float: left;\n   width: 250px;\n   shape-outside: url(https://interactive-examples.mdn.mozilla.net/media/examples/round-balloon.png);\n   shape-margin:20px;\n   margin-right: 20px;\n   margin-bottom: 20px;\n   padding-top: 30px;\n }\n .shapedImage + p::first-letter {\n   font-size: 1.5rem;\n   font-weight: bold;\n   color: brown;\n }\n </style> \n <img class=\"shapedImage\" src=\"https://interactive-examples.mdn.mozilla.net/media/examples/round-balloon.png\" alt=\"Sample Image\"> \n \n<p> Did you know Python notebooks  <b>(.ipynb)&#39;s are just JSON objects</b> that get shown from a web browser? Cells and their outputs are all interactive HTML elements rendered from the JSON. When you execute python code in a python cell, it gets sent to the Jupyter backend service which runs the python code, updates the JSON, and returns the results back to the webpage. This is true for all notebook environments, even in VS Code.</p><br>\n<p> Go Figure!</p><br>\n<p> Subsequently, I built <a href='https://ipynb2web.com/'>Ipynb2Web</a> and this demo page. <a href=\"https://colab.research.google.com/github/karpatic/karpatic/blob/main/src/ipynb/labs/01_nb_2_html_tests.ipynb\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Colab\"></a> \n <br><br></p>\n <br>  <br>\n The converter starts by reading in YAML FrontMatter and then processesing each markdown and code cell. Code cells input and outputs may get conditional treatment using flags. \n <br><br>  <p>Inspired by <a href=\"http://nbdev.fast.ai/tutorial/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">nbdev</a> and <a href=\"https://nbconvert.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">nbConvert</a>.</p>\n  <h2>Examples</h2>\n <details open>\n <summary> <h3>Built In&#39;s</h3>\n </summary> <style> \n .border {\n   border: 2px solid black;\n   padding: 10px;\n   margin: 10px;\n   border-radius: 5px;\n } \n  \n </style>  <p><span class=\"class\">This is <em>some text</em></span></p>\n <p><div class=\"border\"></p>\n<ol>\n<li><strong>Simple</strong> <del>markdown</del> <em><strong>still</strong></em> <em>works</em> as <pre class='prettyprint' style='display:inline'>expected</pre>.  <ul>\n<li><input disabled=\"\" type=\"checkbox\"> lists work</li>\n<li><input disabled=\"\" type=\"checkbox\"> Checklists work<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Twice Nested Checklist work</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://charleskarpati.com\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://www.aacc.edu/media/admin/style-assets/images/logo.png\" alt=\"Caption\"></a><br>   <pre class='prettyprint' style='display:inline'>[![caption](image_url)](hyperlink)</pre></li>\n<li>&lt;b&gt; Escape special chars in markdown using backslashes. &lt;b&gt;<br></div></li>\n</ol>\n <p><div class=\"border\">You can put raw html and js in markdown but not the other way around. </p>\n <div id='special_markdown_example'> \n This approach really cool because I can write html in markdown without a hitch.\n <br>\n For example, click this blue text. I put javascript right in the mid<style> #special_markdown_example{color:blue} .folium-map{ width:200px} </style><script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js\"></script><script>document.querySelectorAll('#special_markdown_example')[0].onclick = (function() { confetti(); console.log('you clicked special_markdown_example!') } );</script>dle of this sentence within the .ipynb doc.\n </div></div>  <p><div class=\"border\">Naturally, code cells show executed code; So run the cells!</p>\n<p> System outputs however, do not get rendered (error, install &amp; import messages, etc..)</p>\n<p></div> </p>\n <p><div class=\"border\"></p>\n<pre class='prettyprint'> :::::: {.border}\n Create a div using three colons and nest them by adding 3 colons outwards.\n\n ::: { #idName .className }\n     Your interior div here.\n :::\n ::::::  \n</pre>\n<p></div></p>\n <p><div class=\"border\">Create span elements similar to hyperlinks.</p>\n<pre class='prettyprint'> [This text will be highlighted]{.className.highlight #id}\n</pre>\n<p> <span id=\"id\" class=\"className highlight\">This text will be highlighted</span></div>\n <style>\n .highlight{\n   background: yellow;\n }\n </style></p>\n <p><div class=\"tip\">This is a tip</div>\n <div class=\"info\">This is info box</div> \n <div class=\"warning\">This is a warning box</div>\n <div class=\"important\">This is a important box</div>\n <div class=\"caution\">This is a caution box</div></p>\n <p><div class=\"border\"></p>\n<p> Here is an inline note you can click. <span class=\"note\">\n      <input type=\"checkbox\" id=\"note1\" class=\"notebox\">\n      <label tabindex=\"0\" for=\"note1\" class=\"notelbl\">[1]</label>\n      <aside class=\"inline-note\"> \n        <label tabindex=\"0\" for=\"note1\" class=\"notelbl\">[1]</label>\n        Inlines notes are easier to write,\n since you don&#39;t have to pick an identifier and move down to\n type the note.\n      </aside>\n    </span></p>\n<p></div></p>\n  <summary>Running %%Javascript </summary> <p>When you use %%javascript to run JavaScript code in a Jupyter notebook, the code gets executed within a <pre class='prettyprint' style='display:inline'>script</pre> tag. This means that variables or functions you define will be added to the global scope and are thus accessible to all the other cells (remember that the notebook is actually a webpage).</p>\n <pre class='prettyprint'>%%javascript \n console.log(&#39;hello world&#39;)\n</pre>\n<p> Running the above code in an .ipynb then check your dev tool logs.<br> In VSCode this can be found by navigating to help&gt;toggle dev tools</p>\n <div id='output-area1'> </div>        <div id='output-area'> </div>  </details>   <details open> <summary>Click to toggle</summary> <pre class='prettyprint'>print(\"#hide_output #collapse_input_open: <- Adding this to the top of the cell keeps and prettifies the input cell while hiding the output.\") </pre></details> <link rel=\"stylesheet\" href=\"https://pro.fontawesome.com/releases/v5.10.0/css/all.css\" integrity=\"sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\" crossorigin=\"anonymous\"/>\n <script>\n   console.log('console message from within an unflagged markdown cell')\n </script>  <p>Here&#39;s Some Python Output</p>\n  <p>Missing: pygal, bokeh, holoviews, plotly, prophet, tensorflow, web components. TODO - Make new line breaks occur with double spaces too.. <Notes> <INFO> <WARNING></p>\n </details><details open><summary> <h3>Ipython</h3>\n </summary> <details open><summary> <h4>Display Javascript</h4>\n </summary>   <p>Using this method Javascript is persisted in the outputs of the cell and will be executed when the document is reloaded.</p>\n   <div id=\"output-area2\">This text should be overwritten to show displaySetValue from above</div>  <div id=\"output-area4\">This text should be overwritten to show displaySetValue from above</div>  <p>Information obtained from: <a href=\"https://colab.research.google.com/notebooks/snippets/advanced_outputs.ipynb\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Advanced Outputs</a></p>\n <p><div class=\"info\"><pre class='prettyprint' style='display:inline'>eval_js</pre> differs from <pre class='prettyprint' style='display:inline'>display.Javascript</pre> because <pre class='prettyprint' style='display:inline'>eval_js</pre> expressions are not persisted in the notebook document and will not be executed when the document is reloaded.</div></p>\n </details><details><summary> <h4>Display Html &amp; Py Templating</h4>\n </summary> <details open> <summary>Click to toggle</summary> <pre class='prettyprint'>import requests\n \n resp = requests.get('https://charleskarpati.com')\n \n from IPython.display import display, HTML\n \n display(HTML(resp.content.decode('utf-8')[:-4]))</pre></details>  </details> </details><details><summary> <h3>Altair / Vega-Embed</h3>\n </summary> <p><a href=\"https://github.com/vega/vega-embed\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">vega-embed</a></p>\n<p> <a href=\"https://vega.github.io/vega-lite/usage/embed.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">embed</a></p>\n <p><a href=\"https://observablehq.com/@vega/hello-vega-embed\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">hello-vega-embed</a></p>\n     </details><details><summary> <h3>Folium / Dataplay</h3>\n </summary> <ol>\n<li><p>Folium <a href=\"https://github.com/python-visualization/folium/search?q=JavascriptLink&unscoped_q=JavascriptLink\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">JavascriptLink</a></p>\n</li>\n<li><p>Folium <a href=\"https://stackoverflow.com/questions/60479995/adding-javascript-to-folium-map\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Adding Javascript</a></p>\n</li>\n<li><p>Folium <a href=\"https://github.com/python-visualization/folium/issues/765\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">How to Use Custom Javascript</a></p>\n</li>\n<li><p>Folium <a href=\"https://github.com/python-visualization/folium/issues/86\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Custom HTML JS</a></p>\n</li>\n<li><p>Folium <a href=\"https://gis.stackexchange.com/questions/313382/click-event-on-maps-with-folium-and-information-retrieval\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Click Event</a></p>\n</li>\n</ol>\n       </details><details><summary>   <h3>ObservableHQ</h3>\n </summary> <p>You&#39;ve seen them with the diagrams at the intro!</p>\n  </details><details><summary> <h3>pivottablejs</h3>\n </summary>  <p><a href=\"https://pypi.org/project/pivottablejs/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">pivottablejs</a></p>\n       </details>\n <details><summary> <h3>MPLD3</h3>\n </summary> <p>The mpld3 project brings together Matplotlib, the popular Python-based graphing library, and D3js, the popular JavaScript library for creating interactive data visualizations for the web. The result is a simple API for exporting your matplotlib graphics to HTML code which can be used within the browser, within standard web pages, blogs, or tools such as the IPython notebook.</p>\n      </details><details><summary> <h3>NVD3 python-nvd3</h3>\n </summary> <p>python-nvd3 <a href=\"https://github.com/areski/python-nvd3%5D\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">homepage</a> and <a href=\"https://python-nvd3.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">docs</a></p>\n<p> NVD3 is an attempt to build re-usable charts and chart components for d3.js without taking away the power that d3.js offers you.</p>\n<p> This will output the following HTML to render a live chart. The HTML could be stored into a HTML file, used in a Web application</p>\n        </details>\n \n <details><summary> <h3>Bokeh</h3>\n </summary>\n     </details>\n \n <details><summary> <h3>MatPlotLib</h3>\n </summary>  </details><details><summary> <h3>networkx - Plotly</h3>\n </summary> <p><a href=\"https://plotly.com/python/network-graphs/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Network Graphs</a></p>\n       </details><details><summary> <h3>Google Colabs</h3>\n </summary> <p>The output of each cell (while in colabs) is hosted in a separate sandboxed iframe without direct access to the contents of other cells, but they can create <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/BroadcastChannel\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">BroadcastChannel</a>s to communicate between cells on the same page.</p>\n <p>This will execute and trigger in realtime in the converted HTML doc:</p>\n  <p>This will not run on start</p>\n  <p>This will execute on start (converted HTML doc) and any time you run the cell (in Colabs):</p>\n   </details>  </details>\n  <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}