{"meta":{"title":"Upload ","summary":"Notes on Writing and Flashing firmware using an IPYNB","prettify":"true","filename":"upload"},"content":"<img src='/images/covers/upload1.webp'> <details>\n <summary> <h2 id=\"optional---setup-localhost-on-colabs\">Optional - Setup Localhost on Colabs</h2>\n </summary> <p>Run this in the local terminal:</p>\n <pre class='prettyprint'>jupyter notebook \\ \\\n   --NotebookApp.allow_origin='https://colab.research.google.com' \\ \\\n   --port=8888 \\ \\\n   --NotebookApp.port_retries=0 \\ \\</pre> <p>&#39;Then hit the CONNECT dropdown on the top right of this screen to Connect to the Localhost </p>\n </details>\n <details open>\n <summary> <h2 id=\"upload-function\">Upload Function</h2>\n </summary> <p>This is the upload script:</p>\n <details > <summary>Click to toggle</summary> <pre class='prettyprint'>import subprocess\n from IPython.display import display, clear_output\n import os\n \n def upload_code(code): \n     # Save the code to a file \n     with open('src/main.cpp', 'w') as f:\n         f.write(code) \n \n     # Compile the code\n     cmd = 'C:\\\\Users\\\\carlos\\\\.platformio\\\\penv\\\\Scripts\\\\platformio.exe run --target upload -v'\n     process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n     show = False\n \n     # Wait for the words \"Serial port\" to appear in the output\n     while True:\n         output = process.stdout.readline().decode()\n         if output == '' and process.poll() is not None:\n             break\n         if 'Serial port' in output:\n             show = True \n         if show:\n             display(output.strip())\n \n     # Get the output and errors after the process has completed\n     output, error = process.communicate()\n     # print(output.decode())\n     # print(error.decode())\n \n     # Clear the output once the process has completed\n     clear_output()\n \n def read_and_upload_code(file_path): \n     with open(file_path, 'r') as f:\n         code = f.read() \n         upload_code(code)\n \n directory = os.path.join(os.getcwd(), 'samples')\n files = os.listdir(directory)\n for file in files:\n     ''\n     # print(file)</pre></details> </details>\n <details open>\n <summary> <h2 id=\"uploading\">Uploading</h2>\n </summary> <p>This is the uplaod fn in use:</p>\n <pre class='prettyprint'># file = 'a_FastLedFTT.cpp'\n file = 'analogSoundSampleSketch.cpp'\n # file = 'gpt4_v4.cpp'</pre> <pre class='prettyprint'>read_and_upload_code(directory+'/'+file)</pre> </details>\n <details open>\n <summary> <h2 id=\"serial-logging\">Serial Logging</h2>\n </summary> <p>This is a simple example to read the serial output</p>\n <details > <summary>Click to toggle</summary> <pre class='prettyprint'>import serial\n from IPython.display import clear_output\n \n ser = serial.Serial()\n ser.baudrate = 9600\n ser.port = 'COM8'\n ser.open()\n ser.flushInput()\n \n try:\n     while True:\n         inpt = ser.readline()\n         print(inpt.decode('utf-8').strip())\n except KeyboardInterrupt:\n     print(\"Keyboard Interrupt. Exiting...\")\n finally: \n     clear_output()</pre></details>  </details>\n <details open>\n <summary> <h2 id=\"serial-plotting\">Serial Plotting</h2>\n </summary> <p>this is a more complex example</p>\n <details > <summary>Click to toggle</summary> <pre class='prettyprint'>import serial\n from IPython.display import clear_output, display\n import matplotlib.pyplot as plt\n import csv\n import time\n \n ser = serial.Serial()\n ser.baudrate = 9600\n ser.port = 'COM8'\n ser.open()\n ser.flushInput()\n \n # Create an empty list to store the data\n data = [0] * 100\n \n # Create the plot\n plt.ion() # Turn on interactive mode\n fig, ax = plt.subplots()\n line, = ax.plot(data)\n ax.set_title(\"Random Data\")\n ax.set_xlabel(\"Data Point\")\n ax.set_ylabel(\"Value\")\n \n try:\n     while True:\n         # Read a line of data from the serial port\n         inpt = ser.readline().decode('utf-8').strip()\n \n         # Parse the data and append it to the list\n         try:\n             value = int(inpt)\n             data.pop(0)  # Remove the first value from the list\n             data.append(value)  # Append the new value to the end of the list\n         except IndexError:\n             pass\n \n         # Update the plot\n         line.set_ydata(data)\n         ax.relim()\n         ax.autoscale_view()\n         fig.canvas.draw()\n         fig.canvas.flush_events()\n \n         # Display the plot\n         clear_output(wait=True)\n         display(fig)\n \n         # save the output \n         with open(\"test_data.csv\",\"a\", newline=\"\") as f:\n             writer = csv.writer(f,delimiter=\",\")\n             writer.writerow([time.time(),value])\n \n except KeyboardInterrupt:\n     print(\"Keyboard Interrupt. Exiting...\")\n finally:\n     ser.close()\n     clear_output()\n</pre></details> </details>\n  <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}