{"meta":{"filename":"01_download_and_load","title":"Importing Data","summary":"In this tutorial, the basics of Importing data with Colabs are introduced and data is loaded with Pandas and Geopandas.","toc":"true","prettify":"true"},"content":"<div class=\"unset\">\n   <style>\n   .unset{padding:0px;}\n   .unset p a img {\n     width: auto;\n   }\n   .unset p{ margin:10px;}\n   </style> <p><a href=\"https://mybinder.org/v2/gh/bnia/dataplay/main?filepath=%2Fnotebooks%2F01_Download_and_Load.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://colab.research.google.com/github/bnia/dataplay/blob/main/notebooks/01_Download_and_Load.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/bnia/dataplay/tree/main/notebooks/01_Download_and_Load.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/ellerbrock/open-source-badges/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a></p>\n<p> <a href=\"https://github.com/bnia/dataplay/blob/main/LICENSE\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://bnia.github.io\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a> \n <a href=\"https://pypi.python.org/pypi/dataplay/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/pypi/pyversions/dataplay.svg\" alt=\"Python Versions\"></a>\n <a href=\"\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/bnia/dataplay.svg?style=flat\" alt=\"GitHub last commit\"></a>  </p>\n<p> <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/bnia/dataplay.svg?style=social&label=Star\" alt=\"GitHub stars\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/bnia/dataplay.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/bnia/dataplay.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/bnia.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a> </p>\n<p> <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20%E2%9C%A8%20colab%20by%20@bniajfi%20https://github.com/bnia/dataplay%20%F0%9F%A4%97\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/url/https/github.com/bnia/dataplay.svg?style=social\" alt=\"Tweet\"></a> \n <a href=\"https://twitter.com/bniajfi\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/follow/bniajfi.svg?style=social\" alt=\"Twitter Follow\"></a></p>\n </div> <details open>\n <summary> <h2 id=\"about-this-tutorial\">About this Tutorial:</h2>\n </summary> <h3 id=\"whats-inside\">Whats inside?</h3>\n <p>In this notebook, the basics of data-intake are introduced.</p>\n<ul>\n<li><div>Data will be imported using Colabs Terminal Commands then load this data into pythons pandas</div></li>\n<li><div>We will import geospatial data from Esri then load this data into geo-pandas.</div></li>\n<li><div>A variety of data formats will be imported.</div></li>\n</ul>\n <h3 id=\"objectives\"><strong>Objectives</strong></h3>\n<p> By the end of this tutorial users should have an understanding of:</p>\n<ul>\n<li><div>Importing data with pandas and geopandas</div></li>\n<li><div>Querying data from Esri</div></li>\n<li><div>Retrieveing data programmatically</div></li>\n<li><div>This module assumes the data needs no handling prior to intake</div></li>\n<li><div>Loading data in a variety of formats</div></li>\n</ul>\n </details>\n <details>\n <summary> <h2 id=\"background\">Background</h2>\n </summary> <p>For this next example to work, we will need to import hypothetical csv files</p>\n <p><strong>Try It!</strong> Go ahead and try running the cell below in Colabs</p>\n </details>\n </details>\n <details>\n <summary> <h2 id=\"advanced\">Advanced</h2>\n </summary> <details>\n <summary> <h3 id=\"the-function\">The Function</h3>\n </summary> <pre class='prettyprint'>class Intake:\n \n   # 1. Recursively calls self/getData until something valid is given.\n   #    Returns df or False. Calls readInGeometryData. or pulls csv directly.\n   # Returns df or False.\n   def getData(url, interactive=False):\n     escapeQuestionFlags = [\"no\", '', 'none']\n     if ( Intake.isPandas(url) ): return url\n     if (str(url).lower() in escapeQuestionFlags ): return False\n     if interactive: print('Getting Data From: ', url)\n     try:\n       if ([ele for ele in ['pgeojson', 'shp', 'geojson'] if(ele in url)]):\n         print('gothere', url)\n         from dataplay import geoms\n         print('gothere1')\n         df = geoms.readInGeometryData(url=url, porg=False, geom='geometry', lat=False, lng=False, revgeocode=False,  save=False, in_crs=2248, out_crs=False)\n       elif  ('csv' in url): df = pd.read_csv( url )\n       return df\n     except:\n       if interactive: return Intake.getData(input(\"Error: Try Again?  ( URL/ PATH or  'NO'/ <Empty> ) \" ), interactive)\n       return False\n \n   # 1ai. A misnomer. Returns Bool.\n   def isPandas(df): return isinstance(df, pd.DataFrame) or isinstance(df, gpd.GeoDataFrame) or isinstance(df, tuple)\n \n \n   # a1. Used by Merge Lib. Returns valid (df, column) or (df, False) or (False, False).\n   def getAndCheck(url, col='geometry', interactive=False):\n     df = Intake.getData(url, interactive) # Returns False or df\n     if ( not Intake.isPandas(df) ):\n       if(interactive): print('No data was retrieved.', df)\n       return False, False\n     if (isinstance(col, list)):\n       for colm in col:\n         if not Intake.getAndCheckColumn(df, colm):\n           if(interactive): print('Exiting. Error on the column: ', colm)\n           return df, False\n     newcol = Intake.getAndCheckColumn(df, col, interactive) # Returns False or col\n     if (not newcol):\n       if(interactive): print('Exiting. Error on the column: ', col)\n       return df, col\n     return df, newcol\n \n   # a2. Returns Bool\n   def checkColumn(dataset, column): return {column}.issubset(dataset.columns)\n \n   # b1. Used by Merge Lib. Returns Both Datasets and Coerce Status\n   def coerce(ds1, ds2, col1, col2, interactive):\n     ds1, ldt, lIsNum = Intake.getdTypeAndFillNum(ds1, col1, interactive)\n     ds2, rdt, rIsNum  = Intake.getdTypeAndFillNum(ds2, col2, interactive)\n \n     ds2 = Intake.coerceDtypes(lIsNum, rdt, ds2, col2, interactive)\n     ds1 = Intake.coerceDtypes(rIsNum, ldt, ds1, col1, interactive)\n \n     # Return the data and the coerce status\n     return ds1, ds2, (ds1[col1].dtype == ds2[col2].dtype)\n \n    # b2. Used by Merge Lib. fills na with crazy number\n   def getdTypeAndFillNum(ds, col, interactive):\n     dt = ds[col].dtype\n     isNum = dt == 'float64' or dt == 'int64'\n     if isNum: ds[col] = ds[col].fillna(-1321321321321325)\n     return ds, dt, isNum\n \n    # b3. Used by Merge Lib.\n   def coerceDtypes(isNum, dt, ds, col, interactive):\n     if isNum and dt == 'object':\n       if(interactive): print('Converting Key from Object to Int' )\n       ds[col] = pd.to_numeric(ds[col], errors='coerce')\n       if interactive: print('Converting Key from Int to Float' )\n       ds[col] = ds[col].astype(float)\n     return ds\n \n   # a3. Returns False or col. Interactive calls self\n   def getAndCheckColumn(df, col, interactive):\n     if Intake.checkColumn(df, col) : return col\n     if (not interactive): return False\n     else:\n         print(\"Invalid column given: \", col);\n         print(df.columns);\n         print(\"Please enter a new column fom the list above.\");\n         col = input(\"Column Name: \" )\n         return Intake.getAndCheckColumn(df, col, interactive);</pre> </details> <pre class='prettyprint'>df = geoms.readInGeometryData(url=url, porg=False, geom='geometry', lat=False, lng=False, revgeocode=False,  save=False, in_crs=2248, out_crs=False)\n u = Intake\n rdf = Intake.getData(url) </pre> <p>Here we can save the data so that it may be used in later tutorials. </p>\n <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OBJECTID</th>\n      <th>CSA2010</th>\n      <th>hhchpov14</th>\n      <th>hhchpov15</th>\n      <th>hhchpov16</th>\n      <th>hhchpov17</th>\n      <th>hhchpov18</th>\n      <th>hhchpov19</th>\n      <th>CSA2020</th>\n      <th>hhchpov20</th>\n      <th>hhchpov21</th>\n      <th>Shape__Area</th>\n      <th>Shape__Length</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Allendale/Irving...</td>\n      <td>41.55</td>\n      <td>38.93</td>\n      <td>34.73</td>\n      <td>32.77</td>\n      <td>35.27</td>\n      <td>32.60</td>\n      <td>Allendale/Irving...</td>\n      <td>21.42</td>\n      <td>21.42</td>\n      <td>6.38e+07</td>\n      <td>38770.17</td>\n      <td>POLYGON ((-76.65...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Beechfield/Ten H...</td>\n      <td>22.31</td>\n      <td>19.42</td>\n      <td>21.22</td>\n      <td>23.92</td>\n      <td>21.90</td>\n      <td>15.38</td>\n      <td>Beechfield/Ten H...</td>\n      <td>14.77</td>\n      <td>14.77</td>\n      <td>4.79e+07</td>\n      <td>37524.95</td>\n      <td>POLYGON ((-76.69...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Belair-Edison</td>\n      <td>36.93</td>\n      <td>36.88</td>\n      <td>36.13</td>\n      <td>34.56</td>\n      <td>39.74</td>\n      <td>41.04</td>\n      <td>Belair-Edison</td>\n      <td>31.76</td>\n      <td>31.76</td>\n      <td>4.50e+07</td>\n      <td>31307.31</td>\n      <td>POLYGON ((-76.56...</td>\n    </tr>\n  </tbody>\n</table>\n</div> <pre class='prettyprint'># .to_csv(string+'.csv', encoding=\"utf-8\", index=False, quoting=csv.QUOTE_ALL)</pre> <p> Download data by: </p>\n<ul>\n<li><div>Clicking the &#39;Files&#39; tab in the left hand menu of this screen. Locate your file within the file explorer that appears directly under the &#39;Files&#39; tab button once clicked. Right click the file in the file explorer and select the &#39;download&#39; option from the dropdown.</div></li>\n</ul>\n <p>You can upload this data into the next tutorial in one of two ways.</p>\n<ol>\n<li><div>Uploading the saved file to google Drive and connecting to your drive path</div></li>\n</ol>\n<p> OR. </p>\n<ol start=\"2\">\n<li><div>&#39;by first downloading the dataset as directed above, and then navigating to the next tutorial. Go to their page and then uploading data using an file &#39;upload&#39; button accessible within the &#39;Files&#39; tab in the left hand menu of this screen. The next tutorial will teach you how to load this data so that it may be mapped.</div></li>\n</ol>\n <p>Here are some examples:</p>\n <p>Using Esri and the Geoms handler directly:</p>\n <pre class='prettyprint'>geoloom_gdf_url = \"https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Geoloom_Crowd/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\"\n geoloom_gdf = dataplay.geoms.readInGeometryData(url=geoloom_gdf_url, porg=False, geom='geometry', lat=False, lng=False, revgeocode=False,  save=False, in_crs=4326, out_crs=False)\n geoloom_gdf = geoloom_gdf.dropna(subset=['geometry']) \n geoloom_gdf.head(1)</pre> <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OBJECTID</th>\n      <th>Data_type</th>\n      <th>Attach</th>\n      <th>ProjNm</th>\n      <th>Descript</th>\n      <th>Location</th>\n      <th>URL</th>\n      <th>Name</th>\n      <th>PhEmail</th>\n      <th>Comments</th>\n      <th>POINT_X</th>\n      <th>POINT_Y</th>\n      <th>GlobalID</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Artists &amp; Resources</td>\n      <td>NaN</td>\n      <td>Joe</td>\n      <td>Test</td>\n      <td>123 Market Pl, B...</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>-8.53e+06</td>\n      <td>4.76e+06</td>\n      <td>e59b4931-e0c8-4d...</td>\n      <td>POINT (-76.60661...</td>\n    </tr>\n  </tbody>\n</table>\n</div> <p>Again but with the Intake class:</p>\n <pre class='prettyprint'>Geoloom_Crowd, rcol = u.getAndCheck('https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Geoloom_Crowd/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson')\n Geoloom_Crowd.head(1)</pre> <p>This getAndCheck function is useful for checking for a required field.</p>\n <pre class='prettyprint'>Hhpov = Hhpov[['CSA2010', 'hhpov15',\t'hhpov16',\t'hhpov17',\t'hhpov18',\t'hhpov19']]\n # Hhpov.to_csv('Hhpov.csv')</pre> <p>We could also retrieve from a file.</p>\n <pre class='prettyprint'># rdf = u.getData('Hhpov.csv')\n rdf.head()</pre> <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OBJECTID</th>\n      <th>CSA2010</th>\n      <th>hhchpov14</th>\n      <th>hhchpov15</th>\n      <th>hhchpov16</th>\n      <th>hhchpov17</th>\n      <th>hhchpov18</th>\n      <th>hhchpov19</th>\n      <th>CSA2020</th>\n      <th>hhchpov20</th>\n      <th>hhchpov21</th>\n      <th>Shape__Area</th>\n      <th>Shape__Length</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Allendale/Irving...</td>\n      <td>41.55</td>\n      <td>38.93</td>\n      <td>34.73</td>\n      <td>32.77</td>\n      <td>35.27</td>\n      <td>32.60</td>\n      <td>Allendale/Irving...</td>\n      <td>21.42</td>\n      <td>21.42</td>\n      <td>6.38e+07</td>\n      <td>38770.17</td>\n      <td>POLYGON ((-76.65...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Beechfield/Ten H...</td>\n      <td>22.31</td>\n      <td>19.42</td>\n      <td>21.22</td>\n      <td>23.92</td>\n      <td>21.90</td>\n      <td>15.38</td>\n      <td>Beechfield/Ten H...</td>\n      <td>14.77</td>\n      <td>14.77</td>\n      <td>4.79e+07</td>\n      <td>37524.95</td>\n      <td>POLYGON ((-76.69...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Belair-Edison</td>\n      <td>36.93</td>\n      <td>36.88</td>\n      <td>36.13</td>\n      <td>34.56</td>\n      <td>39.74</td>\n      <td>41.04</td>\n      <td>Belair-Edison</td>\n      <td>31.76</td>\n      <td>31.76</td>\n      <td>4.50e+07</td>\n      <td>31307.31</td>\n      <td>POLYGON ((-76.56...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Brooklyn/Curtis ...</td>\n      <td>46.94</td>\n      <td>45.01</td>\n      <td>46.45</td>\n      <td>46.41</td>\n      <td>39.89</td>\n      <td>41.39</td>\n      <td>Brooklyn/Curtis ...</td>\n      <td>51.32</td>\n      <td>51.32</td>\n      <td>1.76e+08</td>\n      <td>150987.70</td>\n      <td>MULTIPOLYGON (((...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Canton</td>\n      <td>6.52</td>\n      <td>5.49</td>\n      <td>2.99</td>\n      <td>4.02</td>\n      <td>4.61</td>\n      <td>4.83</td>\n      <td>Canton</td>\n      <td>4.13</td>\n      <td>4.13</td>\n      <td>1.54e+07</td>\n      <td>23338.61</td>\n      <td>POLYGON ((-76.57...</td>\n    </tr>\n  </tbody>\n</table>\n</div> </details>\n  <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}