{"meta":{"title":"Importing Data","summary":"Creating and Testing the Python Intake Class with Pandas and Geopandas support.","toc":"true","prettify":"true","default_exp":"intaker","audio":"https://charleskarpati.com/audio/01_download_and_load.mp3","filename":"01_download_and_load"},"content":"<p><a href=\"https://mybinder.org/v2/gh/bnia/dataplay/main?filepath=%2Fnotebooks%2F01_Download_and_Load.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://colab.research.google.com/github/bnia/dataplay/blob/main/notebooks/01_Download_and_Load.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/bnia/dataplay/tree/main/notebooks/01_Download_and_Load.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/ellerbrock/open-source-badges/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a>\n <br>\n <a href=\"https://github.com/bnia/dataplay/blob/main/LICENSE\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://bnia.github.io\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a> \n <a href=\"https://pypi.python.org/pypi/dataplay/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/pypi/pyversions/dataplay.svg\" alt=\"Python Versions\"></a>\n <a href=\"\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/bnia/dataplay.svg?style=flat\" alt=\"GitHub last commit\"></a><br> <br>\n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/bnia/dataplay.svg?style=social&label=Star\" alt=\"GitHub stars\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/bnia/dataplay.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/bnia/dataplay.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/bnia.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a> \n <br>\n <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20%E2%9C%A8%20colab%20by%20@bniajfi%20https://github.com/bnia/dataplay%20%F0%9F%A4%97\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/url/https/github.com/bnia/dataplay.svg?style=social\" alt=\"Tweet\"></a> \n <a href=\"https://twitter.com/bniajfi\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/follow/bniajfi.svg?style=social\" alt=\"Twitter Follow\"></a></p>\n <details open>\n <summary> <h2 id=\"about\">About:</h2>\n </summary> <h3 id=\"whats-inside\">Whats inside?</h3>\n <p>In this notebook, we build and test a basic data-intaker.</p>\n<ul>\n<li><p>.CSV will be loaded into pythons pandas</p></li>\n<li><p>We will import geospatial data from Esri then load this data into geo-pandas.</p></li>\n</ul>\n </details>\n <details>\n <summary> <h2 id=\"try-it\">Try It!</h2>\n </summary> <p>Go ahead and try running the cell below in a python notebook after clicking the &#39;Open In Colab&#39; button above.</p>\n </details>\n </details>\n <details>\n <summary> <h2 id=\"the-function\">The Function</h2>\n </summary>  <pre class='prettyprint'>import geopandas as gpd\n import numpy as np\n import pandas as pd\n # conditionally loaded ->  from dataplay import geoms</pre> <pre class='prettyprint'>pd.set_option('max_colwidth', 20)\n pd.set_option('display.expand_frame_repr', False)\n pd.set_option('display.precision', 2)</pre> <details>\n <summary> <h3 id=\"the-function\">The Function</h3>\n </summary> <pre class='prettyprint'># Can read in a CSV URL but uses dataplay.geom.readInGeometryData() for Geojson endpoints.\n # Otherwise this tool assumes shp or pgeojson files have geom='geometry', in_crs=2248. \n # Depending on interactivity the values should be \n # coerce fillna(-1321321321321325)\n # Returns </pre> <details > <summary>Click to toggle</summary> <pre class='prettyprint'>\n # The intaker class retrieves data into a pandas dataframe.\n class Intake:\n \n   # 1. Recursively calls self/getData until something valid is given.\n   #    Returns df or False. Calls readInGeometryData. or pulls csv directly.\n   # Returns df or False.\n   def getData(url, interactive=False):\n     escapeQuestionFlags = [\"no\", '', 'none']\n     if ( Intake.isPandas(url) ): return url\n     if (str(url).lower() in escapeQuestionFlags ): return False\n     if interactive: print('Getting Data From: ', url)\n     try:\n       if  ('csv' in url): \n         df = pd.read_csv( url )\n         # check if 'geometry' is a column\n         if (Intake.checkColumn(df, 'geometry')): \n           from dataplay import geoms\n           df = geoms.readInGeometryData(url=url, porg=False, geom='geometry', lat=False, lng=False, revgeocode=False,  save=False, in_crs=2248, out_crs=False)\n       if ([ele for ele in ['pgeojson', 'shp', 'geojson'] if(ele in url)]):\n         print('importing geoms', url)\n         from dataplay import geoms\n         print('using readInGeometryData')\n         df = geoms.readInGeometryData(url=url, porg=False, geom='geometry', lat=False, lng=False, revgeocode=False,  save=False, in_crs=2248, out_crs=False)\n       return df\n     except:\n       if interactive: return Intake.getData(input(\"Error: Try Again?  ( URL/ PATH or  'NO'/ <Empty> ) \" ), interactive)\n       return False\n \n   # 1ai. A misnomer. Returns Bool.\n   def isPandas(df): return isinstance(df, pd.DataFrame) or isinstance(df, gpd.GeoDataFrame) or isinstance(df, tuple)\n \n \n   # a1. Used by Merge Lib. Returns valid (df, column) or (df, False) or (False, False).\n   def getAndCheck(url, col='geometry', interactive=False):\n     df = Intake.getData(url, interactive) # Returns False or df\n     if ( not Intake.isPandas(df) ):\n       if(interactive): print('No data was retrieved.', df)\n       return False, False\n     if (isinstance(col, list)):\n       for colm in col:\n         if not Intake.getAndCheckColumn(df, colm):\n           if(interactive): print('Exiting. Error on the column: ', colm)\n           return df, False\n     newcol = Intake.getAndCheckColumn(df, col, interactive) # Returns False or col\n     if (not newcol):\n       if(interactive): print('Exiting. Error on the column: ', col)\n       return df, col\n     return df, newcol\n \n   # a2. Returns Bool\n   def checkColumn(dataset, column): return {column}.issubset(dataset.columns)\n \n   # b1. Used by Merge Lib. Returns Both Datasets and Coerce Status\n   def coerce(ds1, ds2, col1, col2, interactive):\n     ds1, ldt, lIsNum = Intake.getdTypeAndFillNum(ds1, col1, interactive)\n     ds2, rdt, rIsNum  = Intake.getdTypeAndFillNum(ds2, col2, interactive)\n \n     ds2 = Intake.coerceDtypes(lIsNum, rdt, ds2, col2, interactive)\n     ds1 = Intake.coerceDtypes(rIsNum, ldt, ds1, col1, interactive)\n \n     # Return the data and the coerce status\n     return ds1, ds2, (ds1[col1].dtype == ds2[col2].dtype)\n \n    # b2. Used by Merge Lib. fills na with crazy number\n   def getdTypeAndFillNum(ds, col, interactive):\n     dt = ds[col].dtype\n     isNum = dt == 'float64' or dt == 'int64'\n     if isNum: ds[col] = ds[col].fillna(-1321321321321325)\n     return ds, dt, isNum\n \n    # b3. Used by Merge Lib.\n   def coerceDtypes(isNum, dt, ds, col, interactive):\n     if isNum and dt == 'object':\n       if(interactive): print('Converting Key from Object to Int' )\n       ds[col] = pd.to_numeric(ds[col], errors='coerce')\n       if interactive: print('Converting Key from Int to Float' )\n       ds[col] = ds[col].astype(float)\n     return ds\n \n   # a3. Returns False or col. Interactive calls self\n   def getAndCheckColumn(df, col, interactive):\n     if Intake.checkColumn(df, col) : return col\n     if (not interactive): return False\n     else:\n         print(\"Invalid column given: \", col);\n         print(df.columns);\n         print(\"Please enter a new column fom the list above.\");\n         col = input(\"Column Name: \" )\n         return Intake.getAndCheckColumn(df, col, interactive);</pre></details> </details> <pre class='prettyprint'>pwd</pre> 'c:\\\\Users\\\\charl\\\\Documents\\\\GitHub\\\\karpatic\\\\src\\\\ipynb\\\\dataplay' <pre class='prettyprint'>url = \"C:/Users/charl/Documents/GitHub/karpatic/src/ipynb/labs/scraped_data.csv\"</pre> <pre class='prettyprint'>\n df = Intake.getData(url, interactive=True)\n df.head()</pre> Getting Data From:  C:/Users/charl/Documents/GitHub/karpatic/src/ipynb/labs/scraped_data.csv\n <pre class='prettyprint'>url = 'https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson'\n u = Intake\n rdf = Intake.getData(url) \n rdf.head()</pre> gothere https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\n  <p>Here we can save the data so that it may be used in later tutorials. </p>\n <pre class='prettyprint'># string = 'test_save_data_with_geom_and_csa'\n # .to_csv(string+'.csv', encoding=\"utf-8\", index=False, quoting=csv.QUOTE_ALL)</pre> <p> If you are in Colab, Download data by: </p>\n<ul>\n<li><p>Clicking the &#39;Files&#39; tab in the left hand menu of this screen. Locate your file within the file explorer that appears directly under the &#39;Files&#39; tab button once clicked. Right click the file in the file explorer and select the &#39;download&#39; option from the dropdown.</p></li>\n</ul>\n <p>You can upload this data into the next tutorial in one of two ways.</p>\n<ol>\n<li><p>Uploading the saved file to google Drive and connecting to your drive path</p></li>\n</ol>\n<p> OR. </p>\n<ol start=\"2\">\n<li><p>&#39;by first downloading the dataset as directed above, and then navigating to the next tutorial. Go to their page and then uploading data using an file &#39;upload&#39; button accessible within the &#39;Files&#39; tab in the left hand menu of this screen. The next tutorial will teach you how to load this data so that it may be mapped.</p></li>\n</ol>\n <p>Here are some examples:</p>\n <p>Using Esri and the Geoms handler directly:</p>\n <pre class='prettyprint'>import dataplay\n geoloom_gdf_url = \"https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Geoloom_Crowd/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\"\n geoloom_gdf = dataplay.geoms.readInGeometryData(url=geoloom_gdf_url, porg=False, geom='geometry', lat=False, lng=False, revgeocode=False,  save=False, in_crs=4326, out_crs=False)\n geoloom_gdf = geoloom_gdf.dropna(subset=['geometry']) \n geoloom_gdf.head(1)</pre> <p>Again but with the Intake class:</p>\n <pre class='prettyprint'>u = Intake\n Geoloom_Crowd, rcol = u.getAndCheck('https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Geoloom_Crowd/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson')\n Geoloom_Crowd.head(1)</pre> <p>This getAndCheck function is useful for checking for a required field.</p>\n <pre class='prettyprint'>Hhpov, rcol = u.getAndCheck('https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson', 'hhpov19', True)\n Hhpov = Hhpov[['CSA2010', 'hhpov15',\t'hhpov16',\t'hhpov17',\t'hhpov18',\t'hhpov19']]\n # Hhpov.to_csv('Hhpov.csv')</pre>  <p>We could also retrieve from a file.</p>\n <pre class='prettyprint'>u = Intake\n # rdf = u.getData('Hhpov.csv')\n rdf.head()</pre> <h2 id=\"test\">Test</h2>\n <p>Now that it&#39;s deployed. I restart the kernal and try to import dataplay intaker directly</p>\n </details> <pre class='prettyprint'>import dataplay\n help(dataplay)</pre> Help on package dataplay:\n\nNAME\n    dataplay\n\nPACKAGE CONTENTS\n    corr\n    geoms\n    intaker\n    merge\n    timelapse_data_gifs\n\nFILE\n    c:\\users\\charl\\documents\\github\\karpatic\\src\\ipynb\\dataplay\\dataplay\\__init__.py\n\n\n <pre class='prettyprint'>from dataplay import intaker\n help(intaker)</pre> Help on module dataplay.intaker in dataplay:\n\nNAME\n    dataplay.intaker\n\nCLASSES\n    builtins.object\n        Intake\n    \n    class Intake(builtins.object)\n     |  # The intaker class will do whatever it needs to to get the data in a pandas dataframe.\n     |  \n     |  Methods defined here:\n     |  \n     |  checkColumn(dataset, column)\n     |      # a2. Returns Bool\n     |  \n     |  coerce(ds1, ds2, col1, col2, interactive)\n     |      # b1. Used by Merge Lib. Returns Both Datasets and Coerce Status\n     |  \n     |  coerceDtypes(isNum, dt, ds, col, interactive)\n     |  \n     |  getAndCheck(url, col='geometry', interactive=False)\n     |      # a1. Used by Merge Lib. Returns valid (df, column) or (df, False) or (False, False).\n     |  \n     |  getAndCheckColumn(df, col, interactive)\n     |      # a3. Returns False or col. Interactive calls self\n     |  \n     |  getData(url, interactive=False)\n     |      # 1. Recursively calls self/getData until something valid is given.\n     |      #    Returns df or False. Calls readInGeometryData. or pulls csv directly.\n     |      # Returns df or False.\n     |  \n     |  getdTypeAndFillNum(ds, col, interactive)\n     |  \n     |  isPandas(df)\n     |      # 1ai. A misnomer. Returns Bool.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\nFILE\n    c:\\users\\charl\\documents\\github\\karpatic\\src\\ipynb\\dataplay\\dataplay\\intaker.py\n\n\n <pre class='prettyprint'>from dataplay import Intake</pre> <pre class='prettyprint'>one = Intake.getData('../labs/scraped_data.csv', True)</pre> Getting Data From:  ../labs/scraped_data.csv\n <pre class='prettyprint'>one.head()</pre> <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>time_start</th>\n      <th>time_end</th>\n      <th>geometry</th>\n      <th>satellite</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-08</td>\n      <td>2023-09-08</td>\n      <td>POLYGON ((-74.9275 -55.08553, -79.45801 -47.09...</td>\n      <td>Sentinel 1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-08</td>\n      <td>2023-09-08</td>\n      <td>POLYGON ((-92.60435 -2.56685, -92.83493 -1.488...</td>\n      <td>Sentinel 1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-08</td>\n      <td>2023-09-08</td>\n      <td>POLYGON ((78.23316 46.92096, 75.54011 36.55576...</td>\n      <td>Sentinel 1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-08</td>\n      <td>2023-09-08</td>\n      <td>POLYGON ((-125.13252 34.44028, -126.29655 39.2...</td>\n      <td>Sentinel 1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-08</td>\n      <td>2023-09-08</td>\n      <td>POLYGON ((53.6393 47.23945, 49.80111 32.01341,...</td>\n      <td>Sentinel 1</td>\n    </tr>\n  </tbody>\n</table>\n</div> <pre class='prettyprint'>one.columns</pre> Index(['time_start', 'time_end', 'geometry', 'satellite'], dtype='object') <pre class='prettyprint'>one['time_start'].dtype</pre> dtype('O') <pre class='prettyprint'>one.dtypes</pre> time_start    object\n,time_end      object\n,geometry      object\n,satellite     object\n,dtype: object\n  <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}