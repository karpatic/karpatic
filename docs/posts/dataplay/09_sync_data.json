{"meta":{"title":"Sync Data","summary":"Sync and display data.","toc":"tocHere","prettify":"true","default_exp":"sync","audio":"https://charleskarpati.com/audio/09_sync_data.mp3","filename":"09_sync_data"},"content":"<h2 id=\"welcome-to-my-test-page-\">Welcome to my test page! <i class=\"fas fa-adjust\"></i></h2>\n <br>\n \n<p> <a href=\"https://mybinder.org/v2/gh/bnia/datalabs/main?filepath=%2Fnotebooks%2F07_nb_2_html_tests.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://colab.research.google.com/github/bnia/datalabs/blob/main/notebooks/07_nb_2_html_tests.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/bnia/datalabs/tree/main/notebooks/07_nb_2_html_tests.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/ellerbrock/open-source-badges/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a>\n <br>\n <a href=\"https://github.com/bnia/datalabs/blob/main/LICENSE\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://bnia.github.io\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a>\n <a href=\"\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/bnia/datalabs.svg?style=flat\" alt=\"GitHub last commit\"></a>  </p>\n<p> <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/bnia/datalabs.svg?style=social&label=Star\" alt=\"GitHub stars\"></a>\n <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/bnia/datalabs.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a>\n <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/bnia/datalabs.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a>\n <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/bnia.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a>\n <br>\n <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20%E2%9C%A8%20colab%20by%20@bniajfi%20https://github.com/bnia/datalabs%20%F0%9F%A4%97\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/url/https/github.com/bnia/datalabs.svg?style=social\" alt=\"Tweet\"></a>\n <a href=\"https://twitter.com/bniajfi\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/follow/bniajfi.svg?style=social\" alt=\"Twitter Follow\"></a></p>\n <details open>\n <summary> <h2 id=\"table-of-contents\">Table of Contents</h2>\n </summary> <div id='tocHere'></div> </details>\n <details open>\n <summary> <h3 id=\"how-it-works\">How it works</h3>\n </summary> <style>\n .shapedImage {\n   float: left;\n   width: 250px;\n   shape-outside: url(https://interactive-examples.mdn.mozilla.net/media/examples/round-balloon.png);\n   shape-margin:20px;\n   margin-right: 20px;\n   margin-bottom: 20px;\n   padding-top: 30px;\n }\n .shapedImage + p::first-letter {\n   font-size: 1.5rem;\n   font-weight: bold;\n   color: brown;\n }\n </style> \n <img class=\"shapedImage\" src=\"https://interactive-examples.mdn.mozilla.net/media/examples/round-balloon.png\" alt=\"Sample Image\"> \n \n<p> I want to create interactive ipynb visualizations which share and update linked data between cells and persists when converted to html. Jupyter Notebooks being a web app makes this possible as Ipynb&#39;s cell outputs are actually just IFRAMES. Jupyter notebooks run a web server responsible for routing communication from your browser to your local machine. </p>\n <aside class=\"info\"> Everything you are reading was made in an ipynb </aside> \n \n<p> Doing this will store the dataset into the browsers window.</p>\n<p> This way, you no longer need to pass the dataset to create Multiple Visualizations.</p>\n </details> <details open>\n <summary> <h2 id=\"similar-tools\">Similar Tools</h2>\n </summary> <ul>\n<li><p><a href=\"https://pandoc.org/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Pandoc</a>: A universal document converter. That&#39;s it.</p></li>\n<li><ul>\n<li><p><a href=\"https://quarto.org/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">quarto</a>: Uses Pandoc to publish webpages with styled flair and web functionality.</p></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p><a href=\"https://nbdev.fast.ai/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">nbdev</a>: Focuses as a dev tool but uses quarto for documentation. Previously used a combination of nbconvert and jekyll to get the same effect.</p></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><p><a href=\"https://nbconvert.readthedocs.io/en/latest/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">nbconvert</a>: Uses pandoc to publish with styled flair.</p></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p><a href=\"https://jupyterbook.org/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Jupyter Book</a>: Creates books from Jupyter Notebooks. Uses nbconvert.</p></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p><a href=\"https://voila.readthedocs.io/en/stable/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Voil√†</a>: Transforms Jupyter notebooks into web applications. Uses nbconvert.</p></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p><a href=\"https://papermill.readthedocs.io/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Papermill</a>: Execute and parameterize notebooks. Uses nbconvert.</p></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p><a href=\"https://jupytext.readthedocs.io/en/latest/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Jupytext</a>: Pairs notebooks with Markdown or Python scripts. Uses nbconvert.</p></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.sphinx-doc.org/en/master/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Sphinx</a>: Generates documentation from source code, not directly focused on Jupyter Notebooks but still relevant for documentation.</p></li>\n<li><ul>\n<li><p><a href=\"https://readthedocs.org/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Read The Docs</a>: Hosts documentation, integrates with Sphinx and MkDocs.</p></li>\n</ul>\n</li>\n<li><p>Other Tools </p></li>\n<li><ul>\n<li><p><a href=\"https://docusaurus.io/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Docusaurus</a>: Builds optimized websites and supports Markdown, relevant for webpage generation.</p></li>\n</ul>\n</li>\n<li><ul>\n<li><p><a href=\"https://www.mkdocs.org/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">MkDocs</a>: Generates documentation from Markdown files, similar in producing web content.</p></li>\n</ul>\n</li>\n<li><ul>\n<li><p><a href=\"https://jekyllrb.com/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Jekyll</a>: A static site generator, adaptable for documentation, similar in web content generation.</p></li>\n</ul>\n</li>\n<li><ul>\n<li><p><a href=\"https://asciidoctor.org/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Asciidoctor</a>: Processes AsciiDoc files for documentation, less directly related but still in the realm of web documentation.</p></li>\n</ul>\n</li>\n</ul>\n </details>\n <details open>\n <summary> <h1 id=\"how-it-works\">How it works</h1>\n </summary>  <pre class='prettyprint'>import pandas as pd\n \n # Example DataFrame\n data = {\n     'Name': ['Alice', 'Bob', 'Charlie'],\n     'Age': [25, 30, 35],\n     'City': ['New York', 'Paris', 'London'] \n }\n df = pd.DataFrame(data) \n \n # displayElement(df) \n # OR EVEN \n displayElement(df, \n                viztype='Table', \n                rows='Name', \n                cols='Age'\n                )</pre> <pre class='prettyprint'># displayElement(df) \n # OR EVEN \n displayElement(df, \n                viztype='Table', \n                rows='Name', \n                cols='PetalWidth'\n                )</pre> <pre class='prettyprint'>df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris.csv') \n displayElement(df) </pre> <pre class='prettyprint'>displayElement(df) </pre> <p>I will first cover basic core functions before showing the convenience function that makes it all easier to use.</p>\n <br>\n Terms:\n \n<ul>\n<li><p>label - For the dataset  </p></li>\n<li><p>ds - the pands dataframe mapped to the label</p></li>\n<li><p>vizId - To update the visual</p></li>\n<li><p>vizType - Specifies the default viz type</p></li>\n<li><p>rows / cols - To be used on the viztype</p></li>\n</ul>\n<p> To use the tool, first perform typical python data science operations </p>\n <pre class='prettyprint'>import pandas as pd\n \n # Example DataFrame\n data = {\n     'Name': ['Alice', 'Bob', 'Charlie'],\n     'Age': [25, 30, 35],\n     'City': ['New York', 'Paris', 'London'] \n }\n df = pd.DataFrame(data) </pre> <p>From there, it is possible to...</p>\n <ol start=\"0\">\n<li><p>Display the data as is. This will visualize the dataframe that is non-updateable</p></li>\n</ol>\n <pre class='prettyprint'># displayElement(df) \n # OR EVEN \n displayElement(df, \n                viztype='Table', \n                rows='Name', \n                cols='Age'\n                )</pre> <ol>\n<li><p>Save the current state of the df to a label and then display it using the label name.</p></li>\n</ol>\n <aside class=\" tip\"> Calling ```displayElements``` on a label with no mapping will render a non-configured Table that is non-updateable </aside>  <pre class='prettyprint'>setData('label1', df)\n \n displayElements('label1')</pre> <ol start=\"2\">\n<li><p>Create a mapping between a label and an elementId so it may be later updated.</p></li>\n</ol>\n <pre class='prettyprint'># setMapping('label1', 'viz1')\n # setMapping('label1', 'viz1', 'Table')\n setMapping(label='label1', vizid='viz1', viztype='Table', cols='Name', rows='Age')</pre> <ol start=\"3\">\n<li><p>Render the mappings</p></li>\n</ol>\n <pre class='prettyprint'>displayElements('label1')</pre> <ol start=\"4\">\n<li><p>Multiple labels, and mappings to the labels may be made. To update the data and mappings (above), it&#39;s just more of the same.</p></li>\n</ol>\n <aside class=\"tip\">Notice how the the tables directly above and below have been updated but the very first two tables did not.</aside>\n \n <aside class=\"warning\"> Creating multiple labels will render the tables one after another if the element ID does not already exist </aside> <pre class='prettyprint'>setMapping('label1', 'viz2')\n \n # df.loc[df['Name'] == 'Alice', 'Age'] = 3 \n df.loc[len(df)] = {'Name': 'Diana', 'Age': 28, 'City': 'Berlin'}\n \n setData('label1', df)\n \n displayElements('label1')</pre> <p>undefined combines the three functions. Toss it w/e - and w/e will update or be made.</p>\n <pre class='prettyprint'>df.loc[df['Name'] == 'Alice', 'Age'] = 16\n update(label='label1', ds=df)</pre> <p>Lets create another visual mapping for the existing label</p>\n <pre class='prettyprint'>update(label='label1', vizid='viz3', viztype='Table')</pre> <p>And to create a new saved dataset and visualize in one go we just add the ds</p>\n <pre class='prettyprint'>df.loc[df['Name'] == 'Alice', 'Age'] = 6\n \n update(label='label2', ds=df, vizid='viz4', viztype='Table')\n</pre> <p>As ininusated earlier, it&#39;s possible specify where the visual should be placed by using undefined or magicundefined to render the html div with an id of the vizId specified in your mapping </p>\nundefined\n  <p> And now data can be inserted into it. The container can be placed anywhere, but must be executed before the call for visualizing.</p>\n <pre class='prettyprint'>df.loc[df['Name'] == 'Alice', 'Age'] = 7\n \n update(label='label2', ds=df, vizid='insertHere1', viztype='Table', unset=False)\n</pre> </details>\n  <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}