{"meta":{"filename":"three2","title":"Three","summary":"In this chapter, we will learn about three and explore some of its many features.","toc":"true","prettify":"true"},"content":"<div id='container'></div> <pre class='prettyprint'>different curves depending on the svg part</pre> <p><a href=\"https://spline.design/pricing\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://spline.design/pricing</a></p>\n<p> camera lookat target position</p>\n<p> <a href=\"https://codepen.io/boytchev/pen/jOvWGPN\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://codepen.io/boytchev/pen/jOvWGPN</a>\n <a href=\"https://codepen.io/prisoner849/pen/RwYrZKg?editors=1010\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://codepen.io/prisoner849/pen/RwYrZKg?editors=1010</a></p>\n<p> <a href=\"https://www.cs.cmu.edu/~fp/courses/graphics/asst5/catmullRom.pdf\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://www.cs.cmu.edu/~fp/courses/graphics/asst5/catmullRom.pdf</a>\n <a href=\"https://mortoray.com/rendering-an-svg-elliptical-arc-as-bezier-curves/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://mortoray.com/rendering-an-svg-elliptical-arc-as-bezier-curves/</a>\n <a href=\"https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes</a>\n <a href=\"https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes</a>\n <a href=\"https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute</a>\n <a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif</a></p>\n <p>path inherits curvepath which inherits curve</p>\n<p> curvepath is a set of curves</p>\n<p> you got </p>\n<p> LineCurve\n A curve representing a 2d line segment.</p>\n<ul>\n<li><div>LineCurve( startVec : Vector2, endVec : Vector2 )</div></li>\n</ul>\n<p> CatmullRomCurve3\n .curveType : String\n Possible values are centripetal, chordal and catmullrom.\n .tension : Float\n When .curveType is catmullrom, defines catmullrom&#39;s tension.</p>\n<p> SplineCurve\n Create a smooth 2d spline curve from a series of points.\n uses Interpolations.CatmullRom to create the curve.</p>\n<ul>\n<li><div>SplineCurve( points : Array )</div></li>\n</ul>\n<p> ARC/ EllipseCurve</p>\n<ul>\n<li><div>Creates a 2d curve in the shape of an ellipse.</div></li>\n</ul>\n<p> QuadraticBezierCurve\n Create a smooth 2d quadratic bezier curve, defined by a startpoint, endpoint and a single control point.\n QuadraticBezierCurve( v0 : Vector2, v1 : Vector2, v2 : Vector2 )</p>\n<p> CubicBezierCurve\n Create a smooth 2d cubic bezier curve, defined by a start point, endpoint and two control points.</p>\n<p> Path</p>\n<p> .currentPoint : Vector2\n The current offset of the path. Any new Curve added will start here.</p>\n<p> .splineThru ( points : Array ) : this\n points - An array of Vector2s\n Connects a new SplineCurve onto the path.</p>\n<p> .setFromPoints ( vector2s : Array ) : this\n points -- array of Vector2s.\n Points are added to the curves array as LineCurves.</p>\n<p> .lineTo ( x : Float, y : Float ) : this\n Connects a LineCurve from .currentPoint to x, y onto the path.</p>\n<p> .moveTo ( x : Float, y : Float ) : this\n Move the .currentPoint to x, y.</p>\n<p> .quadraticCurveTo ( cpX : Float, cpY : Float, x : Float, y : Float ) : this\n Creates a quadratic curve from .currentPoint with cpX and cpY as control point and updates .currentPoint to x and y.</p>\n<p> .bezierCurveTo ( cp1X : Float, cp1Y : Float, cp2X : Float, cp2Y : Float, x : Float, y : Float ) : this\n This creates a bezier curve from .currentPoint with (cp1X, cp1Y) and (cp2X, cp2Y) as control points and updates .currentPoint to x and y.</p>\n <p>const path = new THREE.Path();</p>\n<p> path.lineTo( 0, 0.8 );\n path.quadraticCurveTo( 0, 1, 0.2, 1 );\n path.lineTo( 1, 1 );</p>\n<p> const points = path.getPoints();\n const geometry = new THREE.BufferGeometry().setFromPoints( points );</p>\n <p>const extrudePath = new THREE.CatmullRomCurve3( [\n new THREE.Vector3( 0, - 40, - 40 ),\n new THREE.Vector3( 0, 40, - 40 ),\n new THREE.Vector3( 0, 140, - 40 ),\n new THREE.Vector3( 0, 40, 40 ),\n new THREE.Vector3( 0, - 40, 40 )\n ] );</p>\n<p> GEOMETRY</p>\n<p> tubeGeometry = new THREE.TubeGeometry( extrudePath, params.extrusionSegments, 4, params.radiusSegments, params.closed );</p>\n<p> OR</p>\n<p> const points = curve.getPoints( 50 );\n const geometry = new THREE.BufferGeometry().setFromPoints( points );</p>\n <p>&gt;</p>\n <script type=\"importmap\">\n   {\n     \"imports\": {\n       \"dt\": \"https://cdn.jsdelivr.net/npm/d3@7.8.4/dist/d3.min.js\",\n       \"three\": \"https://unpkg.com/three@0.123.0/build/three.module.js\",\n       \"three/addons/\": \"https://unpkg.com/three@0.149.0/examples/jsm/\",\n       \"CSG\": \"../js/CSG.js\"\n     }\n   }\n </script>\n <script type=\"module\">\n \n import * as THREE from \"three\";\n window.THREE = THREE\n let CSG = (await import('../js/CSG.js')).CSG\n console.log({CSG})\n let { create } = (await import('https://cdn.jsdelivr.net/npm/d3@7.8.4/dist/d3.min.js')); \n import { OrbitControls } from \"three/addons/controls/OrbitControls.js\";\n import { SVGLoader } from \"three/addons/loaders/SVGLoader.js\";\n let width = 500; let height = width;\n // console.clear();\n \n   let geomUrl=\"https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Tpop/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\";\n   let geojson = (await (await fetch(geomUrl) ).json())\n   console.log({geojson})\n   let path = d3.geoPath().projection(d3.geoMercator().fitExtent([[0, 0], [width, height]], geojson) )\n   let svg = d3.create(\"svg\")\n   svg.selectAll(\"path\")\n      .data(geojson.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .attr(\"stroke\", \"#000\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke-width\", 0.5);\n   svg = svg.node()\n   console.log({'svg':svg.children});\n   svg = svg.outerHTML\n \n \n let scene = new THREE.Scene();\n scene.background = new THREE.Color(0xface8d);\n let camera = new THREE.PerspectiveCamera(60, innerWidth / innerHeight, 1, 5000);\n camera.position.set(0, 0, 1000);\n let renderer = new THREE.WebGLRenderer({ antialias: true });\n renderer.setSize(innerWidth, innerHeight);\n document.body.appendChild(renderer.domElement);\n window.addEventListener(\"resize\", (event) => {\n   camera.aspect = innerWidth / innerHeight;\n   camera.updateProjectionMatrix();\n   renderer.setSize(innerWidth, innerHeight);\n });\n \n let controls = new OrbitControls(camera, renderer.domElement);\n controls.enableDamping = true;\n \n let light = new THREE.DirectionalLight(0xffffff, 1);\n light.position.set(-1, 1, 1);\n scene.add(light, new THREE.AmbientLight(0xffffff, 0.5));\n let gu = { time: { value: 0 } };\n \n let loader = new SVGLoader();\n let data = loader.parse(svg);\n console.log({data});\n data.paths.forEach(path => {\n   let pts = path.subPaths[0].getPoints(50);\n   pts.pop();\n   pts.forEach(p => p.y *= -1);\n   pts.reverse();\n   let strokeWidth = path.userData.style.strokeWidth;\n \n   let pPrev = new THREE.Vector2(), pNext = new THREE.Vector2(), c = new THREE.Vector2();\n   let offsetPtsOuter = [];\n   let offsetPtsInner = [];\n   pts.forEach((p, idx) => {\n     let idxPrev = idx - 1;\n     if (idxPrev < 0 ) idxPrev = pts.length - 1;\n     let idxNext = idx + 1;\n     if (idxNext== pts.length) idxNext = 0;\n     pPrev.subVectors(pts[idxPrev], p).normalize();\n     pNext.subVectors(pts[idxNext], p).normalize();\n     let anglePrev = pPrev.angle();\n     let angleNext = pNext.angle();\n     let angleMid = (angleNext - anglePrev) * 0.5;\n     pPrev.rotateAround(c, angleMid);\n     let offsetDistOuter = 1 / Math.cos(angleMid - Math.PI * 0.5);\n     let offsetDistInner = offsetDistOuter - strokeWidth;  // here you could adjust the thickness of the wall\n     offsetPtsOuter.push(pPrev.clone().negate().setLength(offsetDistOuter).add(p));\n     offsetPtsInner.push(pPrev.clone().negate().setLength(offsetDistInner).add(p));\n   });\n \n   let shapeOuter = new THREE.Shape(offsetPtsOuter);\n   let shapeInner = new THREE.Shape(offsetPtsInner);\n \n   let outerGeom = new THREE.ExtrudeGeometry(shapeOuter, {depth: 10, bevelEnabled: false,});\n   let innerGeom = new THREE.ExtrudeGeometry(shapeInner, {depth: 10, bevelEnabled: false,});\n   \n   let material = new THREE.MeshLambertMaterial({color: \"olive\"});\n   const outerGeomMesh = new THREE.Mesh(outerGeom, material); \n   const innerGeomMesh = new THREE.Mesh(outerGeom, material); \n \n   let outerBSP = CSG.fromMesh( outerGeomMesh )\n   let innerBSP = CSG.fromMesh( innerGeomMesh )\n   \n   let bspResult = outerBSP.subtract(innerBSP);\n   \n   let oShape = CSG.toMesh( bspResult, outerBSP.matrix, material ); \n   // let oShape = new THREE.Mesh(resultGeom, material); \n \n   scene.add(oShape);\n });\n \n \n let clock = new THREE.Clock();\n \n renderer.setAnimationLoop((_) => {\n   let t = clock.getElapsedTime();\n   gu.time.value = t;\n   controls.update();\n   renderer.render(scene, camera);\n });\n </script> <p>&lt;</p>\n <pre class='prettyprint'># hello this is a comment \n let 1 = 2;\n console.log(1)</pre>\n  <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}