{"meta":{"filename":"three","title":"Three","summary":"In this chapter, we will learn about three and explore some of its many features.","toc":"true","prettify":"true"},"content":"<div id='renderWindow'></div> <p>&gt;</p>\n <script>\n window.position = (mesh) => {\n   mesh.rotateZ(Math.PI);\n   mesh.translateX(-center.x + 0);\n   mesh.translateY(-center.y + 0);\n }\n \n window.getBoundingBoxCenter = (mesh) => {\n   // Calculate the bounding box of the mesh\n   let boundingBox = new THREE.Box3().setFromObject(mesh);\n   // Return the center of the bounding box\n   return boundingBox.getCenter(new THREE.Vector3());\n }\n </script> <script>\n window.create3dFromSvgV8 = async (svg, type, color=false) => {\n   let CSG = (await import('../js/CSG.js')).CSG\n   console.log({CSG})\n   const loader = new window.SVGLoader();\n   let data = loader.parse(svg.outerHTML);\n \n   const group = [];\n \n   data.paths.forEach((path, i) => {\n     path.subPaths.forEach(subPath => {\n       let pts = subPath.getPoints(50);\n       pts.pop();\n       pts.forEach(p => p.y *= -1);\n       pts.reverse();\n       let strokeWidth = path.userData.style.strokeWidth;\n     \n       let pPrev = new THREE.Vector2(), pNext = new THREE.Vector2(), c = new THREE.Vector2();\n       let offsetPtsOuter = [];\n       let offsetPtsInner = [];\n       pts.forEach((p, idx) => {\n         let idxPrev = idx - 1;\n         if (idxPrev < 0 ) idxPrev = pts.length - 1;\n         let idxNext = idx + 1;\n         if (idxNext == pts.length) idxNext = 0;\n         pPrev.subVectors(pts[idxPrev], p).normalize();\n         pNext.subVectors(pts[idxNext], p).normalize();\n         let anglePrev = pPrev.angle();\n         let angleNext = pNext.angle();\n         let angleMid = (angleNext - anglePrev) * 0.5;\n         pPrev.rotateAround(c, angleMid);\n         let offsetDistOuter = 1 / Math.cos(angleMid - Math.PI * 0.5);\n         let offsetDistInner = offsetDistOuter - strokeWidth;  // here you could adjust the thickness of the wall\n         offsetPtsOuter.push(pPrev.clone().negate().setLength(offsetDistOuter).add(p));\n         offsetPtsInner.push(pPrev.clone().negate().setLength(offsetDistInner).add(p));\n       });\n \n       let shapeOuter = new THREE.Shape(offsetPtsOuter);\n       let shapeInner = new THREE.Shape(offsetPtsInner);\n \n       let outerGeom = new THREE.ExtrudeGeometry(shapeOuter, {depth: 10, bevelEnabled: false,});\n       let innerGeom = new THREE.ExtrudeGeometry(shapeInner, {depth: 10, bevelEnabled: false,});\n       \n       let material = new THREE.MeshLambertMaterial({color: \"olive\"});\n       const outerGeomMesh = new THREE.Mesh(outerGeom, material); \n       const innerGeomMesh = new THREE.Mesh(innerGeom, material); \n \n       console.log({CSG})\n       let outerBSP = CSG.fromMesh( outerGeomMesh )\n       let innerBSP = CSG.fromMesh( innerGeomMesh )\n       \n       let bspResult = outerBSP.subtract(innerBSP);\n       \n       let oShape = CSG.toMesh( bspResult, outerBSP.matrix, material ); \n       group.push(oShape)\n     }); // End Subpath\n \n   }); // End Path\n \n   return group;\n }\n </script> <script>\n window.createMeshHullRes = async (res1, res2, res3=false, res4=false) => {\n     let CSG = (await import('../js/CSG.js')).CSG\n     const loader = new window.SVGLoader();           // Load the svg using three to use it's tooling\n     console.log({loader})\n     let paths = loader.parse(svg.outerHTML).paths; // Parse the SVG file and retrieve all the paths\n     let style = paths[0].userData.style;          // Store the style of the first path in a variable\n     const shapes = []\n     let points = [];\n     paths.forEach(path => {\n     let pts = path.subPaths[0].getPoints(50);\n     pts.pop();\n     pts.forEach(p => p.y *= -1);\n     pts.reverse();\n     let strokeWidth = path.userData.style.strokeWidth;\n \n     let pPrev = new THREE.Vector2(), pNext = new THREE.Vector2(), c = new THREE.Vector2();\n     let offsetPtsOuter = [];\n     let offsetPtsInner = [];\n     pts.forEach((p, idx) => {\n         let idxPrev = idx - 1;\n         if (idxPrev < 0 ) idxPrev = pts.length - 1;\n         let idxNext = idx + 1;\n         if (idxNext== pts.length) idxNext = 0;\n         pPrev.subVectors(pts[idxPrev], p).normalize();\n         pNext.subVectors(pts[idxNext], p).normalize();\n         let anglePrev = pPrev.angle();\n         let angleNext = pNext.angle();\n         let angleMid = (angleNext - anglePrev) * 0.5;\n         pPrev.rotateAround(c, angleMid);\n         let offsetDistOuter = 1 / Math.cos(angleMid - Math.PI * 0.5);\n         let offsetDistInner = offsetDistOuter - strokeWidth;  // here you could adjust the thickness of the wall\n         offsetPtsOuter.push(pPrev.clone().negate().setLength(offsetDistOuter).add(p));\n         offsetPtsInner.push(pPrev.clone().negate().setLength(offsetDistInner).add(p));\n     });\n \n     let shapeOuter = new THREE.Shape(offsetPtsOuter);\n     let shapeInner = new THREE.Shape(offsetPtsInner);\n \n     let outerGeom = new THREE.ExtrudeGeometry(shapeOuter, {depth: 10, bevelEnabled: false,});\n     let innerGeom = new THREE.ExtrudeGeometry(shapeInner, {depth: 10, bevelEnabled: false,});\n \n     let material = new THREE.MeshLambertMaterial({color: \"olive\"});\n     const outerGeomMesh = new THREE.Mesh(outerGeom, material); \n     const innerGeomMesh = new THREE.Mesh(outerGeom, material); \n \n     let outerBSP = CSG.fromMesh( outerGeomMesh )\n     let innerBSP = CSG.fromMesh( innerGeomMesh )\n \n     let bspResult = outerBSP.subtract(innerBSP);\n \n     let oShape = CSG.toMesh( bspResult, outerBSP.matrix, material ); \n     // let oShape = new THREE.Mesh(resultGeom, material); \n \n     });\n \n   return mesh\n }\n </script> <p>Prusa has 100 steps per mm. The resolution of a print will depend on the size of the boundary and boundary</p>\n <script>\n let width = height = 600;\n let center = { 'x': width / 2, 'y': height / 2 }\n window.depth = 40;\n window.linewidth = 2;\n window.simplifyBy = 0.025;\n </script> <script> \n (async () => {\n   // Import Tools\n   let { create } = (await import('https://cdn.jsdelivr.net/npm/d3@7.8.4/dist/d3.min.js'));  \n   console.log(d3);\n   let { convex } = await import('https://unpkg.com/@turf/turf/turf.min.js');\n   let version = '0.123';\n   window.THREE = (await import(`https://unpkg.com/three@${version}/build/three.module.js`));\n   window.SVGLoader = (await import(`https://unpkg.com/three@${version}/examples/jsm/loaders/SVGLoader.js`)).SVGLoader;   \n   window.OrbitControls = (await import(`https://unpkg.com/three@${version}/examples/jsm/controls/OrbitControls.js`)).OrbitControls;\n   window.BufferGeometryUtils = (await import(`https://unpkg.com/three@${version}/examples/jsm/utils/BufferGeometryUtils.js`)).BufferGeometryUtils; \n   window.topojsonClient = (await import(`https://cdn.skypack.dev/topojson-client`));\n   window.topojsonSimplify = (await import(`https://cdn.skypack.dev/topojson-simplify`));\n   window.topojsonServer = (await import(`https://cdn.skypack.dev/topojson-server`));  \n   \n   // Import GeoJson\n   let geomUrl=\"https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Tpop/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\";\n   let geojson = await (await fetch(geomUrl) ).json()\n \n   let path = d3.geoPath().projection(d3.geoMercator().fitExtent([[0, 0], [width, height]], geojson) )\n \n   //// ~~~~~~ V\n \n   // Get Hull as baselayer\n   var hull = turf.convex( geojson );   \n   hull.properties['name'] = \"Baltimore City\"\n   let svg = d3.create(\"svg\").attr(\"viewBox\", [0, 0, width, height])\n   svg.append(\"path\").datum(hull).attr(\"d\", path).attr(\"stroke\", \"#000\").attr(\"stroke-width\", 1).attr(\"fill\", \"#ccc\");\n   hull3D = await create3dFromSvgV8(svg.node(), 'geoms', 'green');\n \n   console.log({hull3D})\n   //// ~~~~~~ ^ \n \n   window.meshHullRes = ''\n   \n   const scene = new THREE.Scene();\n   scene.background = new THREE.Color(0x333333);\n   scene.add(new THREE.AxesHelper(100)); \n   // scene.add(geomBounds3D); \n   scene.add(hull3D);  \n   // scene.add(meshHullRes);\n   let viewH = viewW = 750 \n   // Set up the camera and renderer\n   const fov = 65;\n   const aspect = viewW/ viewH;\n   const near = 100;\n   const far = 3000;\n   const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n   camera.position.set(50, 100, 1000); \n   camera.updateMatrixWorld(); \n \n \n   const renderer = new THREE.WebGLRenderer({ antialias: true });\n   const controls = new OrbitControls(camera, renderer.domElement);\n   // invalidation.then(() => (controls.dispose(), renderer.dispose()));\n \n   renderer.setSize( viewW, viewH );\n   //renderer.setPixelRatio(devicePixelRatio);\n   controls.addEventListener(\"change\", () => renderer.render(scene, camera));\n   renderer.render(scene, camera);\n   window.renderWindow.appendChild(renderer.domElement);\n })()\n </script> <script>\n window.exportScene = () => {};\n window.exportScene = async (name) => {\n     window.STLExporter = (await import(\"https://cdn.skypack.dev/three@0.136.0/examples/jsm/exporters/STLExporter.js\")).STLExporter;\n     let exporter = new STLExporter(); \n     let meshThis = window[name]\n     // console.log('exportScene', meshThis)\n     let buffer = exporter.parse( meshThis )\n     let filename = name+'.stl'\n     let blobby = new Blob( [ buffer ], { type: \"text/stl\" } )\n     \n     const link = document.createElement(\"a\");\n     link.href = window.URL.createObjectURL(blobby);\n     link.setAttribute(\"download\", filename);\n     document.body.appendChild(link);\n     link.click();\n     link.remove();\n } \n </script>\n <span>\n     <a onClick=\"window.exportScene('hull3D')\" ><button>Download hull3D</button></a>\n     <a onClick=\"window.exportScene('geomBounds3D')\" ><button>Download geomBounds3D</button></a> \n     <a onClick=\"window.exportScene('meshHullRes')\" ><button>Download meshHullRes</button></a>\n </span> <p>&lt;</p>\n <pre class='prettyprint'># hello this is a comment \n let 1 = 2;\n console.log(1)</pre>\n  <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}