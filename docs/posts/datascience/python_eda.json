{"meta":{"filename":"python_eda"},"content":"<h1>Welcome</h1>\n <p>This notebook has functions to help handle common tasks</p>\n <p><strong>Functions</strong></p>\n<ul>\n<li>FillNa DropNa Replace</li>\n<li>CustomLambda = Lambda X:(x+x%2)</li>\n<li>df.groupby().transform(customLambda):sumAgg</li>\n<li>Pd.melt()-&amp;gt;columnRows</li>\n<li>DummyEncode</li>\n<li>Df.Stack.Unstack</li>\n<li>Infer data types isfinite-inf/nan, isnan, first char is symbol, default value.</li>\n</ul>\n <h4>Common Python Data Manipulations</h4>\n <p><a href=\"https://datascience.stackexchange.com/questions/37878/difference-between-isna-and-isnull-in-pandas\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://datascience.stackexchange.com/questions/37878/difference-between-isna-and-isnull-in-pandas</a></p>\n<p> <strong>Common Python Data Manipulations</strong></p>\n<ul>\n<li><p>.isna(), .fillna(), .isnull()</p>\n</li>\n<li><p>.dropna(how=&#39;any&#39;),</p>\n</li>\n<li><p>.fillna(method=&#39;ffill&#39;, inplace=true), method=&#39;ffill&#39;, .fillna(value=0, inplace=true)</p>\n</li>\n<li><p>.duplicated(), .unique(), .drop_duplicates()</p>\n</li>\n<li><p>.replace()</p>\n</li>\n<li><p>groupby()</p>\n</li>\n<li><p>contains(), within() for geospatial data.\n <strong>Common Python Cleaning operations:</strong></p>\n</li>\n</ul>\n<ol>\n<li>Check the data types of all column in the data-frame</li>\n<li>Create a new data-frame excluding all the &#39;object&#39; types column</li>\n<li>Select elements from each column that lie within 3 units of Z score</li>\n</ol>\n<ul>\n<li>.cut() will bin your data</li>\n<li>.dtypes, -.select_dtypes(exclude=[&#39;object&#39;])</li>\n<li>stats.zscore(df)</li>\n</ul>\n <h4>FILTERING</h4>\n <ul>\n<li>DataFrame.isna()\tDetect missing values.</li>\n<li>DataFrame.any(axis=0, bool_only=None, skipna=True, level=None, **kwargs)</li>\n<li>DataFrame.all(axis=0, bool_only=None, skipna=True, level=None, **kwargs)</li>\n<li>DataFrame.filter([items, like, regex, axis])\tSubset rows or columns of dataframe according to labels in the specified index.</li>\n<li>DataFrame.dropna([axis, how, thresh, …])\tRemove missing values.</li>\n<li>DataFrame.fillna([value, method, axis, …])\tFill NA/NaN values using the specified method.</li>\n<li>DataFrame.replace([to_replace, value, …])\tReplace values given in to_replace with value.</li>\n<li>DataFrame.interpolate([method, axis, limit, …])\tInterpolate values according to different methods.</li>\n<li>DataFrame.nlargest(n, columns[, keep])\tReturn the first n rows ordered by columns in descending order.</li>\n<li>DataFrame.nsmallest(n, columns[, keep])\tReturn the first n rows ordered by columns in ascending order.</li>\n</ul>\n <h4>GROUPING/ Aggregating/ Manipulating</h4>\n <ul>\n<li>DataFrame.pivot([index, columns, values])\tReturn reshaped DataFrame organized by given index / column values.\n *df.agg(&quot;mean&quot;, axis=&quot;columns&quot;) # axis : {0 or ‘index’, 1 or ‘columns’}, default 0</li>\n<li>DataFrame.compound(axis=None, skipna=None, level=None)</li>\n<li>DataFrame.count(axis=0, level=None, numeric_only=False)[source]</li>\n<li>df.groupby([&#39;1_tpop&#39;]).mean()</li>\n<li>DataFrame.insert(loc, column, value[, …])\tInsert column into DataFrame at specified location.</li>\n</ul>\n <h4>Common Python Cleaning operations:</h4>\n <ul>\n<li><ol>\n<li>Check the data types of all column in the data-frame</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Create a new data-frame excluding all the ‘object’ types column</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>Select elements from each column that lie within 3 units of Z score</li>\n</ol>\n</li>\n<li>.cut() will bin your data</li>\n<li>.dtypes, -.select_dtypes(exclude=[‘object’])</li>\n</ul>\n  <p>biggest data cleaning task, missing values</p>\n<p> Pandas will recognize both empty cells and “NA” types as missing values. Anything else should to be specified on import</p>\n   <p>In the code we’re looping through each entry in the “Owner Occupied” column. To try and change the entry to an integer, we’re using int(row).\n If the value can be changed to an integer, we change the entry to a missing value using Numpy’s np.nan.\n On the other hand, if it can’t be changed to an integer, we pass and keep going.  The .loc method is the preferred Pandas method for modifying entries in place. <a href=\"https://pandas.pydata.org/pandas-docs/version/0.21/generated/pandas.DataFrame.loc.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://pandas.pydata.org/pandas-docs/version/0.21/generated/pandas.DataFrame.loc.html</a></p>\n                <h1>Read In Data</h1>\n  <h1>dashboards notes reduced</h1>\n<blockquote>\n<p>The functions that transform notebooks in a library</p>\n</blockquote>\n <p>Basic Text</p>\n <p>TODO :</p>\n<ul>\n<li>Provide a user of Import Options ,</li>\n<li>Ask For file, Default = False</li>\n<li>Ask For Delimiters, Default = ,</li>\n<li>Ask For String Delimiters, Default = &quot;</li>\n<li>Ask If First Column Represents Header, Default = False</li>\n<li>Ask If the Column Names are Correct</li>\n</ul>\n<p> FillNA = -1, avg</p>\n<p> FillNA THEN Coerce</p>\n <h3>Todo:</h3>\n<ul>\n<li>Interactive Inputs allow user to perform Simple Querys</li>\n<li>Fixed Dictionary [ distinct, not, like, avg, min, max, mean, median, mode ]</li>\n<li>Query Replaces the Imported Dataset</li>\n<li>Repeat until user specifies otherwise</li>\n<li>Template: Select From Where GroupBy Having</li>\n</ul>\n <h2>MISC</h2>\n <h3>Import</h3>\n  <h2>Parse The DataTypes</h2>\n      <h1>NOTES</h1>\n  <h3>Plot Histograms</h3>\n  <h2>Basic ops</h2>\n     <h2>Categorical Analysis:</h2>\n <p>Count, Unique, Top, Frequency</p>\n     <h2>Numeric Analysis:</h2>\n  <h1>Geo</h1>\n <p><strong>Future Self Service Tool</strong></p>\n<p> Data analytics</p>\n<ol>\n<li>Self Service</li>\n<li>Reccurent Reports </li>\n<li>Embedded Analytics.</li>\n</ol>\n<p> <strong>GisHandler</strong>() </p>\n<ul>\n<li>Check Columns</li>\n<li>Check If Operations will work as expected</li>\n<li>perform operations</li>\n<li>tidy up</li>\n<li>save</li>\n<li>return</li>\n</ul>\n<p> <strong>Main</strong>( Check For Missing Values, Perform Operation)</p>\n<p> <strong>readFile</strong>() - csv/postgis -df -reverseGeocode? ColumnToCords? -Geodf</p>\n<p> <strong>Geodataframe</strong> -toCrs, - saveGeoDataFrame</p>\n<p> <strong>MergeBounds</strong>() </p>\n<p> <strong>FilterBounds</strong>() </p>\n<p> <strong>FilterPoints</strong>() Bounds Points </p>\n<p> <strong>PoinsInPoly</strong>()</p>\n <p><strong>Applied Spatial Statistics</strong></p>\n<ul>\n<li>Prior Posterior Distribution</li>\n<li>Hierarchal Models</li>\n<li>Markov Chain Monte Carlo</li>\n<li>Kernal Methods</li>\n<li>Dynamic State Space Modeling</li>\n<li>Multiple linear Regressions</li>\n<li>Spatial Models (Car Sar) Kriging</li>\n<li>Time series models: ARM ARMA </li>\n<li>Dynamic linear models</li>\n<li>multi level models - causal inference - meta analysis</li>\n<li>multi agent decision making</li>\n<li>variable transformations</li>\n<li>eigenvalues</li>\n</ul>\n <p><strong>Applied Spatial Statistics</strong> -&amp;gt; Prior/Posteriors, MCMC, Kernel methods, dynamic state space modeling, multiple linear regression, multilevel models(causal inference, meta analysis), multi agent decision making, variable transformations, eigenvalues,\n <strong>Spatial models</strong> (Car,Sar) Kriging\n <strong>Time Series Models</strong> : ARM ARMA Dynamic linear models</p>\n <p>Exploratory spatial analysis, spatial autocorrelation, spatial regression, interpolation, grid based stats, point based stats, spatial network analysis, spatial clustering.</p>\n <p> Big-Data, Structure(Semi/Un), Time-Stamped, Spatial, Spatio-Temporal, Ordered, Stream, Dimensionality,\n  Primary Keys, Unique Values, Index, Spatial, Auto Increment, Default Values, Null Values</p>\n <p><strong>Geographic Inquery</strong>:</p>\n<ul>\n<li><p>Describe real world phenomena</p>\n</li>\n<li><p>Study of Spatial Arrangement of features</p>\n</li>\n<li><p>Patterns arise as a result of process operating within space</p>\n</li>\n<li><p>Measure compare generate</p>\n</li>\n<li><p>Size distribution pattern contiguity shape community scale orientation relation</p>\n</li>\n<li><p>How comparE? How describe analyze? How predict?</p>\n</li>\n<li><p>Entry, conversion, storage, query, manipulation, analysis, presentation,</p>\n</li>\n<li><p>Req, process, clean ,explore, model …</p>\n</li>\n<li><p>Hot spot analysis _&amp;gt; cluster points</p>\n</li>\n<li><p>Line of sight/visibility analysis -&amp;gt; network, overlay, proximity, risk</p>\n</li>\n<li><p>Heat maps</p>\n</li>\n<li><p>GeoCoding</p>\n</li>\n<li><p>Distance Decay</p>\n</li>\n<li><p>Clip Analysis</p>\n</li>\n<li><p>post analaysis</p>\n</li>\n<li><p>land use analysis</p>\n</li>\n<li><p>voronoi crop by bounds of other ds,</p>\n</li>\n<li><p>Buffering -radius around a point</p>\n</li>\n<li><p>Map coverage, \nspatial resource allocation, </p>\n</li>\n<li><p>impact assesment, </p>\n</li>\n<li><p>pollutant reduction, </p>\n</li>\n<li><p>decision support, </p>\n</li>\n<li><p>facility management (water plant mgmt), </p>\n</li>\n<li><p>operations mgmt, </p>\n</li>\n<li><p>site selection - where to do xyz, </p>\n</li>\n<li><p>business/marketing</p>\n</li>\n</ul>\n <p><a href=\"http://pysal.org/notebooks/explore/esda/Spatial_Autocorrelation_for_Areal_Unit_Data.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://pysal.org/notebooks/explore/esda/Spatial_Autocorrelation_for_Areal_Unit_Data.html</a>\t\n Python Spatial Analysis library.\t\n <a href=\"https://pysal.org/notebooks/intro\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://pysal.org/notebooks/intro</a>\tPython Spatial Analysis library.\n Shape Analysis\t\n hull: calculate the convex hull of the point pattern\t\n mbr: calculate the minimum bounding box (rectangle)\t\n The python file centrography.py contains several functions with which we can conduct centrography analysis.\t</p>\n<p> Random point patterns are the outcome of CSR. <a href=\"https://en.wikipedia.org/wiki/Complete_spatial_randomness\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://en.wikipedia.org/wiki/Complete_spatial_randomness</a> CSR has two major characteristics:\t\n Uniform: each location has equal probability of getting a point (where an event happens)\t\n Independent: location of event points are independent\t\n It usually serves as the null hypothesis in testing whether a point pattern is the outcome of a random process.\t\n There are two possible objectives in a discriminant analysis:\t</p>\n<ul>\n<li>finding a predictive equation for classifying new individuals\t</li>\n<li>interpreting the predictive equation to better understand the relationships that may exist among the variables.\t\n It was demonstrated by Clark and Evans(1954) that mean nearest neighbor distance statistics distribution is a normal distribution under null hypothesis (underlying spatial process is CSR). We can utilize the test statistics to determine whether the point pattern is the outcome of CSR.</li>\n</ul>\n<p>\t</p>\n <h1>Misc</h1>\n <p><a href=\"https://www.gnu.org/philosophy/open-source-misses-the-point.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://www.gnu.org/philosophy/open-source-misses-the-point.html</a></p>\n<p> It seems to me that the chief difference between the MIT license and GPL is that the MIT doesn&#39;t require modifications be open sourced whereas the GPL does. </p>\n<p> You don&#39;t have to open-source your changes if you&#39;re using GPL.\tYou could modify it and use it for your own purpose as long as you&#39;re not distributing it\t</p>\n<p> BUT... </p>\n<p> if you DO distribute it, then your entire project that is using the GPL code also becomes GPL automatically Which means, it must be open-sourced, and the recipient gets all the same rights as you - meaning, they can turn around and distribute it, modify it, sell it, etc. </p>\n<p> And that would include your proprietary code which would then no longer be proprietary - it becomes open source.</p>\n<p> with MIT is that even if you actually distribute your proprietary code that is using the MIT licensed code you do not have to make the code open source you can distribute it as a closed app where the code is encrypted or is a binary.</p>\n<pre class='prettyprint'> Including the MIT-licensed code can be encrypted, as long as it carries the MIT license notice. \n \n</pre>\n  <ul>\n<li>File-&amp;gt;UncleanData-&amp;gt;ToCsvFormat(filename,data)</li>\n<li>ProcessCsv -&amp;gt; Unclean Data</li>\n<li>IndexDB</li>\n<li>URL-&amp;gt;browser or server? callServer(url)</li>\n<li>json/geojson/xl/csv -&amp;gt; tocsvformat -&amp;gt; iscsv-&amp;gt;stringreplace, isjson-&amp;gt;papaunparse, isxl-&amp;gt;readxlsx[0] -&amp;gt;tocsv, isgeoj-&amp;gt;json-&amp;gt;papaunparce</li>\n<li>JSN.Parse at runtime is faster than inlining the data when 10KB&amp;gt;</li>\n<li>Code Caching occurs when inlineJs &amp;gt; 1KB</li>\n<li>V8 reduced parse/compilation by 40% using workerThreads</li>\n<li>/v8RawJS parse speed is 2x since chrome60</li>\n</ul>\n <p>Clear indexdb -&amp;gt; readFile. Insert into IndexDB V.1.0</p>\n <ul>\n<li>jpl- sweet ontology</li>\n<li>Geoincubator group</li>\n<li>Rdf, qsparql, gml, kml</li>\n</ul>\n\n  <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}