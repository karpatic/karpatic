{"meta":{"title":"Webscraping","summary":"Below you will find examples of webscraping using 3 libraries. ","prettify":"true","filename":"05_webscraping"},"content":" <div class=\"unset\">\n   <style>\n   .unset{padding:0px;}\n   .unset p a img {\n     width: auto;\n   }\n   .unset p{ margin:10px;}\n   </style> <p><a href=\"https://mybinder.org/v2/gh/bnia/dataguide/main?filepath=%2Fnotebooks%2F05_Webscraping.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://colab.research.google.com/github/bnia/dataguide/blob/main/notebooks/05_Webscraping.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/bnia/dataguide/tree/main/notebooks/05_Webscraping.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/ellerbrock/open-source-badges/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a></p>\n<p> <a href=\"https://github.com/bnia/dataguide/blob/main/LICENSE\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://bnia.github.io\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a> \n <a href=\"\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/bnia/dataguide.svg?style=flat\" alt=\"GitHub last commit\"></a>  </p>\n<p> <a href=\"https://github.com/bnia/dataguide\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/bnia/dataguide.svg?style=social&label=Star\" alt=\"GitHub stars\"></a> \n <a href=\"https://github.com/bnia/dataguide\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/bnia/dataguide.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a> \n <a href=\"https://github.com/bnia/dataguide\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/bnia/dataguide.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a> \n <a href=\"https://github.com/bnia/dataguide\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/bnia.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a> </p>\n<p> <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20%E2%9C%A8%20colab%20by%20@bniajfi%20https://github.com/bnia/dataguide%20%F0%9F%A4%97\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/url/https/github.com/bnia/dataguide.svg?style=social\" alt=\"Tweet\"></a> \n <a href=\"https://twitter.com/bniajfi\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/follow/bniajfi.svg?style=social\" alt=\"Twitter Follow\"></a></p>\n </div> <p>⚠️ For best experience open in colab!.⚠️</p>\n <p>Selenium vs Puppetteer vs jsdom vs casper.ipynb</p>\n <p><a href=\"https://www.casperjs.org/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">casper</a> is missing. Very easy to use.</p>\n <h2 id=\"jsdom\"><a href=\"https://github.com/jsdom/jsdom\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">JSdom</a></h2>\n <pre class='prettyprint'>!npm install jsdom</pre> <pre class='prettyprint'>%%writefile testfile.js\n const jsdom = require(\"jsdom\");\n const { JSDOM } = jsdom;\n JSDOM.fromURL('https://bniajfi.org', {resources: \"usable\"}).then(dom => {\n   txt = dom.serialize()\n   txt=txt.split('document.getElementById(\"container\")')[1]\n   console.log( txt )\n });\n</pre> <pre class='prettyprint'>%%writefile bnia_trends.js\n const jsdom = require(\"jsdom\");\n const { JSDOM } = jsdom;\n \n (async () => { \n     \n   links.map( link =>{\n       var url = 'https://bniajfi.org'\n       console.log(url)\n       JSDOM.fromURL(url, {resources: \"usable\"}).then(dom => {\n       txt = dom.serialize()\n       txt=txt.split('document.getElementById(\"container\")')[0] \n       console.log( txt )\n     });\n   } )\n } )</pre> <h2 id=\"puppetteer\">Puppetteer</h2>\n <p>Headless Recorder Extension</p>\n   <p>Now lets write the js script and stuff it into an index.js file</p>\n <pre class='prettyprint'># !npm install papaparse\n ! npm i -s csv-parser</pre> <pre class='prettyprint'>!npm i -s csv-writer</pre> <pre class='prettyprint'>! npm i async-csv</pre> <pre class='prettyprint'>!echo \"\" >data.csv</pre> <pre class='prettyprint'>! npm install html-table-to-json</pre> <pre class='prettyprint'>! pip install requests_html</pre> <pre class='prettyprint'>%%writefile bniatest.js\n 'use strict';\n \n // Load our tool\n const HtmlTableToJson = require('html-table-to-json');\n const csv = require('csv-parser');\n const fs = require('fs');\n const puppeteer = require('puppeteer');\n \n (async () => {\n   // Setup the browser\n   var browser = await puppeteer.launch({\n     executablePath:\"/usr/lib/chromium-browser/chromium-browser\", \n     args:['--no-sandbox', `--window-size=1200,1000`],\n     headless: false, // The browser is visible\n     ignoreHTTPSErrors: true,\n   });\n \n   const page = await browser.newPage()\n   async function getTopWallets(page, num){\n     // Visit our page // Configure the page view.\n     await page.goto(`https://bniajfi.org`)\n     await page.setViewport({ width: 800, height: 70000 })\n     await page.waitForTimeout(500);\n     var tblz = await page.evaluate( () => {\n         function getTblData(tblid){\n           if(tblid=='#tblOne'){\n             Array.prototype.forEach.call( document.querySelectorAll(tblid+ \" > thead\"), function( node ) {\n                 var el = document.createElement(\"thead\");  el.innerHTML = header\n                 node.parentNode.insertBefore(el, node.nextSibling); node.parentNode.removeChild( node );\n                 return Array.from( document.querySelectorAll(tblid), element => element.outerHTML )\n             });\n           }\n           Array.prototype.forEach.call( document.querySelectorAll(tblid +\" > tbody > tr > td > span\"), function( node ) { node.parentNode.removeChild( node ); });\n           Array.prototype.forEach.call( document.querySelectorAll(tblid +\" > tbody > tr > td > small\"), function( node ) { node.parentNode.removeChild( node ); });\n           Array.prototype.forEach.call( document.querySelectorAll(tblid +\" > tbody > tr > td:nth-child(3)\"), function( node ) { node.innerHTML = node.innerHTML; });\n           var output =  Array.from( document.querySelectorAll(tblid), element => element.outerHTML )\n           var position =  121\n           if(tblid=='#tblOne2'){ output = [ [output[0].slice(0, position), header, output[0].slice(position)].join('') ] }\n           return output\n         }\n         return [...getTblData('#tblOne'), ...getTblData('#tblOne2') ]\n     } )\n     return [...HtmlTableToJson.parse( tblz[0] ).results, ...HtmlTableToJson.parse( tblz[1] ).results ].flat()\n   }\n   var data = []\n   for (var i = 1; i < 2; i++) {\n     data = [...data, ...await getTopWallets(page, i==1?'':('-'+i) ) ]\n   } \n \n   csvWriter.writeRecords(data).then(()=> console.log('The CSV file was written'));\n \n   await browser.close()\n })()</pre> <pre class='prettyprint'>!node bniatest.js</pre> <h2 id=\"selenium\"><a href=\"https://stackoverflow.com/questions/55085072/how-to-use-selenium-on-colaboratory-google\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Selenium</a></h2>\n <pre class='prettyprint'>!sudo apt install unzip\n !wget https://chromedriver.storage.googleapis.com/2.37/chromedriver_linux64.zip\n #!unzip chromedriver_linux64.zip -d /usr/bin/\n !pip install selenium\n !pip install openpyxl\n !apt-get update\n !apt-get install -y unzip xvfb libxi6 libgconf-2-4\n !apt-get install default-jdk </pre> <pre class='prettyprint'>! apt install chromium-chromedriver</pre> <pre class='prettyprint'>from google.colab import drive</pre> <pre class='prettyprint'>import os, subprocess\n import sys\n import selenium\n import bs4\n from selenium import webdriver\n from selenium.webdriver.chrome.options import Options\n from selenium.webdriver.support.ui import WebDriverWait\n from selenium.webdriver.support import expected_conditions as EC\n from selenium.webdriver.common.by import By\n from selenium.common.exceptions import TimeoutException\n from bs4 import BeautifulSoup\n import openpyxl\n import time, re, csv, urllib.parse\n import pandas as pd</pre> <pre class='prettyprint'>options = Options()\n options.add_argument('--headless')\n options.add_argument('--no-sandbox')\n options.add_argument('--disable-dev-shm-usage')\n options.add_argument('--disable-gpu')\n \n pd.set_option('display.max_columns', 20)\n pd.set_option('display.max_colwidth', 200)\n mobile_emulation = { \"deviceName\": \"iPhone X\" }</pre> <pre class='prettyprint'>sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')</pre> <pre class='prettyprint'>driver = webdriver.Chrome('chromedriver', chrome_options=options)</pre> <pre class='prettyprint'>driver.get('https://bniajfi.org')\n time.sleep(.5)\n driver.save_screenshot('screenie.png')\n \n with open(\"./page_source.html\", \"w\") as f:\n     f.write(driver.page_source)</pre> <pre class='prettyprint'>driver.find_elements_by_css_selector('.container')</pre> <pre class='prettyprint'>driver.find_element_by_tag_name('html').get_attribute('innerHTML')</pre> <pre class='prettyprint'>time.sleep(.5)\n login = driver.find_element_by_xpath('//*[@id=\"container\"]/div/div/')\n login.click()\n \n #username\n username = driver.find_element_by_xpath('//*[@id=\"container\"]/div/div/')\n username.click()\n username.send_keys('user')\n \n #password\n password = driver.find_element_by_xpath('//*[@id=\"container\"]/div/div/')\n password.click()\n password.send_keys('pass')\n \n #sign in \n signin = driver.find_element_by_xpath('//*[@id=\"container\"]/div/div/')\n signin.click()</pre> <pre class='prettyprint'>import re\n import os\n import time\n import random\n import requests\n import numpy as np\n import pandas as pd\n from os import system\n from math import floor\n from copy import deepcopy\n from bs4 import BeautifulSoup\n from selenium import webdriver\n from selenium.webdriver.common.by import By\n from selenium.webdriver.common.keys import Keys\n from selenium.common.exceptions import TimeoutException\n from selenium.webdriver.support.ui import WebDriverWait\n from selenium.webdriver.support import expected_conditions as EC\n \n import time\n from selenium.webdriver.chrome.options import Options\n \n import matplotlib.pyplot as plt</pre> <pre class='prettyprint'># import scraping modules\n from selenium import webdriver\n import pandas as pd\n \n # open browser\n driver = webdriver.Chrome()\n \n # scrape vital signs\n driver.get(\"https://medicalprogress.dev/patient_file2/vit_signs.html\")\n html = driver.page_source\n driver.close()\n data = pd.read_html(html)\n data = data[0]\n data = pd.DataFrame(data)\n print(data)</pre> <pre class='prettyprint'># replace all comments behind numbers with nothing\n data[data.columns[1]] = data[data.columns[1]].str.replace(r'[a-zA-Z].*', '', regex=True)</pre>\n  <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}