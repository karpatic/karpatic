"use strict";(self.webpackChunkname=self.webpackChunkname||[]).push([[385],{751:function(e,t,n){n.r(t),n.d(t,{handleRoute:function(){return handleRoute},navEvent:function(){return navEvent}}),window.oldRoute=location.pathname.replace(origin,""),window.isLocal||=!window.content?.innerHTML.trim(),window.preRendering=/ReactSnap/.test(navigator.userAgent);const navEvent=async e=>{let t=window.location.href.replace(window.origin,"");t.split("#")[0]!=window.oldRoute.split("#")[0]&&(await handleRoute(t),window.oldRoute=t),-1==t.indexOf("#")&&window.scrollTo({top:0,behavior:"smooth"});let n=document.getElementById(t.split("#")[1]);n?.scrollIntoView({behavior:"smooth"})},handleRoute=async e=>{"/"==e&&(e="index"),e=e.replaceAll("./","").replaceAll("../","").replace(".html","").replace(/^\//,""),!window.meta&&!isLocal&&registerServiceWorker(),await n.e(763).then(n.t.bind(n,257,23));let{ipynb_publish:t}=isLocal&&await Promise.all([n.e(212),n.e(156)]).then(n.bind(n,996)),o=await(isLocal?t(`/ipynb/${e}.ipynb`):(await fetch(`./posts/${e}.json`)).json());console.log("handleRoute: ",{url:isLocal?`/ipynb/${e}.ipynb`:`./posts/${e}.json`,content:o}),window.oldMeta=window.meta,window.meta=o.meta,meta.content=o.content,document.title=window.meta.title,window.newSitemap=window.oldMeta?.sitemap!==window.meta.sitemap,window.newTemplate=window.oldMeta?.template!==window.meta.template;var a=document.createElement("meta");if(a.httpEquiv="Content-Security-Policy",a.content=window.meta.csp,window.meta.csp&&document.head.appendChild(a),newTemplate&&(document.body.innerHTML=await(await fetch(`/templates/${window.meta.template}.html`)).text(),document.body.insertAdjacentHTML("beforeend",`<style>${await(await fetch(`${w.location.origin}/templates/${window.meta.template}.css`)).text()}</style>`),await loadScripts()),window.newSitemap&&!document.querySelector("style sitemap")){let e=await(await fetch(`${w.location.origin}/templates/${window.meta.template}_sitemap.css`)).text();document.body.insertAdjacentHTML("beforeend",`<style>${e}</style>`)}window.dispatchEvent(new CustomEvent("refreshTemplate"))},loadScripts=async()=>{Array.from(document.getElementsByTagName("script")).forEach((e=>{const t=document.createElement("script");["src","type","async","textContent"].forEach((n=>{e[n]&&(t[n]=e[n])})),document.body.appendChild(t),e.parentNode.removeChild(e)}))},registerServiceWorker=async()=>{if("serviceWorker"in navigator)try{const e=await navigator.serviceWorker.register("/service-worker.js");e.onupdatefound=()=>{const t=e.installing;t.onstatechange=()=>{"installed"==t.state&&(navigator.serviceWorker.controller?console.log("New content is available; please refresh."):console.log("Content is cached for offline use."))}}}catch(e){console.error(`Registration failed with ${e}`)}}}}]);