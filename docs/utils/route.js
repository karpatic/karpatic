window.w=window;export const navEvent=async()=>{console.log("~~~> navEvent");let e=location.href;(-1==e.indexOf("#")?()=>window.scrollTo({top:0,behavior:"smooth"}):()=>w[e.split("#")[1]]?.scrollIntoView({behavior:"smooth"}))(),e.split("#")[0]!=w.href?.split("#")[0]&&(await handleRoute(),w.href=e)};export const handleRoute=async()=>{if(console.log("~~~~~~> HANDLE_ROUTE"),location.pathname.includes("undefined"))return;w.meta||!isLocal&&registerServiceWorker(),w.toast||await import("./refresh_template.js");let e="/"==location.pathname?"index":location.pathname.replaceAll("./","").replaceAll("../","").replace(".html","").replace(/^\//,"").replace(/\/$/,""),o=!isLocal||preRendering?`${location.origin}/posts/${e}.json`:`../../ipynb/${e}.ipynb`,t={};try{console.log("~~~~~~> GET_CONTENT"),t=await(!isLocal||preRendering?await(async()=>(await fetch(o)).json())():(await(async()=>await import("../../server/convert.mjs"))()).nb2json(o))}catch(e){console.log("~~~~~~~~~> handleRoute:GET_CONTENT:ERROR",o,e),console.log(e)}w.oldMeta=w.meta,w.meta=t.meta,meta.content=t.content,w.dispatchEvent(new CustomEvent("load_template"))};const registerServiceWorker=async()=>{if("serviceWorker"in navigator)try{const e=await navigator.serviceWorker.register("/utils/service-worker.js");e.onupdatefound=()=>{const o=e.installing;o.onstatechange=()=>{"installed"==o.state&&(navigator.serviceWorker.controller?console.log("New content is available; Purge occurred. fresh content added to the cache. Refresh."):console.log("Content is cached for offline use."))}}}catch(e){console.error(`Registration failed with ${e}`)}};