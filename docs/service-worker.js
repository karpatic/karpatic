const CACHE_NAME="cv-website-cache-v8",urlsToCache=["/"],enableNavigationPreload=async()=>{self.registration.navigationPreload&&await self.registration.navigationPreload.enable()};self.addEventListener("activate",(e=>{e.waitUntil(enableNavigationPreload())})),self.addEventListener("install",(async e=>{try{console.log("Service worker installing...");const a=await caches.open(CACHE_NAME);console.log("Service worker Adding URLS..."),await a.addAll(urlsToCache),console.log("Service worker  - event.waitUntil..."),e.waitUntil(a),console.log("Service worker done installing...")}catch(e){}}));const putInCache=async(e,a)=>{const t=await caches.open(CACHE_NAME);await t.put(e,a)},deleteCache=async e=>{await caches.delete(e)},deleteOldCaches=async()=>{const e=[CACHE_NAME],a=(await caches.keys()).filter((a=>!e.includes(a)));await Promise.all(a.map(deleteCache))};self.addEventListener("activate",(e=>{e.waitUntil(deleteOldCaches())}));const cacheFirst=async({request:e,preloadResponsePromise:a})=>{const t=await caches.match(e);if(t)return t;const n=await a;if(n)return console.info("using preload response",n),putInCache(e,n.clone()),n;try{const a=await fetch(e);return putInCache(e,a.clone()),a}catch(e){return new Response("Network error happened",{status:408,headers:{"Content-Type":"text/plain"}})}};self.addEventListener("fetch",(e=>{e.respondWith(cacheFirst({request:e.request,preloadResponsePromise:e.preloadResponse}))}));