{"meta":{"filename":"02_merge_data","title":"Merge Data","summary":"This notebook was made to demonstrate how to merge datasets by matching a single columns values from two datasets. We add columns of data from a foreign dataset into the ACS data we downloaded in our last tutorial.","template":"template_article","sitemap":"dataplay","csp":"img-src 'self' https://charleskarpati.com/ data: https://raw.githubusercontent.com/ https://static.mybinder.org/ https://mybinder.org/ https://pete88b.github.io/ https://badges.frapsoft.com/ https://img.shields.io/ http://img.shields.io/; connect-src 'self';"},"content":" <p>Please read everything found on the <a href=\"https://bniajfi.org/dataplay/\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">mainpage</a> before continuing; disclaimer and all.</p>\n <p><a href=\"https://mybinder.org/v2/gh/bnia/dataplay/main?filepath=%2Fnotebooks%2F02_Merge_Data.ipynb\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://colab.research.google.com/github/bnia/dataplay/blob/main/notebooks/02_Merge_Data.ipynb\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/bnia/dataplay/tree/main/notebooks/02_Merge_Data.ipynb\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/ellerbrock/open-source-badges/\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a></p>\n<p> <a href=\"https://github.com/bnia/dataplay/blob/main/LICENSE\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://bnia.github.io\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a> \n <a href=\"https://pypi.python.org/pypi/dataplay/\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/pypi/pyversions/dataplay.svg\" alt=\"Python Versions\"></a>\n <a href=\"\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/bnia/dataplay.svg?style=flat\" alt=\"GitHub last commit\"></a>  </p>\n<p> <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/bnia/dataplay.svg?style=social&label=Star\" alt=\"GitHub stars\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/bnia/dataplay.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/bnia/dataplay.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/bnia.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a> </p>\n<p> <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20%E2%9C%A8%20colab%20by%20@bniajfi%20https://github.com/bnia/dataplay%20%F0%9F%A4%97\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/url/https/github.com/bnia/dataplay.svg?style=social\" alt=\"Tweet\"></a> \n <a href=\"https://twitter.com/bniajfi\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/follow/bniajfi.svg?style=social\" alt=\"Twitter Follow\"></a></p>\n <h2 id=\"about-this-tutorial\">About this Tutorial:</h2>\n <h3 id=\"whats-inside\">Whats Inside?</h3>\n <h4 id=\"the-tutorial\"><strong>The Tutorial</strong></h4>\n<p> In this notebook, the basics of how to perform a merge are introduced.</p>\n<ul>\n<li><p>We will merge two datasets</p></li>\n<li><p>We will merge two datasets using a crosswalk</p></li>\n</ul>\n <h4 id=\"objectives\"><strong>Objectives</strong></h4>\n<p> By the end of this tutorial users should have an understanding of:</p>\n<ul>\n<li><p>How dataset merges are performed</p></li>\n<li><p>The types different union approaches a merge can take</p></li>\n<li><p>The &#39;mergeData&#39; function, and how to use it in the future</p></li>\n</ul>\n <h1 id=\"guided-walkthrough\">Guided Walkthrough</h1>\n <h2 id=\"setup\">SETUP</h2>\n <p>Install these libraries onto the virtual environment.</p>\n  t = \"\"\" \n !pip install nbdev\n from google.colab import drive\n drive.mount('/content/drive')\n %cd /content/drive/My Drive/'Software Development Documents'/dataplay/\n \"\"\"\n # !pip install dataplay from dataplay.intaker import Intake  %autoreload 2 The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n  \u001b[0m\u001b[01;34mbuild\u001b[0m/           \u001b[01;34mdataplay\u001b[0m/  \u001b[01;34mdocs\u001b[0m/    Makefile     \u001b[01;34mnotebooks\u001b[0m/  settings.ini\nCONTRIBUTING.md  \u001b[01;34mdist\u001b[0m/      LICENSE  MANIFEST.in  README.md   setup.py\n  usage: nbdev_update_lib\n       [-h]\n       [--fname FNAME]\n       [--silent SILENT]\n\nPropagates\nany change\nin the\nmodules\nmatching\n`fname` to\nthe\nnotebooks\nthat\ncreated\nthem\n\noptional arguments:\n  -h, --help\nshow this\nhelp\nmessage and\nexit\n  --fname FNAME\nA python\nfilename or\nglob to\nconvert\n  --silent SILENT\nDon't print\nresults\n(default:\nFalse)\n  \u001b[0m\u001b[01;34mbuild\u001b[0m/           \u001b[01;34mdataplay\u001b[0m/  \u001b[01;34mdocs\u001b[0m/    Makefile     \u001b[01;34mnotebooks\u001b[0m/  settings.ini\nCONTRIBUTING.md  \u001b[01;34mdist\u001b[0m/      LICENSE  MANIFEST.in  README.md   setup.py\n  Converted 01_Download_and_Load.ipynb.\nConverted 02_Merge_Data.ipynb.\nConverted 03_Map_Basics_Intake_and_Operations.ipynb.\nConverted 04_nb_2_html.ipynb.\nConverted 05_Map_Correlation_Networks.ipynb.\nConverted 06_Timelapse_Data_Gifs.ipynb.\nConverted index.ipynb.\n !nbdev_update_lib Converted intaker.py.\nConverted merge.py.\nConverted geoms.py.\nConverted gifmap.py.\n # !nbdev_build_lib --fname './notebooks/02_Merge_Data.ipynb' Converted 01_Download_and_Load.ipynb.\n # @title Run: Import Modules\n \n # These imports will handle everything\n import numpy as np\n import pandas as pd pd.set_option('display.max_colwidth', -1)\n pd.set_option('max_colwidth', 20)\n pd.set_option('display.expand_frame_repr', False)\n pd.set_option('display.precision', 2) <h2 id=\"retrieve-datasets\">Retrieve Datasets</h2>\n <p>Our example will merge two simple datasets; pulling CSA names using tract ID&#39;s.</p>\n<p> The <strong>First</strong> dataset will be obtained from the Census&#39; ACS 5-year serveys. </p>\n<p> Functions used to obtain this data were obtained from Tutorial 0) ACS: Explore and Download. </p>\n <p> The <strong>Second</strong> dataset is from a publicly accessible link</p>\n <h3 id=\"get-the-principal-dataset\">Get the Principal dataset.</h3>\n <p>We will use the function we created in our last tutorial to download the data!</p>\n # Change these values in the cell below using different geographic reference codes will change those parameters\n tract = '*'\n county = '510'\n state = '24'\n \n # Specify the download parameters the function will receieve here\n tableId = 'B19001'\n year = '17'\n saveAcs = False df.head() Number of Columns 17\n <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>B19001_001E_Total</th>\n      <th>B19001_002E_Total_Less_than_$10,000</th>\n      <th>B19001_003E_Total_$10,000_to_$14,999</th>\n      <th>B19001_004E_Total_$15,000_to_$19,999</th>\n      <th>B19001_005E_Total_$20,000_to_$24,999</th>\n      <th>B19001_006E_Total_$25,000_to_$29,999</th>\n      <th>B19001_007E_Total_$30,000_to_$34,999</th>\n      <th>B19001_008E_Total_$35,000_to_$39,999</th>\n      <th>B19001_009E_Total_$40,000_to_$44,999</th>\n      <th>B19001_010E_Total_$45,000_to_$49,999</th>\n      <th>B19001_011E_Total_$50,000_to_$59,999</th>\n      <th>B19001_012E_Total_$60,000_to_$74,999</th>\n      <th>B19001_013E_Total_$75,000_to_$99,999</th>\n      <th>B19001_014E_Total_$100,000_to_$124,999</th>\n      <th>B19001_015E_Total_$125,000_to_$149,999</th>\n      <th>B19001_016E_Total_$150,000_to_$199,999</th>\n      <th>B19001_017E_Total_$200,000_or_more</th>\n      <th>state</th>\n      <th>county</th>\n      <th>tract</th>\n    </tr>\n    <tr>\n      <th>NAME</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Census Tract 2710.02</th>\n      <td>1510</td>\n      <td>209</td>\n      <td>73</td>\n      <td>94</td>\n      <td>97</td>\n      <td>110</td>\n      <td>119</td>\n      <td>97</td>\n      <td>65</td>\n      <td>36</td>\n      <td>149</td>\n      <td>168</td>\n      <td>106</td>\n      <td>66</td>\n      <td>44</td>\n      <td>50</td>\n      <td>27</td>\n      <td>24</td>\n      <td>510</td>\n      <td>271002</td>\n    </tr>\n    <tr>\n      <th>Census Tract 2604.02</th>\n      <td>1134</td>\n      <td>146</td>\n      <td>29</td>\n      <td>73</td>\n      <td>80</td>\n      <td>41</td>\n      <td>91</td>\n      <td>49</td>\n      <td>75</td>\n      <td>81</td>\n      <td>170</td>\n      <td>57</td>\n      <td>162</td>\n      <td>63</td>\n      <td>11</td>\n      <td>6</td>\n      <td>0</td>\n      <td>24</td>\n      <td>510</td>\n      <td>260402</td>\n    </tr>\n    <tr>\n      <th>Census Tract 2712</th>\n      <td>2276</td>\n      <td>69</td>\n      <td>43</td>\n      <td>41</td>\n      <td>22</td>\n      <td>46</td>\n      <td>67</td>\n      <td>0</td>\n      <td>30</td>\n      <td>30</td>\n      <td>80</td>\n      <td>146</td>\n      <td>321</td>\n      <td>216</td>\n      <td>139</td>\n      <td>261</td>\n      <td>765</td>\n      <td>24</td>\n      <td>510</td>\n      <td>271200</td>\n    </tr>\n    <tr>\n      <th>Census Tract 2804.04</th>\n      <td>961</td>\n      <td>111</td>\n      <td>108</td>\n      <td>61</td>\n      <td>42</td>\n      <td>56</td>\n      <td>37</td>\n      <td>73</td>\n      <td>30</td>\n      <td>31</td>\n      <td>106</td>\n      <td>119</td>\n      <td>74</td>\n      <td>23</td>\n      <td>27</td>\n      <td>24</td>\n      <td>39</td>\n      <td>24</td>\n      <td>510</td>\n      <td>280404</td>\n    </tr>\n    <tr>\n      <th>Census Tract 901</th>\n      <td>1669</td>\n      <td>158</td>\n      <td>124</td>\n      <td>72</td>\n      <td>48</td>\n      <td>108</td>\n      <td>68</td>\n      <td>121</td>\n      <td>137</td>\n      <td>99</td>\n      <td>109</td>\n      <td>191</td>\n      <td>160</td>\n      <td>141</td>\n      <td>28</td>\n      <td>88</td>\n      <td>17</td>\n      <td>24</td>\n      <td>510</td>\n      <td>90100</td>\n    </tr>\n  </tbody>\n</table>\n</div> <h3 id=\"get-the-secondary-dataset\">Get the Secondary Dataset</h3>\n <p>Spatial data can be attained by using the 2010 Census Tract Shapefile Picking <a href=\"https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2010&layergroup=Census+Tracts\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Tool</a> or search their website for\n Tiger/<a href=\"https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2010.html\" onclick=\"window.sendPing(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Line</a> Shapefiles</p>\n<blockquote>\n<p>The core TIGER/Line Files and Shapefiles do not include demographic data, but they do contain geographic entity codes (GEOIDs) that can be linked to the Census Bureau’s demographic data, available on data.census.gov.-census.gov</p>\n</blockquote>\n <p>For this example, we will simply pull a local dataset containing columns labeling tracts within Baltimore City and their corresponding CSA (Community Statistical Area). Typically, we use this dataset internally as a &quot;crosswalk&quot; where-upon a succesfull merge using the tract column, will be merged with a 3rd dataset along it&#39;s CSA column.  </p>\n # !wget https://raw.githubusercontent.com/bniajfi/bniajfi/main/CSA-to-Tract-2010.csv  <p>or, Alternately</p>\n # !curl https://raw.githubusercontent.com/bniajfi/bniajfi/main/CSA-to-Tract-2010.csv\t> CSA-to-Tract-2010.csv   Boundaries Example:CSA-to-Tract-2010.csv\n # Our Example dataset contains Polygon Geometry information. \n # We want to merge this over to our principle dataset. \n # we will grab it by matching on either CSA or Tract\n \n # The url listed below is public.\n \n print('Tract 2 CSA Crosswalk : CSA-to-Tract-2010.csv')\n \n from dataplay.intaker import Intake\n \n crosswalk = Intake.getData( 'https://raw.githubusercontent.com/bniajfi/bniajfi/main/CSA-to-Tract-2010.csv' ) \n crosswalk.head() Tract 2 CSA Crosswalk : CSA-to-Tract-2010.csv\n <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>TRACTCE10</th>\n      <th>GEOID10</th>\n      <th>CSA2010</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10100</td>\n      <td>24510010100</td>\n      <td>Canton</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10200</td>\n      <td>24510010200</td>\n      <td>Patterson Park N...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10300</td>\n      <td>24510010300</td>\n      <td>Canton</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10400</td>\n      <td>24510010400</td>\n      <td>Canton</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10500</td>\n      <td>24510010500</td>\n      <td>Fells Point</td>\n    </tr>\n  </tbody>\n</table>\n</div>  Index(['TRACTCE10', 'GEOID10', 'CSA2010'], dtype='object') <h2 id=\"perform-merge--save\">Perform Merge &amp; Save</h2>\n <p>The following picture does nothing important but serves as a friendly reminder of the 4 basic join types.</p>\n <image src=\"https://docs.trifacta.com/download/attachments/123830435/JoinVennDiagram.png\" height='200px'/>\n \n<ul>\n<li><p>Left - returns all left records, only includes the right record if it has a match</p></li>\n<li><p>Right - Returns all right records, only includes the left record if it has a match </p></li>\n<li><p>Full - Returns all records regardless of keys matching</p></li>\n<li><p>Inner - Returns only records where a key match</p></li>\n</ul>\n <p>Get Columns from both datasets to match on</p>\n<p> You can get these values from the column values above.</p>\n<p> Our Examples will work with the prompted values</p>\n left_on = input(\"Left on crosswalk column: ('tract') \\n\" ) or \"tract\"\n print(' \\n ');\n print( 'Crosswalk Columns ' + str(crosswalk.columns) + '')\n right_on = input(\"Right on crosswalk column: ('TRACTCE10') \\n\" ) or \"TRACTCE10\"  Princpal Columns Index(['B19001_001E_Total', 'B19001_002E_Total_Less_than_$10,000',\n       'B19001_003E_Total_$10,000_to_$14,999',\n       'B19001_004E_Total_$15,000_to_$19,999',\n       'B19001_005E_Total_$20,000_to_$24,999',\n       'B19001_006E_Total_$25,000_to_$29,999',\n       'B19001_007E_Total_$30,000_to_$34,999',\n       'B19001_008E_Total_$35,000_to_$39,999',\n       'B19001_009E_Total_$40,000_to_$44,999',\n       'B19001_010E_Total_$45,000_to_$49,999',\n       'B19001_011E_Total_$50,000_to_$59,999',\n       'B19001_012E_Total_$60,000_to_$74,999',\n       'B19001_013E_Total_$75,000_to_$99,999',\n       'B19001_014E_Total_$100,000_to_$124,999',\n       'B19001_015E_Total_$125,000_to_$149,999',\n       'B19001_016E_Total_$150,000_to_$199,999',\n       'B19001_017E_Total_$200,000_or_more', 'state', 'county', 'tract'],\n      dtype='object')\nLeft on crosswalk column: ('tract') \n\n \n \nCrosswalk Columns Index(['TRACTCE10', 'GEOID10', 'CSA2010'], dtype='object')\nRight on crosswalk column: ('TRACTCE10') \n\n <p>Specify how the merge will be performed</p>\n <p>We will perform a left merge in this example.</p>\n<p> It will return our Principal dataset with columns from the second dataset appended to records where their specified columns match.</p>\n  How: (‘left’, ‘right’, ‘outer’, ‘inner’) \n <p>Actually perfrom the merge</p>\n merged_df = merged_df.drop(left_on, axis=1)\n merged_df.head() <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>B19001_001E_Total</th>\n      <th>B19001_002E_Total_Less_than_$10,000</th>\n      <th>B19001_003E_Total_$10,000_to_$14,999</th>\n      <th>B19001_004E_Total_$15,000_to_$19,999</th>\n      <th>B19001_005E_Total_$20,000_to_$24,999</th>\n      <th>B19001_006E_Total_$25,000_to_$29,999</th>\n      <th>B19001_007E_Total_$30,000_to_$34,999</th>\n      <th>B19001_008E_Total_$35,000_to_$39,999</th>\n      <th>B19001_009E_Total_$40,000_to_$44,999</th>\n      <th>B19001_010E_Total_$45,000_to_$49,999</th>\n      <th>B19001_011E_Total_$50,000_to_$59,999</th>\n      <th>B19001_012E_Total_$60,000_to_$74,999</th>\n      <th>B19001_013E_Total_$75,000_to_$99,999</th>\n      <th>B19001_014E_Total_$100,000_to_$124,999</th>\n      <th>B19001_015E_Total_$125,000_to_$149,999</th>\n      <th>B19001_016E_Total_$150,000_to_$199,999</th>\n      <th>B19001_017E_Total_$200,000_or_more</th>\n      <th>state</th>\n      <th>county</th>\n      <th>TRACTCE10</th>\n      <th>GEOID10</th>\n      <th>CSA2010</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>568</td>\n      <td>128</td>\n      <td>24</td>\n      <td>44</td>\n      <td>41</td>\n      <td>4</td>\n      <td>25</td>\n      <td>20</td>\n      <td>0</td>\n      <td>21</td>\n      <td>18</td>\n      <td>31</td>\n      <td>129</td>\n      <td>32</td>\n      <td>37</td>\n      <td>9</td>\n      <td>5</td>\n      <td>24</td>\n      <td>510</td>\n      <td>130805.0</td>\n      <td>2.45e+10</td>\n      <td>Mount Washington...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>967</td>\n      <td>99</td>\n      <td>40</td>\n      <td>25</td>\n      <td>81</td>\n      <td>77</td>\n      <td>21</td>\n      <td>42</td>\n      <td>47</td>\n      <td>5</td>\n      <td>41</td>\n      <td>100</td>\n      <td>132</td>\n      <td>68</td>\n      <td>79</td>\n      <td>82</td>\n      <td>28</td>\n      <td>24</td>\n      <td>510</td>\n      <td>210100.0</td>\n      <td>2.45e+10</td>\n      <td>Washington Villa...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1139</td>\n      <td>191</td>\n      <td>93</td>\n      <td>81</td>\n      <td>67</td>\n      <td>63</td>\n      <td>41</td>\n      <td>51</td>\n      <td>76</td>\n      <td>68</td>\n      <td>50</td>\n      <td>120</td>\n      <td>114</td>\n      <td>22</td>\n      <td>0</td>\n      <td>33</td>\n      <td>69</td>\n      <td>24</td>\n      <td>510</td>\n      <td>270701.0</td>\n      <td>2.45e+10</td>\n      <td>Harford/Echodale</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>808</td>\n      <td>195</td>\n      <td>114</td>\n      <td>80</td>\n      <td>49</td>\n      <td>76</td>\n      <td>81</td>\n      <td>26</td>\n      <td>70</td>\n      <td>0</td>\n      <td>33</td>\n      <td>19</td>\n      <td>31</td>\n      <td>13</td>\n      <td>0</td>\n      <td>15</td>\n      <td>6</td>\n      <td>24</td>\n      <td>510</td>\n      <td>190100.0</td>\n      <td>2.45e+10</td>\n      <td>Southwest Baltimore</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>698</td>\n      <td>58</td>\n      <td>69</td>\n      <td>131</td>\n      <td>32</td>\n      <td>39</td>\n      <td>26</td>\n      <td>19</td>\n      <td>24</td>\n      <td>32</td>\n      <td>60</td>\n      <td>74</td>\n      <td>55</td>\n      <td>5</td>\n      <td>34</td>\n      <td>21</td>\n      <td>19</td>\n      <td>24</td>\n      <td>510</td>\n      <td>190200.0</td>\n      <td>2.45e+10</td>\n      <td>Southwest Baltimore</td>\n    </tr>\n  </tbody>\n</table>\n</div> <p>As you can see, our Census data will now have a CSA appended to it.</p>\n # outFile = input(\"Please enter the new Filename to save the data to ('acs_csa_merge_test': \" )\n # merged_df.to_csv(outFile+'.csv', quoting=csv.QUOTE_ALL)  <h2 id=\"final-result\">Final Result</h2>\n if (flag == 'y' or flag == 'Y'):\n   left_df = Intake.getData( input(\"Please enter the location of your Left file: \" ) )\n else:\n   tract = input(\"Please enter tract id (*): \" ) or \"*\"\n   county = input(\"Please enter county id (510): \" ) or \"510\"\n   state = input(\"Please enter state id (24): \" ) or \"24\"\n   tableId = input(\"Please enter acs table id (B19001): \" ) or \"B19001\"\n   year = input(\"Please enter acs year (18): \" ) or \"18\"\n   saveAcs = input(\"Save ACS? (Y/N): \" ) or \"N\"\n   left_df = retrieve_acs_data(state, county, tract, tableId, year, saveAcs)\n \n print('right_df Example: CSA-to-Tract-2010.csv')\n \n right_df = Intake.getData( input(\"Please enter the location of your right_df file: \" ) or 'https://raw.githubusercontent.com/bniajfi/bniajfi/main/CSA-to-Tract-2010.csv' )\n print( 'Left Columns ' + str(left_df.columns))\n print( '\\n ')\n print( 'right_df Columns ' + str(right_df.columns) + '\\n')\n \n left_on = input(\"Left on: \" ) or 'tract'\n right_on = input(\"Right on: \" ) or 'TRACTCE10'\n how = input(\"How: (‘left’, ‘right’, ‘outer’, ‘inner’) \" ) or 'outer'\n \n merged_df = pd.merge(left_df, right_df, left_on=left_on, right_on=right_on, how=how)\n merged_df = merged_df.drop(left_on, axis=1)\n \n # Save the data\n # Save the data\n saveFile = input(\"Save File ('Y' or 'N'): \") or 'N'\n if saveFile == 'Y' or saveFile == 'y':\n   outFile = input(\"Saved Filename (Do not include the file extension ): \")\n   merged_df.to_csv(outFile+'.csv', quoting=csv.QUOTE_ALL); Enter a URL? If not ACS data will be used. (Y/N):  \nPlease enter tract id (*): \nPlease enter county id (510): \nPlease enter state id (24): \nPlease enter acs table id (B19001): \nPlease enter acs year (18): \nSave ACS? (Y/N): \nNumber of Columns 17\nright_df Example: CSA-to-Tract-2010.csv\nPlease enter the location of your right_df file: \nLeft Columns Index(['B19001_001E_Total', 'B19001_002E_Total_Less_than_$10,000',\n       'B19001_003E_Total_$10,000_to_$14,999',\n       'B19001_004E_Total_$15,000_to_$19,999',\n       'B19001_005E_Total_$20,000_to_$24,999',\n       'B19001_006E_Total_$25,000_to_$29,999',\n       'B19001_007E_Total_$30,000_to_$34,999',\n       'B19001_008E_Total_$35,000_to_$39,999',\n       'B19001_009E_Total_$40,000_to_$44,999',\n       'B19001_010E_Total_$45,000_to_$49,999',\n       'B19001_011E_Total_$50,000_to_$59,999',\n       'B19001_012E_Total_$60,000_to_$74,999',\n       'B19001_013E_Total_$75,000_to_$99,999',\n       'B19001_014E_Total_$100,000_to_$124,999',\n       'B19001_015E_Total_$125,000_to_$149,999',\n       'B19001_016E_Total_$150,000_to_$199,999',\n       'B19001_017E_Total_$200,000_or_more', 'state', 'county', 'tract'],\n      dtype='object')\n\n \nright_df Columns Index(['TRACTCE10', 'GEOID10', 'CSA2010'], dtype='object')\n\nLeft on: \nRight on: \nHow: (‘left’, ‘right’, ‘outer’, ‘inner’) \nSave File ('Y' or 'N'): \n  <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>B19001_001E_Total</th>\n      <th>B19001_002E_Total_Less_than_$10,000</th>\n      <th>B19001_003E_Total_$10,000_to_$14,999</th>\n      <th>B19001_004E_Total_$15,000_to_$19,999</th>\n      <th>B19001_005E_Total_$20,000_to_$24,999</th>\n      <th>B19001_006E_Total_$25,000_to_$29,999</th>\n      <th>B19001_007E_Total_$30,000_to_$34,999</th>\n      <th>B19001_008E_Total_$35,000_to_$39,999</th>\n      <th>B19001_009E_Total_$40,000_to_$44,999</th>\n      <th>B19001_010E_Total_$45,000_to_$49,999</th>\n      <th>B19001_011E_Total_$50,000_to_$59,999</th>\n      <th>B19001_012E_Total_$60,000_to_$74,999</th>\n      <th>B19001_013E_Total_$75,000_to_$99,999</th>\n      <th>B19001_014E_Total_$100,000_to_$124,999</th>\n      <th>B19001_015E_Total_$125,000_to_$149,999</th>\n      <th>B19001_016E_Total_$150,000_to_$199,999</th>\n      <th>B19001_017E_Total_$200,000_or_more</th>\n      <th>state</th>\n      <th>county</th>\n      <th>TRACTCE10</th>\n      <th>GEOID10</th>\n      <th>CSA2010</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>568</td>\n      <td>128</td>\n      <td>24</td>\n      <td>44</td>\n      <td>41</td>\n      <td>4</td>\n      <td>25</td>\n      <td>20</td>\n      <td>0</td>\n      <td>21</td>\n      <td>18</td>\n      <td>31</td>\n      <td>129</td>\n      <td>32</td>\n      <td>37</td>\n      <td>9</td>\n      <td>5</td>\n      <td>24</td>\n      <td>510</td>\n      <td>130805.0</td>\n      <td>2.45e+10</td>\n      <td>Mount Washington...</td>\n    </tr>\n  </tbody>\n</table>\n</div> <h1 id=\"advanced\">Advanced</h1>\n <p>For this next example to work, we will need to import hypothetical csv files</p>\n <p><strong>Intro</strong></p>\n<p> The following Python function is a bulked out version of the previous notes. </p>\n<ul>\n<li><p>It contains everything from the tutorial plus more.</p></li>\n<li><p>It can be imported and used in future projects or stand alone.</p></li>\n</ul>\n<p> <strong>Description:</strong> add columns of data from a foreign dataset into a primary dataset along set parameters. </p>\n<p> <strong>Purpose:</strong> Makes Merging datasets simple</p>\n<p> <strong>Services</strong></p>\n<ul>\n<li><p>Merge two datasets without a crosswalk</p></li>\n<li><p>Merge two datasets with a crosswalk</p></li>\n</ul>\n #@ title Run: Create mergeDatasets()\n \n # Worried about infinit interactive-loops. not an issue atm.\n # Crosswalk needs to have exact same column names as left/right datasets\n def mergeDatasets(left_ds=False, right_ds=False, crosswalk_ds=False,\n                   left_col=False, right_col=False,\n                   crosswalk_left_col = False, crosswalk_right_col = False,\n                   merge_how=False, # left right or columnname to retrieve\n                   interactive=True):\n   # Interactive will ask if use_crosswalk unless crosswalk_ds == 'no'\n \n   # 1. Used on Right Dataset in case merge_how is a column to pull. Returns False or Col\n   def checkMergeHow(ds, how, interactive):\n     inList = how in ['left', 'right', 'outer', 'inner']\n     inDf = Intake.checkColumn(ds, how)\n     if ( inList or inDf ): return how\n     elif ( not interactive ): return False\n     else:\n       try:\n         print('\\n Invalid merge column given. \\n Please select a value from either list');\n         print(\"\\n 1) Pull A single column from the right dataset: \", ds.columns)\n         print(\"OR \\n 2) Specify a type of join operation: (‘left’, ‘right’, ‘outer’, ‘inner’, columnName) \" )\n         return checkMergeHow(ds, input(\"Column Name: \" ), interactive);\n       except: return False # User probably trying to escape interactivity\n \n   # 2i. Load data via url. Coerce Dtype needed for merge.\n   def coerceForMerge( msg, first_ds, second_ds, first_col, second_col, interactive ):\n       if (interactive):\n         print(f'\\n---Casting Datatypes from-to: {msg} Datasets---');\n         print('Before Casting: ');\n         print('-> Column One: ', first_col, first_ds[first_col].dtype)\n         print('-> Column Two: ', second_col, second_ds[second_col].dtype)\n       second_ds, second_col = Intake.getAndCheck(second_ds, second_col, interactive)\n       first_ds, second_ds, status = Intake.coerce(first_ds, second_ds, first_col, second_col, interactive);\n       if (not status and interactive): print('\\n There was a problem!');\n       if (interactive):\n         print('\\n After Casting: ');\n         print('-> Column One: ', first_col, first_ds[first_col].dtype)\n         print('-> Column Two: ', second_col, second_ds[second_col].dtypes)\n       return first_ds, second_ds, second_col, status\n   # 2ii.\n   def mergeAndFilter(msg, first_ds, second_ds, first_col, second_col, how, interactive):\n       if interactive:\n         print(f'---PERFORMING MERGE : {msg}---');\n         print('Column One : ', first_col, first_ds[first_col].dtype)\n         print('How: ', how)\n         print('Column Two : ', second_col, second_ds[second_col].dtype)\n       first_ds = mergeOrPull(first_ds, second_ds, first_col, second_col, how)\n       return filterEmpties(first_ds, second_ds, first_col, second_col, how, interactive)\n \n   # Decide to perform a merge or commit a pull\n   def mergeOrPull(df, cw, left_on, right_on, how):\n \n     def merge(df, cw, left_on, right_on, how):\n       df = pd.merge(df, cw, left_on=left_on, right_on=right_on, how=how)\n       # df.drop(left_on, axis=1)\n       df[right_on] = df[right_on].fillna(value='empty')\n       return df\n \n     def pull(df, cw, left_on, right_on, how):\n       crswlk = dict(zip(cw[right_on], cw[how]  ) )\n       dtype = df[left_on].dtype\n       if dtype =='object':  df[how] = df.apply(lambda row: crswlk.get(str(row[left_on]), \"empty\"), axis=1)\n       elif dtype == 'int64':\n         df[how] = df.apply(lambda row: crswlk.get(int(row[left_on]), \"empty\"), axis=1)\n       return df\n \n     mergeType = how in ['left', 'right', 'outer', 'inner']\n     if mergeType: return merge(df, cw, left_on, right_on, how)\n     else: return pull(df, cw, left_on, right_on, how)\n \n   # 2iiii. Filter between matched records and not.\n   def filterEmpties(df, cw, left_on, right_on, how, interactive):\n     if how in ['left', 'right', 'outer', 'inner']: how = right_on\n     nomatch = df.loc[df[how] == 'empty']\n     nomatch = nomatch.sort_values(by=left_on, ascending=True)\n \n     if nomatch.shape[0] > 0:\n       # Do the same thing with our foreign tracts\n       if(interactive):\n         print('\\n Local Column Values Not Matched ')\n         print(nomatch[left_on].unique() )\n         print(len(nomatch[left_on]))\n         print('\\n Crosswalk Unique Column Values')\n         print(cw[right_on].unique() )\n \n     # Create a new column with the tracts value mapped to its corresponding value from the crossswalk\n     df[how].replace('empty', np.nan, inplace=True)\n     df.dropna(subset=[how], inplace=True)\n     # cw = cw.sort_values(by=how, ascending=True)\n     return df\n \n   # 0. Retrieve the left and right dataset.\n   if (interactive): print('---Handling Left Dataset Options---');\n   left_ds, left_col = Intake.getAndCheck(left_ds, left_col, interactive)\n   if (interactive): print('Left column:', left_col)\n \n   if (interactive): print('\\n---Handling Right Dataset Options---');\n   right_ds, right_col  = Intake.getAndCheck(right_ds, right_col, interactive)\n   if (interactive): print('Right column:', left_col)\n \n   if (interactive): print(f\"\\n---Ensuring Compatability Between merge_how (val: '{merge_how}') and the Right Dataset---\");\n   merge_how = checkMergeHow(right_ds, merge_how, interactive)\n   if (interactive): print(\"Column or ['inner','left','right','outer'] value: \", merge_how)\n \n   # 1. Retrieve the crosswalk dataset: check left-cw, right-cw. try coercing.\n   if (interactive): print(f'\\n---Checking Crosswalk Dataset Options---')\n   # if its a df\n   if (not Intake.isPandas(crosswalk_ds)):\n     default = str(crosswalk_ds).lower() == 'false'\n     # If the user used the the default crosswalk value 'False' as them if they want to use one.\n     if (default and interactive ): crosswalk_ds = input(\"\\nProvide a Crosswalk? ( URL/ PATH or  'NO'/ <Empty>/ 'FALSE' ) \") or  False\n     # Check if user opted to not use a crosswalk\n     use_crosswalk = not ((str(crosswalk_ds).lower() in [\"no\", '', 'none', 'false']))\n     if (use_crosswalk):\n       crosswalk_ds, crosswalk_left_col = Intake.getAndCheck(crosswalk_ds, crosswalk_left_col, interactive)\n       crosswalk_ds, crosswalk_right_col = Intake.getAndCheck(crosswalk_ds, crosswalk_right_col, interactive)\n \n   # 3. Coerce all datasets for Merge.\n   if ( Intake.isPandas(crosswalk_ds) ):\n     print('crosswalk_left_col',crosswalk_left_col)\n     left_ds, crosswalk_ds, crosswalk_left_col, status = coerceForMerge( 'Left->Crosswalk', left_ds, crosswalk_ds, left_col, crosswalk_left_col, interactive )\n     right_ds, crosswalk_ds, crosswalk_right_col, status = coerceForMerge( 'Right->Crosswalk',right_ds, crosswalk_ds, right_col, crosswalk_right_col, interactive )\n   else:\n     left_ds, right_ds, right_col, status = coerceForMerge('Left->Right', left_ds, right_ds, left_col, right_col, interactive )\n \n   if (interactive): print('\\n---All checks complete. Status: ', status, '---\\n');\n   if ( not status ):\n     if (interactive):print('Merge Incomplete. Thank you!');\n     return False;\n   else:\n     if (Intake.isPandas(crosswalk_ds)):\n       left_ds = mergeAndFilter('LEFT->CROSSWALK', left_ds, crosswalk_ds, left_col, crosswalk_left_col, crosswalk_right_col, interactive)\n       left_col = crosswalk_right_col\n     left_ds = mergeAndFilter('LEFT->RIGHT', left_ds, right_ds, left_col, right_col, merge_how, interactive)\n   return left_ds <h3 id=\"function-explanation\">Function Explanation</h3>\n <p><strong>Input(s):</strong> </p>\n<ul>\n<li><p>Dataset url</p></li>\n<li><p>Crosswalk Url </p></li>\n<li><p>Right On </p></li>\n<li><p>Left On </p></li>\n<li><p>How </p></li>\n<li><p>New Filename</p></li>\n</ul>\n<p> <strong>Output:</strong> File</p>\n<p> <strong>How it works:</strong></p>\n<ul>\n<li><p>Read in datasets</p>\n</li>\n<li><p>Perform Merge</p>\n</li>\n<li><p>If the &#39;how&#39; parameter is equal to [&#39;left&#39;, &#39;right&#39;, &#39;outer&#39;, &#39;inner&#39;]</p>\n</li>\n<li><ul>\n<li><p>then a merge will be performed.</p></li>\n</ul>\n</li>\n<li><p>If a column name is provided in the &#39;how&#39; parameter</p>\n</li>\n<li><ul>\n<li><p>then that single column will be pulled from the right dataset as a new column in the left_ds.</p></li>\n</ul>\n</li>\n</ul>\n <h2 id=\"function-diagrams\">Function Diagrams</h2>\n <p>Diagram the mergeDatasets()</p>\n  <img src=\"https://bniajfi.org/images/mermaid/class_diagram_merge_datasets.PNG\"> <p>mergeDatasets Flow Chart</p>\n  <img src=\"https://bniajfi.org/images/mermaid/flow_chart_merge_datasets.PNG\"> <p>Gannt Chart  mergeDatasets()</p>\n  <img src=\"https://bniajfi.org/images/mermaid/gannt_chart_merge_datasets.PNG\"> <p>Sequence Diagram  mergeDatasets()</p>\n  <img src=\"https://bniajfi.org/images/mermaid/sequence_diagram_merge_datasets.PNG\"> <h2 id=\"function-examples\">Function Examples</h2>\n # from dataplay.geoms import readInGeometryData  <h4 id=\"interactive-example-1-merge-esri-data\">Interactive Example 1. Merge Esri Data</h4>\n # Hhchpov = Intake.getData(\"https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\", interactive=True)\n # Hhchpov = Hhchpov[['CSA2010', 'hhchpov15',\t'hhchpov16',\t'hhchpov17',\t'hhchpov18']] \n left_ds = \"https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\"\n left_col = 'CSA2010'\n \n # Table: Household Poverty \n # Hhpov = Intake.getData(\"https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\", interactive=True)\n # Hhpov = Hhpov[['CSA2010', 'hhpov15',\t'hhpov16',\t'hhpov17',\t'hhpov18']] \n right_ds = \"https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\"\n right_col='CSA2010'\n \n merge_how = 'outer'\n interactive = False\n \n merged_df = mergeDatasets(left_ds=left_ds, right_ds=right_ds, crosswalk_ds='no',\n                   left_col=left_col, right_col=right_col,\n                   crosswalk_left_col = False, crosswalk_right_col = False,\n                   merge_how=merge_how, # left right or columnname to retrieve\n                   interactive=interactive)\n merged_df.head() <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OBJECTID_x</th>\n      <th>CSA2010</th>\n      <th>hhchpov15</th>\n      <th>hhchpov16</th>\n      <th>hhchpov17</th>\n      <th>hhchpov18</th>\n      <th>hhchpov19</th>\n      <th>Shape__Area_x</th>\n      <th>Shape__Length_x</th>\n      <th>geometry_x</th>\n      <th>OBJECTID_y</th>\n      <th>hhpov15</th>\n      <th>hhpov16</th>\n      <th>hhpov17</th>\n      <th>hhpov18</th>\n      <th>hhpov19</th>\n      <th>Shape__Area_y</th>\n      <th>Shape__Length_y</th>\n      <th>geometry_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Allendale/Irving...</td>\n      <td>38.93</td>\n      <td>34.73</td>\n      <td>32.77</td>\n      <td>35.27</td>\n      <td>32.60</td>\n      <td>6.38e+07</td>\n      <td>38770.17</td>\n      <td>POLYGON ((-76.65...</td>\n      <td>1</td>\n      <td>24.15</td>\n      <td>21.28</td>\n      <td>20.70</td>\n      <td>23.00</td>\n      <td>19.18</td>\n      <td>6.38e+07</td>\n      <td>38770.17</td>\n      <td>POLYGON ((-76.65...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Beechfield/Ten H...</td>\n      <td>19.42</td>\n      <td>21.22</td>\n      <td>23.92</td>\n      <td>21.90</td>\n      <td>15.38</td>\n      <td>4.79e+07</td>\n      <td>37524.95</td>\n      <td>POLYGON ((-76.69...</td>\n      <td>2</td>\n      <td>11.17</td>\n      <td>11.59</td>\n      <td>10.47</td>\n      <td>10.90</td>\n      <td>8.82</td>\n      <td>4.79e+07</td>\n      <td>37524.95</td>\n      <td>POLYGON ((-76.69...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Belair-Edison</td>\n      <td>36.88</td>\n      <td>36.13</td>\n      <td>34.56</td>\n      <td>39.74</td>\n      <td>41.04</td>\n      <td>4.50e+07</td>\n      <td>31307.31</td>\n      <td>POLYGON ((-76.56...</td>\n      <td>3</td>\n      <td>18.61</td>\n      <td>19.59</td>\n      <td>20.27</td>\n      <td>22.83</td>\n      <td>22.53</td>\n      <td>4.50e+07</td>\n      <td>31307.31</td>\n      <td>POLYGON ((-76.56...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Brooklyn/Curtis ...</td>\n      <td>45.01</td>\n      <td>46.45</td>\n      <td>46.41</td>\n      <td>39.89</td>\n      <td>41.39</td>\n      <td>1.76e+08</td>\n      <td>150987.70</td>\n      <td>MULTIPOLYGON (((...</td>\n      <td>4</td>\n      <td>28.36</td>\n      <td>26.33</td>\n      <td>24.21</td>\n      <td>21.54</td>\n      <td>24.60</td>\n      <td>1.76e+08</td>\n      <td>150987.70</td>\n      <td>MULTIPOLYGON (((...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Canton</td>\n      <td>5.49</td>\n      <td>2.99</td>\n      <td>4.02</td>\n      <td>4.61</td>\n      <td>4.83</td>\n      <td>1.54e+07</td>\n      <td>23338.61</td>\n      <td>POLYGON ((-76.57...</td>\n      <td>5</td>\n      <td>3.00</td>\n      <td>2.26</td>\n      <td>3.66</td>\n      <td>2.05</td>\n      <td>2.22</td>\n      <td>1.54e+07</td>\n      <td>23338.61</td>\n      <td>POLYGON ((-76.57...</td>\n    </tr>\n  </tbody>\n</table>\n</div> <h4 id=\"example-2--get-csa-and-geometry-with-a-crosswalk-using-3-links\">Example 2 ) Get CSA and Geometry with a Crosswalk using 3 links</h4>\n # Change these values in the cell below using different geographic reference codes will change those parameters\n tract = '*'\n county = '510' # '059' # 153 '510'\n state = '24' #51\n  \n # Specify the download parameters the function will receieve here\n tableId = 'B19049' # 'B19001'\n year = '17'\n saveAcs = False  import IPython \n # from IPython.core.display import HTML\n IPython.core.display.HTML(\"<style>.rendered_html th {max-width: 200px; overflow:auto;}</style>\")\n # state, county, tract, tableId, year, saveOriginal, save \n left_df = retrieve_acs_data(state, county, tract, tableId, year, saveAcs)\n left_df.head(1)  <style>.rendered_html th {max-width: 200px; overflow:auto;}</style> Number of Columns 5\n <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>B19049_001E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Total</th>\n      <th>B19049_002E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Householder_under_25_years</th>\n      <th>B19049_003E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Householder_25_to_44_years</th>\n      <th>B19049_004E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Householder_45_to_64_years</th>\n      <th>B19049_005E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Householder_65_years_and_over</th>\n      <th>state</th>\n      <th>county</th>\n      <th>tract</th>\n    </tr>\n    <tr>\n      <th>NAME</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Census Tract 2710.02</th>\n      <td>38358</td>\n      <td>-666666666</td>\n      <td>34219</td>\n      <td>40972</td>\n      <td>37143</td>\n      <td>24</td>\n      <td>510</td>\n      <td>271002</td>\n    </tr>\n  </tbody>\n</table>\n</div> # Columns: Address(es), Census Tract\n left_ds = left_df\n left_col = 'tract'\n \n # Table: Crosswalk Census Communities\n # 'TRACT2010', 'GEOID2010', 'CSA2010'\n crosswalk_ds = 'https://raw.githubusercontent.com/bniajfi/bniajfi/main/CSA-to-Tract-2010.csv'\n crosswalk_left_col = 'TRACTCE10'\n crosswalk_right_col = 'CSA2010'\n \n # Table: \n right_ds = 'https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson'\n right_col = 'CSA2010'\n \n interactive = False\n merge_how = 'outer'\n \n merged_df_geom = mergeDatasets(left_ds=left_ds, right_ds=right_ds, crosswalk_ds=crosswalk_ds,\n                   left_col=left_col, right_col=right_col,\n                   crosswalk_left_col = crosswalk_left_col, crosswalk_right_col = crosswalk_right_col,\n                   merge_how=merge_how, # left right or columnname to retrieve\n                   interactive=interactive)\n \n merged_df_geom.head() crosswalk_left_col TRACTCE10\n <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>B19049_001E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Total</th>\n      <th>B19049_002E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Householder_under_25_years</th>\n      <th>B19049_003E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Householder_25_to_44_years</th>\n      <th>B19049_004E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Householder_45_to_64_years</th>\n      <th>B19049_005E_Median_household_income_in_the_past_12_months_(in_2017_inflation-adjusted_dollars)_--_Householder_65_years_and_over</th>\n      <th>state</th>\n      <th>county</th>\n      <th>tract</th>\n      <th>CSA2010</th>\n      <th>OBJECTID</th>\n      <th>hhpov15</th>\n      <th>hhpov16</th>\n      <th>hhpov17</th>\n      <th>hhpov18</th>\n      <th>hhpov19</th>\n      <th>Shape__Area</th>\n      <th>Shape__Length</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>38358</td>\n      <td>-666666666</td>\n      <td>34219</td>\n      <td>40972</td>\n      <td>37143</td>\n      <td>24</td>\n      <td>510</td>\n      <td>271002</td>\n      <td>Greater Govans</td>\n      <td>20.0</td>\n      <td>21.32</td>\n      <td>19.27</td>\n      <td>19.53</td>\n      <td>17.99</td>\n      <td>20.50</td>\n      <td>2.27e+07</td>\n      <td>22982.13</td>\n      <td>POLYGON ((-76.59...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>44904</td>\n      <td>-666666666</td>\n      <td>51324</td>\n      <td>42083</td>\n      <td>37269</td>\n      <td>24</td>\n      <td>510</td>\n      <td>90100</td>\n      <td>Greater Govans</td>\n      <td>20.0</td>\n      <td>21.32</td>\n      <td>19.27</td>\n      <td>19.53</td>\n      <td>17.99</td>\n      <td>20.50</td>\n      <td>2.27e+07</td>\n      <td>22982.13</td>\n      <td>POLYGON ((-76.59...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>35707</td>\n      <td>2499</td>\n      <td>42292</td>\n      <td>37361</td>\n      <td>29191</td>\n      <td>24</td>\n      <td>510</td>\n      <td>271001</td>\n      <td>Greater Govans</td>\n      <td>20.0</td>\n      <td>21.32</td>\n      <td>19.27</td>\n      <td>19.53</td>\n      <td>17.99</td>\n      <td>20.50</td>\n      <td>2.27e+07</td>\n      <td>22982.13</td>\n      <td>POLYGON ((-76.59...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>42231</td>\n      <td>-666666666</td>\n      <td>46467</td>\n      <td>45484</td>\n      <td>18750</td>\n      <td>24</td>\n      <td>510</td>\n      <td>260402</td>\n      <td>Claremont/Armistead</td>\n      <td>9.0</td>\n      <td>21.27</td>\n      <td>23.59</td>\n      <td>24.00</td>\n      <td>24.64</td>\n      <td>23.88</td>\n      <td>6.12e+07</td>\n      <td>40104.42</td>\n      <td>POLYGON ((-76.52...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>31657</td>\n      <td>20800</td>\n      <td>26074</td>\n      <td>60959</td>\n      <td>37396</td>\n      <td>24</td>\n      <td>510</td>\n      <td>260403</td>\n      <td>Claremont/Armistead</td>\n      <td>9.0</td>\n      <td>21.27</td>\n      <td>23.59</td>\n      <td>24.00</td>\n      <td>24.64</td>\n      <td>23.88</td>\n      <td>6.12e+07</td>\n      <td>40104.42</td>\n      <td>POLYGON ((-76.52...</td>\n    </tr>\n  </tbody>\n</table>\n</div> <p>Here we can save the data so that it may be used in later tutorials. </p>\n # merged_df.to_csv(string+'.csv', encoding=\"utf-8\", index=False, quoting=csv.QUOTE_ALL) <h4 id=\"example-3-ran-alone\">Example 3: Ran Alone</h4>\n  ---Handling Left Dataset Options---\nGetting Data From:  False\nError: Try Again?  ( URL/ PATH or  'NO'/ <Empty> ) https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nGetting Data From:  https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nInvalid column given:  False\nIndex(['OBJECTID', 'CSA2010', 'hhchpov15', 'hhchpov16', 'hhchpov17',\n       'hhchpov18', 'hhchpov19', 'Shape__Area', 'Shape__Length', 'geometry'],\n      dtype='object')\nPlease enter a new column fom the list above.\nColumn Name: CSA2010\nLeft column: CSA2010\n\n---Handling Right Dataset Options---\nGetting Data From:  False\nError: Try Again?  ( URL/ PATH or  'NO'/ <Empty> ) https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nGetting Data From:  https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nInvalid column given:  False\nIndex(['OBJECTID', 'CSA2010', 'hhchpov15', 'hhchpov16', 'hhchpov17',\n       'hhchpov18', 'hhchpov19', 'Shape__Area', 'Shape__Length', 'geometry'],\n      dtype='object')\nPlease enter a new column fom the list above.\nColumn Name: CSA2010\nRight column: CSA2010\n\n---Ensuring Compatability Between merge_how (val: 'False') and the Right Dataset---\n\n Invalid merge column given. \n Please select a value from either list\n\n 1) Pull A single column from the right dataset:  Index(['OBJECTID', 'CSA2010', 'hhchpov15', 'hhchpov16', 'hhchpov17',\n       'hhchpov18', 'hhchpov19', 'Shape__Area', 'Shape__Length', 'geometry'],\n      dtype='object')\nOR \n 2) Specify a type of join operation: (‘left’, ‘right’, ‘outer’, ‘inner’, columnName) \nColumn Name: inner\nColumn or ['inner','left','right','outer'] value:  inner\n\n---Checking Crosswalk Dataset Options---\n\nProvide a Crosswalk? ( URL/ PATH or  'NO'/ <Empty>/ 'FALSE' ) \n\n---Casting Datatypes from-to: Left->Right Datasets---\nBefore Casting: \n-> Column One:  CSA2010 object\n-> Column Two:  CSA2010 object\n\n After Casting: \n-> Column One:  CSA2010 object\n-> Column Two:  CSA2010 object\n\n---All checks complete. Status:  True ---\n\n---PERFORMING MERGE : LEFT->RIGHT---\nColumn One :  CSA2010 object\nHow:  inner\nColumn Two :  CSA2010 object\n <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OBJECTID_x</th>\n      <th>CSA2010</th>\n      <th>hhchpov15_x</th>\n      <th>hhchpov16_x</th>\n      <th>hhchpov17_x</th>\n      <th>hhchpov18_x</th>\n      <th>hhchpov19_x</th>\n      <th>Shape__Area_x</th>\n      <th>Shape__Length_x</th>\n      <th>geometry_x</th>\n      <th>OBJECTID_y</th>\n      <th>hhchpov15_y</th>\n      <th>hhchpov16_y</th>\n      <th>hhchpov17_y</th>\n      <th>hhchpov18_y</th>\n      <th>hhchpov19_y</th>\n      <th>Shape__Area_y</th>\n      <th>Shape__Length_y</th>\n      <th>geometry_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Allendale/Irving...</td>\n      <td>38.93</td>\n      <td>34.73</td>\n      <td>32.77</td>\n      <td>35.27</td>\n      <td>32.6</td>\n      <td>6.38e+07</td>\n      <td>38770.17</td>\n      <td>POLYGON ((-76.65...</td>\n      <td>1</td>\n      <td>38.93</td>\n      <td>34.73</td>\n      <td>32.77</td>\n      <td>35.27</td>\n      <td>32.6</td>\n      <td>6.38e+07</td>\n      <td>38770.17</td>\n      <td>POLYGON ((-76.65...</td>\n    </tr>\n  </tbody>\n</table>\n</div>  ---Handling Left Dataset Options---\nGetting Data From:  False\nError: Try Again?  ( URL/ PATH or  'NO'/ <Empty> ) https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nGetting Data From:  https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nInvalid column given:  False\nIndex(['OBJECTID', 'CSA2010', 'hhchpov15', 'hhchpov16', 'hhchpov17',\n       'hhchpov18', 'hhchpov19', 'Shape__Area', 'Shape__Length', 'geometry'],\n      dtype='object')\nPlease enter a new column fom the list above.\nColumn Name: CSA2010\nLeft column: CSA2010\n\n---Handling Right Dataset Options---\nGetting Data From:  False\nError: Try Again?  ( URL/ PATH or  'NO'/ <Empty> ) https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nGetting Data From:  https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nInvalid column given:  False\nIndex(['OBJECTID', 'CSA2010', 'hhchpov15', 'hhchpov16', 'hhchpov17',\n       'hhchpov18', 'hhchpov19', 'Shape__Area', 'Shape__Length', 'geometry'],\n      dtype='object')\nPlease enter a new column fom the list above.\nColumn Name: CSA2010\nRight column: CSA2010\n\n---Ensuring Compatability Between merge_how (val: 'False') and the Right Dataset---\n\n Invalid merge column given. \n Please select a value from either list\n\n 1) Pull A single column from the right dataset:  Index(['OBJECTID', 'CSA2010', 'hhchpov15', 'hhchpov16', 'hhchpov17',\n       'hhchpov18', 'hhchpov19', 'Shape__Area', 'Shape__Length', 'geometry'],\n      dtype='object')\nOR \n 2) Specify a type of join operation: (‘left’, ‘right’, ‘outer’, ‘inner’, columnName) \nColumn Name: inner\nColumn or ['inner','left','right','outer'] value:  inner\n\n---Checking Crosswalk Dataset Options---\n\nProvide a Crosswalk? ( URL/ PATH or  'NO'/ <Empty>/ 'FALSE' ) https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nGetting Data From:  https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\nInvalid column given:  False\nIndex(['OBJECTID', 'CSA2010', 'hhchpov15', 'hhchpov16', 'hhchpov17',\n       'hhchpov18', 'hhchpov19', 'Shape__Area', 'Shape__Length', 'geometry'],\n      dtype='object')\nPlease enter a new column fom the list above.\nColumn Name: CSA2010\nInvalid column given:  False\nIndex(['OBJECTID', 'CSA2010', 'hhchpov15', 'hhchpov16', 'hhchpov17',\n       'hhchpov18', 'hhchpov19', 'Shape__Area', 'Shape__Length', 'geometry'],\n      dtype='object')\nPlease enter a new column fom the list above.\nColumn Name: CSA2010\ncrosswalk_left_col CSA2010\n\n---Casting Datatypes from-to: Left->Crosswalk Datasets---\nBefore Casting: \n-> Column One:  CSA2010 object\n-> Column Two:  CSA2010 object\n\n After Casting: \n-> Column One:  CSA2010 object\n-> Column Two:  CSA2010 object\n\n---Casting Datatypes from-to: Right->Crosswalk Datasets---\nBefore Casting: \n-> Column One:  CSA2010 object\n-> Column Two:  CSA2010 object\n\n After Casting: \n-> Column One:  CSA2010 object\n-> Column Two:  CSA2010 object\n\n---All checks complete. Status:  True ---\n\n---PERFORMING MERGE : LEFT->CROSSWALK---\nColumn One :  CSA2010 object\nHow:  CSA2010\nColumn Two :  CSA2010 object\n---PERFORMING MERGE : LEFT->RIGHT---\nColumn One :  CSA2010 object\nHow:  inner\nColumn Two :  CSA2010 object\n <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OBJECTID_x</th>\n      <th>CSA2010</th>\n      <th>hhchpov15_x</th>\n      <th>hhchpov16_x</th>\n      <th>hhchpov17_x</th>\n      <th>hhchpov18_x</th>\n      <th>hhchpov19_x</th>\n      <th>Shape__Area_x</th>\n      <th>Shape__Length_x</th>\n      <th>geometry_x</th>\n      <th>OBJECTID_y</th>\n      <th>hhchpov15_y</th>\n      <th>hhchpov16_y</th>\n      <th>hhchpov17_y</th>\n      <th>hhchpov18_y</th>\n      <th>hhchpov19_y</th>\n      <th>Shape__Area_y</th>\n      <th>Shape__Length_y</th>\n      <th>geometry_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Allendale/Irving...</td>\n      <td>38.93</td>\n      <td>34.73</td>\n      <td>32.77</td>\n      <td>35.27</td>\n      <td>32.6</td>\n      <td>6.38e+07</td>\n      <td>38770.17</td>\n      <td>POLYGON ((-76.65...</td>\n      <td>1</td>\n      <td>38.93</td>\n      <td>34.73</td>\n      <td>32.77</td>\n      <td>35.27</td>\n      <td>32.6</td>\n      <td>6.38e+07</td>\n      <td>38770.17</td>\n      <td>POLYGON ((-76.65...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}