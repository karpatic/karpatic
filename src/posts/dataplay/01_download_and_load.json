{"meta":{"title":"Importing Data","summary":"Creating and Testing the Python Intake Class with Pandas and Geopandas support.","toc":"true","prettify":"true","default_exp":"intaker","audio":"https://charleskarpati.com/audio/01_download_and_load.mp3","filename":"01_download_and_load"},"content":"<p><a href=\"https://mybinder.org/v2/gh/bnia/dataplay/main?filepath=%2Fnotebooks%2F01_Download_and_Load.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://colab.research.google.com/github/bnia/dataplay/blob/main/notebooks/01_Download_and_Load.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/bnia/dataplay/tree/main/notebooks/01_Download_and_Load.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/ellerbrock/open-source-badges/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a>\n <br>\n <a href=\"https://github.com/bnia/dataplay/blob/main/LICENSE\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://bnia.github.io\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a> \n <a href=\"https://pypi.python.org/pypi/dataplay/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/pypi/pyversions/dataplay.svg\" alt=\"Python Versions\"></a>\n <a href=\"\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/bnia/dataplay.svg?style=flat\" alt=\"GitHub last commit\"></a><br> <br>\n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/bnia/dataplay.svg?style=social&label=Star\" alt=\"GitHub stars\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/bnia/dataplay.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/bnia/dataplay.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/bnia.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a> \n <br>\n <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20%E2%9C%A8%20colab%20by%20@bniajfi%20https://github.com/bnia/dataplay%20%F0%9F%A4%97\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/url/https/github.com/bnia/dataplay.svg?style=social\" alt=\"Tweet\"></a> \n <a href=\"https://twitter.com/bniajfi\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/follow/bniajfi.svg?style=social\" alt=\"Twitter Follow\"></a></p>\n <details open>\n <summary> <h2>About:</h2>\n </summary> <h3>Whats inside?</h3>\n <p>In this notebook, we build and test a basic data-intaker.</p>\n<ul>\n<li><p>A .CSV file will be loaded into pandas</p></li>\n<li><p>We will import geospatial data from Esri then load this data into geo-pandas.</p></li>\n</ul>\n </details>\n <details open>\n <summary> <h2>The Function</h2>\n </summary> <pre>  Help on module dataplay.intaker in dataplay:\n\nNAME\n    dataplay.intaker\n\nCLASSES\n    builtins.object\n        Intake\n    \n    class Intake(builtins.object)\n     |  # The intaker class retrieves data into a pandas dataframe.\n     |  # Can read in a CSV URL but uses dataplay.geom.readInGeometryData() for Geojson endpoints.\n     |  # Otherwise this tool assumes shp or pgeojson files have geom='geometry', in_crs=2248. \n     |  # Depending on interactivity the values should be \n     |  # coerce fillna(-1321321321321325)\n     |  \n     |  Methods defined here:\n     |  \n     |  checkColumn(dataset, column)\n     |      # a2. Returns Bool\n     |  \n     |  coerce(ds1, ds2, col1, col2, interactive)\n     |      # b1. Used by Merge Lib. Returns Both Datasets and Coerce Status\n     |  \n     |  coerceDtypes(isNum, dt, ds, col, interactive)\n     |  \n     |  getAndCheck(url, col='geometry', interactive=False)\n     |      # a1. Used by Merge Lib. Returns valid (df, column) or (df, False) or (False, False).\n     |  \n     |  getAndCheckColumn(df, col, interactive)\n     |      # a3. Returns False or col. Interactive calls self\n     |  \n     |  getData(url, interactive=False)\n     |      # 1. Recursively calls self/getData until something valid is given.\n     |      #    Returns df or False. Calls readInGeometryData. or pulls csv directly.\n     |      # Returns df or False.\n     |  \n     |  getdTypeAndFillNum(ds, col, interactive)\n     |  \n     |  isPandas(df)\n     |      # 1ai. A misnomer. Returns Bool.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\nFILE\n    c:\\users\\charl\\documents\\github\\karpatic\\src\\ipynb\\dataplay\\dataplay\\intaker.py\n\n\n <p></pre></p>\n       </details>\n <details open>\n <summary> <h2>Try it</h2>\n </summary>    <a src='$C:/Users/charl/Documents/GitHub/karpatic/src/ipynb/dataplay/tracts_data.csv'>Link</a>\n  <p>And the same thing works without a url</p>\n  <a src='$https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson'>Link</a>\n  <p>Using Esri and the Geoms handler directly:</p>\n   <a src='$https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson'>Link</a>\n   <p>Again but with the Intake class:</p>\n  <a src='$https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Geoloom_Crowd/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson'>Link</a>\n  <p>This getAndCheck function is useful for checking for a required field.</p>\n  <a src='$https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson'>Link</a>\n    <p>We could also retrieve from a file.</p>\n  </details>\n  <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}