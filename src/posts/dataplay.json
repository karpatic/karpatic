{"meta":{"filename":"dataplay","title":"Dataplay: The Data Handling Handbook and Python Library","summary":"Our one stop shop to learn about data intake, processing, and visualization.","tab":"00_dataplay","prettify":"true"},"content":"<img align=\"right\" src=\"https://raw.githubusercontent.com/bniajfi/bniajfi/main/bnia_logo_new.png\" style=\"height:160px;width:auto;\">\n \n <h2 align=\"left\"><img src=\"https://raw.githubusercontent.com/sidbelbase/sidbelbase/master/wave.gif\" style=\"width:30px\">Hi! We are <a href=\"https://bniajfi.org/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">BNIA-JFI</a>.</h2>\n \n<p> This package was made to help with data handling</p>\n<p> <strong>Included</strong></p>\n<ul>\n<li><div>Functions built and used by BNIA for day to day tasks.</div></li>\n<li><div>Made to be shared via IPYNB/ Google Colab notebooks with in-built examples using 100% publicly accessible data &amp; links.</div></li>\n<li><div>Online <a href=\"https://bniajfi.org/dataplay/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">documentation</a>  and <a href=\"https://pypi.org/project/dataplay/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">PyPi</a> libraries created from the notebooks.</div></li>\n</ul>\n <h2 id=\"about-this-tutorial\">About this Tutorial:</h2>\n <p>You use can use these docs to learn from or as documentation when using the attached library.</p>\n <h3 id=\"tips\">TIPS</h3>\n <ul>\n<li><div>Content covered in previous tutorials will be used in later tutorials. </div></li>\n<li><div><strong>New code and or  information <em>should</em> have explanations and or descriptions</strong> attached. </div></li>\n<li><div>Concepts or code covered in previous tutorials will be used without being explaining in entirety.</div></li>\n<li><div><strong>If content can not be found in the current tutorial and is not covered in previous tutorials, please let me know.</strong></div></li>\n<li><div>This notebook has been optimized for Google Colabs ran on a Chrome Browser. </div></li>\n<li><div>Statements found in the index page on view expressed, responsibility, errors and ommissions, use at risk, and licensing  extend throughout the tutorial.</div></li>\n</ul>\n <h3 id=\"objectives\">Objectives</h3>\n <p>By the end of this tutorial users should have an understanding of:</p>\n<ul>\n<li><div>Importing data with pandas and geopandas</div></li>\n<li><div>Querying data from Esri</div></li>\n<li><div>Retrieveing data programmatically</div></li>\n<li><div>This module assumes the data needs no handling prior to intake</div></li>\n<li><div>Loading data in a variety of formats</div></li>\n<li><div>Visualizing said data</div></li>\n</ul>\n <details>\n <summary> <h2 id=\"usage-instructions\">Usage Instructions</h2>\n </summary> <details>\n <summary> <h3 id=\"install-the-package\">Install the Package</h3>\n </summary> <p>The code is on <a href=\"https://pypi.org/project/test-template/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">PyPI</a> so you can install the scripts as a python library using the command:</p>\n<p> <code>!pip install dataplay geopandas</code></p>\n <blockquote>\n<p>Important: Contributers should follow the maintanance instructions and will not need to run this step. </p>\n<p>Their modules will be retrieved from the VitalSigns-GDrive repo they have mounted into their Colabs Enviornment. </p>\n</blockquote>\n  <p>Then...</p>\n </details>\n <details>\n <summary> <h3 id=\"import-modules\">Import Modules</h3>\n </summary> <ol>\n<li><div>Import the installed module into your code:</div></li>\n</ol>\n<pre class='prettyprint'>from VitalSigns.acsDownload import retrieve_acs_data \n</pre>\n<ol start=\"2\">\n<li><div>use it</div></li>\n</ol>\n<pre class='prettyprint'>retrieve_acs_data(state, county, tract, tableId, year, saveAcs)\n</pre>\n<p> Now you could do something like merge it to another dataset! </p>\n<pre class='prettyprint'>from dataplay.merge import mergeDatasets\nmergeDatasets(left_ds=False, right_ds=False, crosswalk_ds=False,  use_crosswalk = True, left_col=False, right_col=False, crosswalk_left_col = False, crosswalk_right_col = False, merge_how=False, interactive=True)\n</pre>\n </details>\n <details>\n <summary> <h3 id=\"getting-help\">Getting Help</h3>\n </summary> <p>You can get information on the package, modules, and methods by using the help command.</p>\n <p>Here we look at the package&#39;s modules:</p>\n <pre class='prettyprint'>help(dataplay)</pre> Help on package dataplay:\n\nNAME\n    dataplay\n\nPACKAGE CONTENTS\n    _nbdev\n    corr\n    geoms\n    gifmap\n    html\n    intaker\n    merge\n\nVERSION\n    0.0.37\n\nFILE\n    c:\\python311\\lib\\site-packages\\dataplay\\__init__.py\n\n\n <p>Lets take a look at what functions the geoms module provides:</p>\n <pre class='prettyprint'>help(dataplay.geoms)</pre> Help on module dataplay.geoms in dataplay:\n\nNAME\n    dataplay.geoms - # AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/03_Map_Basics_Intake_and_Operations.ipynb (unless otherwise specified).\n\nFUNCTIONS\n    map_points(data, lat_col='POINT_Y', lon_col='POINT_X', zoom_start=11, plot_points=True, cluster_points=False, pt_radius=15, draw_heatmap=False, heat_map_weights_col=None, heat_map_weights_normalize=True, heat_map_radius=15, popup=False)\n        Creates a map given a dataframe of points. Can also produce a heatmap overlay\n        \n        Arg:\n            df: dataframe containing points to maps\n            lat_col: Column containing latitude (string)\n            lon_col: Column containing longitude (string)\n            zoom_start: Integer representing the initial zoom of the map\n            plot_points: Add points to map (boolean)\n            pt_radius: Size of each point\n            draw_heatmap: Add heatmap to map (boolean)\n            heat_map_weights_col: Column containing heatmap weights\n            heat_map_weights_normalize: Normalize heatmap weights (boolean)\n            heat_map_radius: Size of heatmap point\n        \n        Returns:\n            folium map object\n    \n    readInGeometryData(url=False, porg=False, geom=False, lat=False, lng=False, revgeocode=False, save=False, in_crs=4326, out_crs=False)\n        # reverseGeoCode, readFile, getGeoParams, main\n    \n    workWithGeometryData(method=False, df=False, polys=False, ptsCoordCol=False, polygonsCoordCol=False, polyColorCol=False, polygonsLabel='polyOnPoint', pntsClr='red', polysClr='white', interactive=False)\n        # Cell\n        #\n        # Work With Geometry Data\n        # Description: geomSummary, getPointsInPolygons, getPolygonOnPoints, mapPointsInPolygons, getCentroids\n\nDATA\n    __all__ = ['workWithGeometryData', 'readInGeometryData', 'map_points']\n\nFILE\n    c:\\python311\\lib\\site-packages\\dataplay\\geoms.py\n\n\n <p>And here we can look at an individual function and what it expects:</p>\n <pre class='prettyprint'>help(VitalSigns.acsDownload.retrieve_acs_data)</pre>  </details>\n </details>\n <details>\n <summary> <h2 id=\"examples\">Examples</h2>\n </summary> <p>So heres an example:</p>\n<p> Import your modules</p>\n <p>Read in some data</p>\n <p>Define our download parameters.</p>\n<p> More information on these parameters can be found in the tutorials!</p>\n <pre class='prettyprint'>county = '510'\n state = '24'\n tableId = 'B19001'\n year = '17'\n saveAcs = False</pre> <p>And download the Baltimore City ACS data using the imported VitalSigns library.</p>\n <p>Here we can import and display a geospatial dataset with special intake requirements.</p>\n <p>Here we pull a list of Baltimore Cities CSA&#39;s</p>\n <p>Now in this example we will load in a bunch of coorinates</p>\n <pre class='prettyprint'>geoloom_gdf = dataplay.geoms.readInGeometryData(url=geoloom_gdf_url, porg=False, geom='geometry', lat=False, lng=False, revgeocode=False,  save=False, in_crs=4326, out_crs=False)\n geoloom_gdf = geoloom_gdf.dropna(subset=['geometry'])\n # geoloom_gdf = geoloom_gdf.drop(columns=['POINT_X','POINT_Y'])\n geoloom_gdf.head(1)</pre> <p>And here we get the number of <strong>points</strong> <strong>in</strong> each of our corresponding CSAs (<strong>polygons</strong>)</p>\n <p>And we plot it with a legend</p>\n <p>What were to happen if I wanted to create a interactive click map with the label of each csa (<strong>polygon</strong>) <strong>on</strong> each <strong>point</strong>?</p>\n <p>Well we just run the reverse operation!</p>\n <p>And then we can visualize it like:</p>\n <pre class='prettyprint'>               pt_radius=1, draw_heatmap=True, heat_map_weights_col=None, heat_map_weights_normalize=True,\n                heat_map_radius=15, popup='CSA2010')</pre> <p>These interactive visualizations can be exported to html using a tool found later in this document. </p>\n<p> Its how I made this page!</p>\n <p>If you like what you see, there is more in the package you will just have to explore. </p>\n </details>\n  <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}