{"meta":{"title":"Map Gifs","summary":"In this tutorial, the basics of creating map gifs is introduced","toc":"true","prettify":"true","default_exp gifma":"default_exp gifmap","filename":"06_timelapse_data_gifs"},"content":"<p><a href=\"https://mybinder.org/v2/gh/bnia/dataplay/main?filepath=%2Fnotebooks%2F05_Map_Correlation_Networks.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://colab.research.google.com/github/bnia/dataplay/blob/main/notebooks/05_Map_Correlation_Networks.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/bnia/dataplay/tree/main/notebooks/05_Map_Correlation_Networks.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/ellerbrock/open-source-badges/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a></p>\n<p> <a href=\"https://github.com/bnia/dataplay/blob/main/LICENSE\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://bnia.github.io\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a> \n <a href=\"https://pypi.python.org/pypi/dataplay/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/pypi/pyversions/dataplay.svg\" alt=\"Python Versions\"></a>\n <a href=\"\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/bnia/dataplay.svg?style=flat\" alt=\"GitHub last commit\"></a>  </p>\n<p> <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/bnia/dataplay.svg?style=social&label=Star\" alt=\"GitHub stars\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/bnia/dataplay.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/bnia/dataplay.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a> \n <a href=\"https://github.com/bnia/dataplay\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/bnia.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a> </p>\n<p> <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20%E2%9C%A8%20colab%20by%20@bniajfi%20https://github.com/bnia/dataplay%20%F0%9F%A4%97\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/url/https/github.com/bnia/dataplay.svg?style=social\" alt=\"Tweet\"></a> \n <a href=\"https://twitter.com/bniajfi\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/follow/bniajfi.svg?style=social\" alt=\"Twitter Follow\"></a></p>\n <details open>\n <summary> <h2 id=\"about-this-tutorial\">About this Tutorial:</h2>\n </summary> <p><strong>Description:</strong> This notebook was made to demonstrate how to make a gif map by merging 2 datasets. The first being a dataset containing mappable coordinates onto which the second dataset may mapping its information of interest. </p>\n<p> This lab is split into two sections. </p>\n<ul>\n<li><p>The first part of this lab provides help you understand the basics operations.</p></li>\n<li><p>The second part of this notebook provides a single python function that handles everything covered in this lab (and more).</p></li>\n</ul>\n<p> <strong>Input(s):</strong> </p>\n<ul>\n<li><p>Dataset (points/ bounds) url</p></li>\n<li><p>Points/ bounds geometry column(s)</p></li>\n<li><p>Points/ bounds crs&#39;s</p></li>\n<li><p>Points/ bounds mapping color(s)</p></li>\n<li><p>New filename</p></li>\n</ul>\n<p> <strong>Output:</strong> Files, Gif</p>\n<p> <strong>*please note</strong></p>\n<ul>\n<li><p>This lab in particular makes heavy use of data that is not publicly accessible. Later labs use functions created here on public data. </p></li>\n<li><p>A table of contents is provided in the menu to the left.</p></li>\n<li><p>And, that this notebook has been optimized for Google Colabs ran on a Chrome Browser. </p></li>\n<li><p>While still fully usable, non-critical section of code (eg. Python Magics and HTML) may break if used in a different enviornment.</p></li>\n</ul>\n </details>\n <details>\n <summary> <h2 id=\"setup\">SETUP</h2>\n </summary> <h3 id=\"import-modules\">Import Modules</h3>\n <pre class='prettyprint'>#@title Run This Cell: Install Modules\n %%capture\n !pip install geopandas\n !pip install VitalSigns</pre> <pre class='prettyprint'>import numpy as np\n import pandas as pd</pre> <pre class='prettyprint'>from dataplay import merge\n from dataplay import intaker\n from VitalSigns import acsDownload</pre> <pre class='prettyprint'># hide\n import ipywidgets as widgets\n !jupyter nbextension enable --py widgetsnbextension\n %matplotlib inline</pre> <pre class='prettyprint'>#@title Run This Cell: Import Modules\n \n # Once installed we need to import and configure the Widgets\n from IPython.core.interactiveshell import InteractiveShell\n InteractiveShell.ast_node_interactivity = 'all'\n import ipywidgets as widgets\n from ipywidgets import interact, interact_manual\n \n # Used 4 Importing Data\n import urllib.request as urllib\n from urllib.parse import urlencode\n # This Prevents Timeouts when Importing\n import socket\n socket.setdefaulttimeout(10.0)\n \n # Pandas Data Manipulation Libraries\n import pandas as pd\n # Show entire column widths\n pd.set_option('display.max_colwidth', -1)\n # 4 Working with Json Data\n import json\n # 4 Data Processing\n import numpy as np\n # 4 Reading Json Data into Pandas\n from pandas.io.json import json_normalize\n \n # 4 exporting data as CSV\n import csv\n \n from VitalSigns.acsDownload import retrieve_acs_data\n \n from dataplay.merge import mergeDatasets\n \n from dataplay.geoms import readInGeometryData\n from dataplay.geoms import map_points\n from dataplay.geoms import workWithGeometryData\n \n # Geo-Formatting\n # Postgres-Conversion\n import geopandas as gpd\n import psycopg2,pandas,numpy\n from shapely import wkb\n import os\n import sys\n \n # In case file is KML\n import fiona\n fiona.drvsupport.supported_drivers['kml'] = 'rw' # enable KML support which is disabled by default\n fiona.drvsupport.supported_drivers['KML'] = 'rw' # enable KML support which is disabled by default\n \n # https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2010.html\n # https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2010&layergroup=Census+Tracts\n \n from geopandas import GeoDataFrame\n \n from shapely.wkt import loads\n from pandas import ExcelWriter\n from pandas import ExcelFile\n \n # load libraries\n import pandas as pd\n import numpy as np\n import matplotlib.pyplot as plt\n import geopandas as gpd\n import glob\n \n # Gif\n import imageio\n \n # Pictures\n from PIL import Image\n import requests\n from io import BytesIO</pre> <h3 id=\"configure-enviornment\">Configure Enviornment</h3>\n <pre class='prettyprint'># This will just beautify the output\n \n pd.set_option('display.expand_frame_repr', False)\n pd.set_option('display.precision', 2)\n from IPython.core.interactiveshell import InteractiveShell\n InteractiveShell.ast_node_interactivity = \"all\"\n \n # pd.set_option('display.expand_frame_repr', False)\n # pd.set_option('display.precision', 2)\n # pd.reset_option('max_colwidth')\n pd.set_option('max_colwidth', 20)\n # pd.reset_option('max_colwidth')</pre> <h3 id=\"conveince-functions\">Conveince Functions</h3>\n <pre class='prettyprint'>#@title Run This Cell: Misc Function Declarations\n # These functions right here are used in the calculations below.\n # Finds a column matchings a substring\n def getColName  (df, col): return df.columns[df.columns.str.contains(pat = col)][0]\n def getColByName (df, col): return df[getColName(df, col)]\n \n # Pulls a column from one dataset into a new dataset.\n # This is not a crosswalk. calls getColByName()\n def addKey(df, fi, col):\n     key = getColName(df, col)\n     val = getColByName(df, col)\n     fi[key] = val\n     return fi\n # Return 0 if two specified columns are equal.\n def nullIfEqual(df, c1, c2):\n     return df.apply(lambda x:\n         x[getColName(df, c1)]+x[getColName(df, c2)] if x[getColName(df, c1)]+x[getColName(df, c2)] != 0 else 0, axis=1)\n # I'm thinking this doesnt need to be a function..\n def sumInts(df): return df.sum(numeric_only=True)</pre> <p>This next function was created in previous colabs. We are going to recycle it for use in this lab</p>\n </details>\n <details>\n <summary> <h2 id=\"retrieve-gis-data\">Retrieve GIS Data</h2>\n </summary> <pre class='prettyprint'>regexMatchingColumnsToMakeTheGifWith = 'hhchpov'</pre> <h3 id=\"import-data-of-interest-hhchpov\">Import Data of Interest: (HHCHPOV)</h3>\n <pre class='prettyprint'># This dataset is taken from the public database provided by BNIAJFI hosted by Esri / ArcGIS\n # BNIA ArcGIS Homepage: https://data-bniajfi.opendata.arcgis.com/\n final = intaker.Intake.getData(\"https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/\"+regexMatchingColumnsToMakeTheGifWith.capitalize()+\"/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson\")[['CSA2010', 'hhchpov15', 'hhchpov16', 'hhchpov17', 'hhchpov18', 'hhchpov19', 'geometry']]\n final.head(1)</pre> <pre class='prettyprint'>final.head(1)</pre> <pre class='prettyprint'>final.plot(column='hhchpov15')</pre> </details>\n <details>\n <summary> <h2 id=\"mapping\">MAPPING</h2>\n </summary> <p>Fantastic! </p>\n<p> Your data is all together in a single dataset.</p>\n<p> now what?</p>\n<p> First lets take the centerpoint of each geometry. This will be where we place text on the each geometry.</p>\n <pre class='prettyprint'>final['centroid'] = final['geometry'].representative_point()</pre> </details>\n <details>\n <summary> <h2 id=\"lets-make-a-gif\">Lets make a GIF</h2>\n </summary> <pre class='prettyprint'>pd.set_option('precision', 0)\n fileNames = []\n labelBounds = True\n specialLabelCol = False # Labels on GEOM Centroids\n saveGifAs = './test.gif'\n label = 'Household Poverty'\n annotation = 'Source: Maryland Vital Statistics; Analysis by: Baltimore Neighborhood Indicators Alliance' \n fontsize='22'</pre> <p>Data was successfully merged across all years and geometry.</p>\n<p> Now we want the tractname, geometry, and the specific column we want to make a gif from.</p>\n <pre class='prettyprint'># Get only the results tab\n td = final.copy()\n td = td.reindex(sorted(td.columns), axis=1)</pre> <pre class='prettyprint'># Coerce columns stored as floats into integers. \n # This will ensure numbers are rounded to whole digits when displaying the reults\n \n gifCols = td.filter(regex=regexMatchingColumnsToMakeTheGifWith).columns.values\n \n td[gifCols] = td[gifCols].fillna(-1)\n td[gifCols] = td[gifCols].astype('int32')\n td.head()</pre> <p>Data exploration is essential! But not covered in this lab.</p>\n <pre class='prettyprint'>td.filter(regex=regexMatchingColumnsToMakeTheGifWith).hist()</pre> <p>Everything is almost ready to start making our gifmap!</p>\n<p> Lets just get the minimum and maximum values so that our color ramp will have consistent values on each picture.</p>\n <pre class='prettyprint'># Get Min Max\n mins = []\n maxs = []\n for col in td.filter(regex=regexMatchingColumnsToMakeTheGifWith).columns:\n   mins.append(td[col].min())\n   maxs.append(td[col].max())\n print(mins, maxs)\n \n # set the min and max range for the choropleth map\n vmin, vmax = min(mins), max(maxs)\n print('Smallest Value: ', vmin, ', Max Value:', vmax)</pre> <pre class='prettyprint'>merged = td.copy()</pre> <pre class='prettyprint'># For each column\n for indx, col in enumerate(merged.filter(regex=\"hhchpov\").columns):\n     print('INDEX', indx)\n     print('Col: '+str(col) )\n     image_name = col+'.jpg'\n     fileNames.append(image_name)\n \n     # create map, UDPATE: added plt.Normalize to keep the legend range the same for all maps\n     fig = merged.plot(column=col, cmap='Blues', figsize=(10,10), \n         linewidth=0.8, edgecolor='0.8', vmin=vmin, vmax=vmax,\n         legend=True, norm=plt.Normalize(vmin=vmin, vmax=vmax) \n     )\n     \n     # https://stackoverflow.com/questions/38899190/geopandas-label-polygons\n     if labelBounds:\n       labelColumn = col\n       if specialLabelCol: labelColumn = specialLabelCol\n       merged.apply(lambda x: fig.annotate(s=x[labelColumn], xy=x.geometry.centroid.coords[0], ha='center'),axis=1);\n     \n     # remove axis off chart and set title\n     fig.axis('off')\n     fig.set_title(str(col.replace(\"hhchpov\", \"Houshold Childhood Poverty 20\")), fontdict={'fontsize': fontsize, 'fontweight' : '3'})\n     \n     # create an annotation for the  data source\n     fig.annotate(annotation,\n             xy=(0.1, .08), xycoords='figure fraction',\n             horizontalalignment='left', verticalalignment='top',\n             fontsize=10, color='#555555')\n     \n     # this will save the figure as a high-res png in the output path. you can also save as svg if you prefer.\n     # filepath = os.path.join(output_path, image_name)\n     chart = fig.get_figure()\n     # fig.savefig(“map_export.png”, dpi=300)\n     chart.savefig(image_name, dpi=300)\n     plt.close(chart)\n         \n images = []\n for filename in fileNames:\n     images.append(imageio.imread(filename))\n imageio.mimsave(saveGifAs, images, fps=.5)\n \n \n # This will print out a picture of each picture in the gifmap.\n from PIL import Image\n import requests\n from io import BytesIO\n for filename in fileNames:\n     img = Image.open(filename) \n     size = 328, 328\n     img.thumbnail(size, Image.ANTIALIAS)\n     img</pre> </details>\n <details>\n <summary> <h2 id=\"final-result\">Final Result</h2>\n </summary> <pre class='prettyprint'>import geopandas as gpd\n import numpy as np\n import pandas as pd\n from dataplay import geoms\n \n # Gif\n import imageio\n \n # Pictures\n from PIL import Image\n import requests\n from io import BytesIO</pre> <pre class='prettyprint'>def getMinMax(df):\n   mins = df.min().values\n   maxs = df.max().values\n   print(\"Min&Max: \", mins, maxs)\n   return [mins, maxs]</pre> <pre class='prettyprint'>def getAbsMinMax(df):\n   # Get Min Max\n   mins, maxs = getMinMax(df)\n   return [min(mins), max(maxs)]</pre> <pre class='prettyprint'>def createGif(fileNames, saveGifAs, images):\n   print(\"CREATING GIF\")\n   # This will print out a picture of each picture in the gifmap as well.\n   for filename in fileNames:\n       # images.append(imageio.imread(filename))\n       img = Image.open(filename)\n       size = 328, 328\n       img.thumbnail(size, Image.ANTIALIAS)\n       print(img)\n   imageio.mimsave(saveGifAs, images, fps=.5)\n   print(\"GIF CREATED\")</pre> <pre class='prettyprint'>def createPicture(df, col, vmin, vmax, labelBounds, title, annotation, fontsize):\n     print( '~~~~~~~~~~~~~~~~ \\r\\n createPicture for: ', 'Col: '+str(col))\n \n     # create map, UDPATE: added plt.Normalize to keep the legend range the same for all maps\n     fig = df.plot(column=col, cmap='Blues', figsize=(10,10),\n       linewidth=0.8, edgecolor='0.8', vmin=vmin, vmax=vmax,\n       legend=True, norm=plt.Normalize(vmin=vmin, vmax=vmax)\n     )\n \n     if labelBounds:\n       if type(True) == type(labelBounds): labelBounds = col\n       print('Adding Label: ', labelBounds)\n       df.apply(lambda x: fig.annotate(s=x[labelBounds], xy=x['geometry'].centroid.coords[0], ha='center') if x.geometry else False ,axis=1);\n     # remove axis off chart and set title\n     fig.axis('off')\n \n     print('Setting Title: ', title)\n     fig.set_title(str(col.replace(\"final\", title)), fontdict={'fontsize': fontsize, 'fontweight' : '3'})\n \n     print('Setting Data-Source Annotation: ', annotation)\n     fig.annotate(annotation, xy=(0.1, .08), xycoords='figure fraction', horizontalalignment='left', verticalalignment='top', fontsize=10, color='#555555')\n \n     # this will save the figure as a high-res png in the output path. you can also save as svg if you prefer.\n     # filepath = os.path.join(output_path, image_name)\n     print('Get Figure: ')\n     chart = fig.get_figure()\n     # fig.savefig(“map_export.png”, dpi=300)\n     print('Save Figure: ')\n     chart.savefig( str(col)+\".png\" , dpi=300)\n     print('Saved & Finished.')\n     plt.close(chart)\n \n     return ''</pre> <pre class='prettyprint'>def createGifMap(df, saveGifAs, labelBounds, title, annotation, fontsize):\n   # set the min and max range for the choropleth map\n   print('createGifMap')\n   vmin, vmax = getAbsMinMax( df.filter(regex=\"final\") )\n \n   print('Creating Pictures')\n   fileNames = []\n   images = []\n   # For each column\n   for indx, col in enumerate( df.filter( regex=\"final\").columns ):\n     createPicture(df, col, vmin, vmax, labelBounds, title, annotation, fontsize)\n     print('Adding to images list')\n     images.append(imageio.imread(str(col)+\".png\"))\n   print( '~~~~~~~~~~~~~~~~ \\r\\n Saving images to !')\n \n   createGif(fileNames, saveGifAs, images)</pre> <pre class='prettyprint'># Our download function will use Baltimore City's tract, county and state as internal paramters\n # Change these values in the cell below using different geographic reference codes will change those parameters\n \n # Group By Crosswalked column. Included automatically in final result\n # Do Not Group, Include the Crosswalked Column in the final result \n # Create the trav45 Indicator \n \n state = '24'\n county = '510'\n tract = '*'\n # Specify the download parameters the acs download function will receieve here\n year = '19'\n years = ['17', '16', '15']\n tableId = 'B08303' \n saveAcs = True\n \n # Crosswalk Table \n cwUrl = 'CSA-to-Tract-2010.csv'\n cw_left_col = 'tract'\n cw_right_col= 'TRACTCE10' \n merge_how= 'CSA2010'\n saveCrosswalked = True\n crosswalkedFileName = False\n \n groupBy = False # 'CSA2010'\n aggMethod = 'sum'\n columnsToInclude = ['CSA2010']\n \n finalFileName = './trav45_20'+year+'_tracts_26July2019.csv' \n # Alternatively - groupBy = False & columnsToInclude = ['CSA2010']\n \n \n # This lower half is to merge to the geom\n from dataplay import merge \n \n # Secondary Table \n right_ds = 'https://services1.arcgis.com/mVFRs7NF4iFitgbY/ArcGIS/rest/services/Hhchpov/FeatureServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=pgeojson'\n right_col ='CSA2010'\n \n interactive = True\n merge_how = 'outer'</pre> <pre class='prettyprint'>saveGifAs = './test.gif'\n labelBounds = False # 'CSA2010'\n annotation = 'Source: Baltimore Neighborhood Indicators Alliance' \n title = 'Indicator Name' \n fontsize='22'</pre> <pre class='prettyprint'>import re \n td = td.rename(columns=lambda x: re.sub('biz1_','final',x))</pre> <pre class='prettyprint'># Get only the results tab\n td = td.filter(regex=\"final|CSA2010|tract|geometry\")\n td = td.reindex(sorted(td.columns), axis=1) </pre> <pre class='prettyprint'>t = \"\"\" \"\"\"\n !pip install nbdev\n from google.colab import drive\n drive.mount('/content/drive')\n %cd /content/drive/My Drive/'Software Development Documents'/dataplay/\n \n # !pip install dataplay</pre> </details>\n  <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}