{"meta":{"title":"NB2HTML TEST","summary":"This is a test colab publication.","prettify":"true","toc":"true","description":"this isnt working","image":"images/company_logo.png","keywords":"thisworks","badges":"true","comments":"true","categories":"[test]","metadata_key1":"metadata_value1","metadata_key2":"metadata_value2","filename":"01_nb_2_html_tests"},"content":"<h2 id=\"welcome-to-my-test-page-\">Welcome to my test page! <i class=\"fas fa-adjust\"></i></h2>\n <br>\n \n<p> <a href=\"https://mybinder.org/v2/gh/bnia/datalabs/main?filepath=%2Fnotebooks%2F07_nb_2_html_tests.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://colab.research.google.com/github/bnia/datalabs/blob/main/notebooks/07_nb_2_html_tests.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/bnia/datalabs/tree/main/notebooks/07_nb_2_html_tests.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/ellerbrock/open-source-badges/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a>\n <br>\n <a href=\"https://github.com/bnia/datalabs/blob/main/LICENSE\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://bnia.github.io\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a>\n <a href=\"\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/bnia/datalabs.svg?style=flat\" alt=\"GitHub last commit\"></a>  </p>\n<p> <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/bnia/datalabs.svg?style=social&label=Star\" alt=\"GitHub stars\"></a>\n <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/bnia/datalabs.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a>\n <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/bnia/datalabs.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a>\n <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/bnia.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a>\n <br>\n <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20%E2%9C%A8%20colab%20by%20@bniajfi%20https://github.com/bnia/datalabs%20%F0%9F%A4%97\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/url/https/github.com/bnia/datalabs.svg?style=social\" alt=\"Tweet\"></a>\n <a href=\"https://twitter.com/bniajfi\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/follow/bniajfi.svg?style=social\" alt=\"Twitter Follow\"></a></p>\n <p>It was made with a colab .ipynb doc and a script I wrote to transform it into an html-page! Inspired by <a href=\"http://nbdev.fast.ai/tutorial/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">nbdev</a> and <a href=\"https://nbconvert.readthedocs.io/en/latest/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">nbConvert</a></p>\n <style>\n .shapedImage {\n   float: left;\n   width: 250px;\n   shape-outside: url(https://interactive-examples.mdn.mozilla.net/media/examples/round-balloon.png);\n   shape-margin:20px;\n   margin-right: 20px;\n   margin-bottom: 20px;\n   padding-top: 30px;\n }\n .shapedImage + p::first-letter {\n   font-size: 1.5rem;\n   font-weight: bold;\n   color: brown;\n }\n </style> \n <img class=\"shapedImage\" src=\"https://interactive-examples.mdn.mozilla.net/media/examples/round-balloon.png\" alt=\"Sample Image\"> \n \n<p> ipynb&#39;s are webpage templates. Literally!</p>\n<p> When you run a Jupyter notebook, the environment essentially serves a web page which you proceed to work from. Ipynb&#39;s are really just a JSON object&#39;s. The cells you see and their outputs are all interactive HTML elements rendered from the ipynb json. When you execute python code in a python cell, the code is sent to a server which runs it and sends back the result; its the javascript that&#39;s being ran natively, go figure!</p>\n<p> In such a manner, it is a little like working in PHP! I can write backend code and test the results directly in my notebook and, outside some styling differences, it translates rather well into my website. </p>\n<p> This way, you no longer need to pass the dataset to create Multiple Visualizations.</p>\n   <div id=\"observablehq-viz2\"></div>\n<script type=\"module\">\nimport {Runtime, Inspector} from \"https://cdn.jsdelivr.net/npm/@observablehq/runtime@4/dist/runtime.js\";\nimport define from \"https://api.observablehq.com/@karpatic/colab-to-website.js?v=3\";\nnew Runtime().module(define, name => {\n  if (name === \"vswp\") return new Inspector(document.querySelector(\"#observablehq-viz2\"));\n  if (name === \"colabShortcode\") return new Inspector(document.querySelector(\"#observablehq-viz2\"));\n});\n</script> <br>\n <aside class=\"tip\"> You can see how they are operate using a webpage underhood with Google Colabs - Console log something from a `%%javascript` and insepct the result in your browser, but you can observe the same result in VSCode by navigating to help>toggle dev tools</aside> <p>Authors inline special templating instructions and html into their ipynb doc that the template/js will use.</p>\n   <div id=\"observablehq-viz4\"></div>\n<script type=\"module\">\nimport {Runtime, Inspector} from \"https://cdn.jsdelivr.net/npm/@observablehq/runtime@4/dist/runtime.js\";\nimport define from \"https://api.observablehq.com/@karpatic/ipynb-convert-to-html.js?v=4&t=4\";\nnew Runtime().module(define, name => {\n  if (name === \"vswp\") return new Inspector(document.querySelector(\"#observablehq-viz4\"));\n  if (name === \"colabShortcode\") return new Inspector(document.querySelector(\"#observablehq-viz4\"));\n});\n</script> <h2 id=\"examples\">Examples</h2>\n <p>Missing: pygal, bokeh, holoviews, plotly, prophet, tensorflow, web components</p>\n <details>\n <summary> <h3 id=\"built-ins\">Built In&#39;s</h3>\n </summary> <div>\n      <input type='checkbox' id='note1' class='notebox'>\n      <p>This is a footnote. <label  tabindex=\"0\" for='note1' class='notelbl'>[1]</label></p>\n      <aside><label  tabindex=\"0\" for='note1' class='notelbl'>[1]</label> You can put side thoughts in it. </aside> \n    </div>\n <aside class=\"info\"> Quick Info! You can put multiple info boxes in the same markdown cell</aside> <div id='special_markdown_example'>\n \n<p> It&#39;s really cool because I can write html in markdown without a hitch; and it transpiles to html just great.\n <br>\n For example, I&#39;m doing it right in the mid<style> #special_markdown_example{color:blue} .folium-map{ width:200px} </style><script>document.querySelectorAll('#special_markdown_example')[0].onclick = (function() { console.log('you clicked special_markdown_example!') } );</script>dle of this sentence within the .ipynb doc, and it renders exactly how i&#39;d like it to within html doc. For proof, check the log on your browser console after clicking this blue text. Then go to my .ipynb and see how I did it!\n </div></p>\n <aside class=\"warning\"> Simply insert a br element to break between lines when you need a new line in markdown. Otherwise it will create a new paragraph element.</aside> <pre class='prettyprint'>\n This text was written in a code block and will return an error if ran.\n Fortunately, output errors are removed during conversion to html.</pre>   <details open> <summary>Click to toggle</summary> <pre class='prettyprint'>print(\"#hide_output #collapse_input_open\")</pre></details>   </summary> <pre class='prettyprint'>text and html can pretty much be placed anywhere. Just take note of the Notes above as it'll list special handling instructions.</pre> <p>When you use %%javascript to run JavaScript code in a Jupyter notebook, the code isn&#39;t isolated. It&#39;s executed in the context of the notebook&#39;s web page. This means that variables or functions you define will be added to the global scope and are thus accessible to subsequent cells.</p>\n   <p>line break!</p>\n <div id='output-area1'> </div>  <p>Use undefined to execute immidiately in the browser; Just make sure to run the cell.</p>\n <pre class='prettyprint'>from IPython.core.display import display, Javascript\n</pre> <pre class='prettyprint'>def js_to_python(js_var_name, py_var_name):\n     display(Javascript(f\"\"\"\n         var js_val = {js_var_name};\n         IPython.notebook.kernel.execute(`{py_var_name} = '\"\"' + js_val + '\"\"'`);\n     \"\"\"))\n \n # Now, you can use the above function to pass the data\n js_script = \"\"\"\n var myData = {name: \"John\", age: 30, city: \"New York\"};\n \"\"\"\n display(Javascript(js_script))\n js_to_python(\"myData\", \"pythonData\")\n</pre>   <pre class='prettyprint'>print('hello')</pre> <pre class='prettyprint'>display(Javascript(\"\"\"\n document.body.style.backgroundColor = '';\n \"\"\"))</pre> <pre class='prettyprint'>display(Javascript(\"\"\"\n         var currentScriptTag = document.currentScript;\n         console.log(currentScriptTag);\n         var parentOfScriptTag = currentScriptTag.parentElement;\n         console.log(parentOfScriptTag);\n \"\"\"))</pre>      <div id='output-area'> </div>  </details> <link rel=\"stylesheet\" href=\"https://pro.fontawesome.com/releases/v5.10.0/css/all.css\" integrity=\"sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\" crossorigin=\"anonymous\"/>\n <script>\n   console.log('console message from within an unflagged markdown cell')\n </script>   </details><details><summary> <h3 id=\"ipython\">Ipython</h3>\n </summary> <details><summary> <h4 id=\"display-javascript\">Display Javascript</h4>\n </summary> <p>Using this method Javascript is persisted in the outputs of the cell and will be executed when the document is reloaded.</p>\n <pre class='prettyprint'>IPython.display.Javascript(\"\"\"window.displaySetValue=3;\"\"\")</pre>  <div id=\"output-area2\">This text should be overwritten to show displaySetValue from above</div>  <div id=\"output-area3\">This text should be overwritten to show jsFlagSetValue from above</div> <pre class='prettyprint'>js_code = '''\n document.querySelector(\"#output-area3\").innerHTML= \"jsFlagSetValue=\"+window.jsFlagSetValue+\": <- jsFlagSetValue retrieved using Ipython JS Display.\";\n '''\n \n IPython.display.Javascript(js_code)</pre> <div id=\"output-area4\">This text should be overwritten to show displaySetValue from above</div>  <p>Information obtained from: <a href=\"https://colab.research.google.com/notebooks/snippets/advanced_outputs.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Advanced Outputs</a></p>\n <aside class=\"info\"> eval_js differs from `display.Javascript` in for eval_js Javascript expression is not persisted in the notebook document and will not be executed when the document is reloaded.</aside> </details><details><summary> <h4 id=\"display-html--py-templating\">Display Html &amp; Py Templating</h4>\n </summary> <p>import requests</p>\n<p> resp = requests.get(&#39;<a href=\"https://charleskarpati.com\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://charleskarpati.com</a>&#39;)</p>\n<p> from IPython.core.display import display, HTML\n display(HTML(resp.content.decode(&#39;utf-8&#39;)[:-4]))</p>\n  Heres an example: <button id=\"callthis\">Click me and check your console!</button>\n    <script>\n      document.querySelectorAll('#callthis')[0].onclick = (function(){ console.log('you clicked callthis!') } );\n    </script> </details> </details><details><summary> <h3 id=\"vega-embed\">Vega-Embed</h3>\n </summary> <p><a href=\"https://github.com/vega/vega-embed\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">vega-embed</a></p>\n<p> <a href=\"https://vega.github.io/vega-lite/usage/embed.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">embed</a></p>\n <p><a href=\"https://observablehq.com/@vega/hello-vega-embed\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">hello-vega-embed</a></p>\n  </details><details><summary> <h3 id=\"folium--dataplay\">Folium / Dataplay</h3>\n </summary> <ol>\n<li><p>Folium <a href=\"https://github.com/python-visualization/folium/search?q=JavascriptLink&unscoped_q=JavascriptLink\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">JavascriptLink</a></p>\n</li>\n<li><p>Folium <a href=\"https://stackoverflow.com/questions/60479995/adding-javascript-to-folium-map\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Adding Javascript</a></p>\n</li>\n<li><p>Folium <a href=\"https://github.com/python-visualization/folium/issues/765\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">How to Use Custom Javascript</a></p>\n</li>\n<li><p>Folium <a href=\"https://github.com/python-visualization/folium/issues/86\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Custom HTML JS</a></p>\n</li>\n<li><p>Folium <a href=\"https://gis.stackexchange.com/questions/313382/click-event-on-maps-with-folium-and-information-retrieval\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Click Event</a></p>\n</li>\n</ol>\n     </details><details><summary> <h3 id=\"observablehq\">ObservableHQ</h3>\n </summary> <p>You&#39;ve seen them with the diagrams at the intro!</p>\n     <p>test</p>\n </details><details><summary> <h3 id=\"pivottablejs\">pivottablejs</h3>\n </summary> <pre class='prettyprint'>df = pd.DataFrame({\"book\":[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\"],\"scores\":[45,34,54,27,70,25,92,22,40,10,40]})</pre> <pre class='prettyprint'>df</pre> <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>book</th>\n      <th>scores</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C</td>\n      <td>54</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>E</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>F</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>G</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>H</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>I</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>J</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>K</td>\n      <td>40</td>\n    </tr>\n  </tbody>\n</table>\n</div> <p><a href=\"https://pypi.org/project/pivottablejs/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">pivottablejs</a></p>\n   </details>\n <details><summary> <h3 id=\"mpld3\">MPLD3</h3>\n </summary> <p>The mpld3 project brings together Matplotlib, the popular Python-based graphing library, and D3js, the popular JavaScript library for creating interactive data visualizations for the web. The result is a simple API for exporting your matplotlib graphics to HTML code which can be used within the browser, within standard web pages, blogs, or tools such as the IPython notebook.</p>\n   </details><details><summary> <h3 id=\"dcjs-dcpy\">DC.js dcpy</h3>\n </summary> <p>dc.js is a javascript charting library with native crossfilter support, allowing highly efficient exploration on large multi-dimensional datasets (inspired by crossfilter&#39;s demo)</p>\n<p> It leverages d3 to render charts in CSS-friendly SVG format. Charts rendered using dc.js are data driven and reactive</p>\n  <p><a href=\"https://github.com/washim/dcpy/blob/master/dcpy/widget.py\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://github.com/washim/dcpy/blob/master/dcpy/widget.py</a></p>\n      </details><details><summary> <h3 id=\"altair---vega\">Altair - Vega</h3>\n </summary> <ul>\n<li><p>Altair provides a Python API for generating validated Vega-Lite specifications</p>\n</li>\n<li><p>Altair is fundamentally about constructing chart specifications, the central functionality of any chart object are the to_dict() and to_json()</p>\n</li>\n</ul>\n<p> <a href=\"https://altair-viz.github.io/user_guide/internals.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">test123</a></p>\n  <pre class='prettyprint'>This isn't interactive</pre>  </details><details><summary> <h3 id=\"nvd3-python-nvd3\">NVD3 python-nvd3</h3>\n </summary> <p>python-nvd3 <a href=\"https://github.com/areski/python-nvd3%5D\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">homepage</a> and <a href=\"https://python-nvd3.readthedocs.io/en/latest/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">docs</a></p>\n<p> NVD3 is an attempt to build re-usable charts and chart components for d3.js without taking away the power that d3.js offers you.</p>\n<p> This will output the following HTML to render a live chart. The HTML could be stored into a HTML file, used in a Web application</p>\n    </details>\n \n <details><summary> <h3 id=\"bokeh\">Bokeh</h3>\n </summary>\n <p>No script here!</p>\n <ol>\n<li><p>Bokeh <a href=\"https://docs.bokeh.org/en/latest/docs/user_guide/bokehjs.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Developing with JavaScript</a></p>\n</li>\n<li><p>Bokeh <a href=\"https://docs.bokeh.org/en/latest/docs/user_guide/interaction/callbacks.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Callbacks</a></p>\n</li>\n<li><p>Bokeh <a href=\"https://docs.bokeh.org/en/latest/docs/user_guide/export.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Exporting Plots</a></p>\n</li>\n<li><p>Bokeh <a href=\"https://stackoverflow.com/questions/48712938/how-to-embed-bokeh-js-output-figure-inside-a-div-element\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Embed</a></p>\n</li>\n</ol>\n </details>\n \n <details><summary> <h3 id=\"matplotlib\">MatPlotLib</h3>\n </summary> <pre class='prettyprint'># https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-directly-with-matplotlib\n # Series and DataFrame objects behave like arrays and can therefore be passed directly to matplotlib functions without explicit casts.\n import pandas as pd\n import matplotlib.pyplot as plt\n import numpy as np\n price = pd.Series( np.random.randn(150).cumsum(), index=pd.date_range(\"2000-1-1\", periods=150, freq=\"B\") )\n ma = price.rolling(20).mean()\n mstd = price.rolling(20).std()\n plt.figure();\n plt.plot(price.index, price, \"k\");\n plt.plot(ma.index, ma, \"b\");\n plt.fill_between(mstd.index, ma - 2 * mstd, ma + 2 * mstd, color=\"b\", alpha=0.2);</pre> <pre class='prettyprint'>from pandas.plotting import table\n \n fig, ax = plt.subplots(1, 1)\n table(ax, np.round(df.describe(), 2), loc=\"upper right\", colWidths=[0.2, 0.2, 0.2]);\n df.plot(ax=ax, ylim=(0, 2), legend=None);</pre> <pre class='prettyprint'>dd = pd.DataFrame(np.random.randn(10, 10)).applymap(abs)\n dd = dd.cumsum()\n plt.figure();\n dd.plot.bar(colormap=\"Greens\");</pre> <pre class='prettyprint'>plt.figure();\n andrews_curves(data, \"Name\", colormap=\"winter\");</pre> <pre class='prettyprint'>plt.figure();\n parallel_coordinates(data, \"Name\", colormap=\"gist_rainbow\");</pre> <pre class='prettyprint'>df = pd.DataFrame(np.random.randn(1000, 10), index=ts.index)\n df = df.cumsum()\n plt.figure();\n df.plot(colormap=\"cubehelix\");</pre> <h3 id=\"networkx---plotly\">networkx - Plotly</h3>\n </summary> <p><a href=\"https://plotly.com/python/network-graphs/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Network Graphs</a></p>\n     </details><details><summary> <h3 id=\"dexplot\">Dexplot</h3>\n </summary> <p>How will I save content from <a href=\"https://github.com/dexplo/dexplot\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">dexplot</a> or pyplot etc?</p>\n    </details><details><summary> <h3 id=\"google-colabs\">Google Colabs</h3>\n </summary> <p>The output of each cell (while in colabs) is hosted in a separate sandboxed iframe without direct access to the contents of other cells, but they can create <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/BroadcastChannel\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">BroadcastChannel</a>s to communicate between cells on the same page.</p>\n <p>This will execute and trigger in realtime in the converted HTML doc:</p>\n  <p>This will not run on start</p>\n <pre class='prettyprint'>from google.colab import output\n value = output.eval_js(\"window.localStorage.getItem('localStorageVariable')\");\n value</pre> <p>This will execute on start (converted HTML doc) and any time you run the cell (in Colabs):</p>\n   </details>  </details>\n  <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}