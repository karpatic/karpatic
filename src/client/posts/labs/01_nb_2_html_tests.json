{"meta":{"filename":"01_nb_2_html_tests","title":"NB2HTML TEST","summary":"This is a test colab publication inspired by [nbdev](http://nbdev.fast.ai/tutorial/) and [nbConvert](https://nbconvert.readthedocs.io/en/latest/).","prettify":"true","description":"this isnt working","image":"images/company_logo.png","keywords":"thisworks","badges":"true","comments":"true","categories":"[test]","metadata_key1":"metadata_value1","metadata_key2":"metadata_value2"},"content":"<h2 id=\"welcome-to-my-test-page-\">Welcome to my test page! <i class=\"fas fa-adjust\"></i></h2>\n <p><a href=\"https://mybinder.org/v2/gh/bnia/datalabs/main?filepath=%2Fnotebooks%2F07_nb_2_html_tests.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\"></a>\n <a href=\"https://colab.research.google.com/github/bnia/datalabs/blob/main/notebooks/07_nb_2_html_tests.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/colab.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/bnia/datalabs/tree/main/notebooks/07_nb_2_html_tests.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://pete88b.github.io/fastpages/assets/badges/github.svg\" alt=\"Binder\"></a>\n <a href=\"https://github.com/ellerbrock/open-source-badges/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://badges.frapsoft.com/os/v3/open-source.svg?v=103\" alt=\"Open Source Love svg3\"></a></p>\n<p> <a href=\"https://github.com/bnia/datalabs/blob/main/LICENSE\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/l/all-contributors.svg?style=flat\" alt=\"NPM License\"></a>\n <a href=\"https://bnia.github.io\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"http://img.shields.io/badge/Status-Active-green.svg\" alt=\"Active\"></a> \n <a href=\"\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/bnia/datalabs.svg?style=flat\" alt=\"GitHub last commit\"></a>  </p>\n<p> <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/bnia/datalabs.svg?style=social&label=Star\" alt=\"GitHub stars\"></a> \n <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/watchers/bnia/datalabs.svg?style=social&label=Watch\" alt=\"GitHub watchers\"></a> \n <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/forks/bnia/datalabs.svg?style=social&label=Fork\" alt=\"GitHub forks\"></a> \n <a href=\"https://github.com/bnia/datalabs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/followers/bnia.svg?style=social&label=Follow\" alt=\"GitHub followers\"></a> </p>\n<p> <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20%E2%9C%A8%20colab%20by%20@bniajfi%20https://github.com/bnia/datalabs%20%F0%9F%A4%97\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/url/https/github.com/bnia/datalabs.svg?style=social\" alt=\"Tweet\"></a> \n <a href=\"https://twitter.com/bniajfi\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/twitter/follow/bniajfi.svg?style=social\" alt=\"Twitter Follow\"></a></p>\n <p>It was made with a colab .ipynb doc and a script I wrote to transform it into an html-page!</p>\n <div id='special_markdown_example'> \n \n<p> It&#39;s really cool because I can write html in markdown without a hitch; and it transpiles to html just great. </p>\n<p> For example, I&#39;m doing it right in the mid<style> #special_markdown_example{color:blue} .folium-map{ width:200px} </style><script>document.querySelectorAll('#special_markdown_example')[0].onclick = (function() { console.log('you clicked special_markdown_example!') } );</script>dle of this sentence within the .ipynb doc, and it renders exactly how i&#39;d like it to within html doc. </p>\n<p> For proof, check the log on your browser console after clicking this blue text. Then go to my .ipynb and see how I did it! \n </div></p>\n <h3 id=\"how-it-works\">How it works</h3>\n <p>Authors Inline special templating instructions and html In their ipynb doc that the template/js will use...\n At compile time:</p>\n<ul>\n<li><p>Extract meta data from the header</p></li>\n<li><p>Extract template/js from the doc</p></li>\n<li><ul>\n<li><p>Fix up the html output and apply generic optimizations (prefetch, deduplication, caching, etc.)</p></li>\n</ul>\n</li>\n<li><ul>\n<li><p>Apply template/ metadata/ special js</p></li>\n</ul>\n</li>\n</ul>\n <aside class=\"warning\"><p>Some warning message</p>\n</aside>\n <aside class=\"tip\"><p>Some tip message</p>\n</aside>\n <aside class=\"info\"><p>Some info message</p>\n</aside>  <div>\n    <input type='checkbox' id='note1' class='notebox'><p> footnote \n    <label  tabindex=\"0\" for='note1' class='notelbl'>[1]</label></p>\n    <aside><label  tabindex=\"0\" for='note1' class='notelbl'>[1]</label> This is a footnote </aside> </div>\n\n <h2 id=\"more-examples\">More Examples</h2>\n <pre class='prettyprint'>Fortunately, output errors are removed during conversion to html.</pre> <pre class='prettyprint'>- pygal, bokeh, holoviews, plotly, prophet, tensorflow</pre> </summary> <pre class='prettyprint'>text and html can pretty much be placed anywhere</pre> <link rel=\"stylesheet\" href=\"https://pro.fontawesome.com/releases/v5.10.0/css/all.css\" integrity=\"sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\" crossorigin=\"anonymous\"/>\n <script>\n   console.log('hi')\n </script> <details><summary> <h3 id=\"observablehq\">ObservableHQ</h3>\n </summary>  <pre class='prettyprint'>display(HTML(\"\"\"<div id=\"observablehq-vswp-3959f97c\"></div>\n <div id=\"observablehq-colabShortcode-3959f97c\"></div>\n <p>Credit: <a href=\"https://observablehq.com/@bniajfi/colab_to_wordpress\">Colab to WordPress by Baltimore Neighborhood Indicators Association</a></p>\n \n <script type=\"module\">\n import {Runtime, Inspector} from \"https://cdn.jsdelivr.net/npm/@observablehq/runtime@4/dist/runtime.js\";\n import define from \"https://api.observablehq.com/d/88980fab7fb614a9.js?v=3\";\n new Runtime().module(define, name => {\n   if (name === \"vswp\") return new Inspector(document.querySelector(\"#observablehq-vswp-3959f97c\"));\n   if (name === \"colabShortcode\") return new Inspector(document.querySelector(\"#observablehq-colabShortcode-3959f97c\"));\n });\n </script>\"\"\") )</pre> </details><details><summary> <h3 id=\"matplotlib\">MatPlotLib</h3>\n <pre class='prettyprint'># Series and DataFrame objects behave like arrays and can therefore be passed directly to matplotlib functions without explicit casts.\n import pandas as pd\n import matplotlib.pyplot as plt\n import numpy as np\n price = pd.Series( np.random.randn(150).cumsum(), index=pd.date_range(\"2000-1-1\", periods=150, freq=\"B\") ) \n ma = price.rolling(20).mean()\n mstd = price.rolling(20).std()\n plt.figure();\n plt.plot(price.index, price, \"k\");\n plt.plot(ma.index, ma, \"b\");\n plt.fill_between(mstd.index, ma - 2 * mstd, ma + 2 * mstd, color=\"b\", alpha=0.2);</pre> <pre class='prettyprint'>\n fig, ax = plt.subplots(1, 1)\n table(ax, np.round(df.describe(), 2), loc=\"upper right\", colWidths=[0.2, 0.2, 0.2]);\n df.plot(ax=ax, ylim=(0, 2), legend=None);</pre> <pre class='prettyprint'>dd = dd.cumsum()\n plt.figure();\n dd.plot.bar(colormap=\"Greens\");</pre> <pre class='prettyprint'>andrews_curves(data, \"Name\", colormap=\"winter\");</pre> <pre class='prettyprint'>parallel_coordinates(data, \"Name\", colormap=\"gist_rainbow\");</pre> <pre class='prettyprint'>df = df.cumsum()\n plt.figure();\n df.plot(colormap=\"cubehelix\");</pre> <h3 id=\"web-components\">Web Components</h3>\n </summary>  </details>\n <details><summary> <h3 id=\"dexplot\">Dexplot</h3>\n </summary>  <p>How will I save content from <a href=\"https://github.com/dexplo/dexplot\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">dexplot</a> or pyplot etc?</p>\n </details><details><summary> <h3 id=\"mpld3\">MPLD3</h3>\n </summary>  <p>The mpld3 project brings together Matplotlib, the popular Python-based graphing library, and D3js, the popular JavaScript library for creating interactive data visualizations for the web. The result is a simple API for exporting your matplotlib graphics to HTML code which can be used within the browser, within standard web pages, blogs, or tools such as the IPython notebook.</p>\n </details><details><summary> <h3 id=\"networkx---plotly\">networkx - Plotly</h3>\n </summary> <p><a href=\"https://plotly.com/python/network-graphs/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Network Graphs</a></p>\n </details><details><summary> <h3 id=\"dcjs-dcpy\">DC.js dcpy</h3>\n </summary> <p>dc.js is a javascript charting library with native crossfilter support, allowing highly efficient exploration on large multi-dimensional datasets (inspired by crossfilter&#39;s demo)</p>\n<p> It leverages d3 to render charts in CSS-friendly SVG format. Charts rendered using dc.js are data driven and reactive</p>\n <p><a href=\"https://github.com/washim/dcpy/blob/master/dcpy/widget.py\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://github.com/washim/dcpy/blob/master/dcpy/widget.py</a></p>\n </details><details><summary> <h3 id=\"nvd3-python-nvd3\">NVD3 python-nvd3</h3>\n </summary> <p>python-nvd3 <a href=\"https://github.com/areski/python-nvd3%5D\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">homepage</a> and <a href=\"https://python-nvd3.readthedocs.io/en/latest/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">docs</a></p>\n<p> NVD3 is an attempt to build re-usable charts and chart components for d3.js without taking away the power that d3.js offers you.</p>\n<p> This will output the following HTML to render a live chart. The HTML could be stored into a HTML file, used in a Web application</p>\n </details>\n \n <details><summary> <h3 id=\"bokeh\">Bokeh</h3>\n </summary>\n <p>No script here!</p>\n <ol>\n<li><p>Bokeh <a href=\"https://docs.bokeh.org/en/latest/docs/user_guide/bokehjs.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Developing with JavaScript</a></p>\n</li>\n<li><p>Bokeh <a href=\"https://docs.bokeh.org/en/latest/docs/user_guide/interaction/callbacks.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Callbacks</a></p>\n</li>\n<li><p>Bokeh <a href=\"https://docs.bokeh.org/en/latest/docs/user_guide/export.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Exporting Plots</a></p>\n</li>\n<li><p>Bokeh <a href=\"https://stackoverflow.com/questions/48712938/how-to-embed-bokeh-js-output-figure-inside-a-div-element\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Embed</a></p>\n</li>\n</ol>\n </details>\n \n <details><summary> <h3 id=\"folium--dataplay\">Folium / Dataplay</h3>\n </summary> <ol>\n<li><p>Folium <a href=\"https://github.com/python-visualization/folium/search?q=JavascriptLink&unscoped_q=JavascriptLink\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">JavascriptLink</a></p>\n</li>\n<li><p>Folium <a href=\"https://stackoverflow.com/questions/60479995/adding-javascript-to-folium-map\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Adding Javascript</a></p>\n</li>\n<li><p>Folium <a href=\"https://github.com/python-visualization/folium/issues/765\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">How to Use Custom Javascript</a></p>\n</li>\n<li><p>Folium <a href=\"https://github.com/python-visualization/folium/issues/86\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Custom HTML JS</a></p>\n</li>\n<li><p>Folium <a href=\"https://gis.stackexchange.com/questions/313382/click-event-on-maps-with-folium-and-information-retrieval\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Click Event</a></p>\n</li>\n</ol>\n <pre class='prettyprint'>import dataplay\n help(dataplay)</pre> </details><details><summary> <h3 id=\"altair---vega\">Altair - Vega</h3>\n </summary> <ul>\n<li><p>Altair provides a Python API for generating validated Vega-Lite specifications</p>\n</li>\n<li><p>Altair is fundamentally about constructing chart specifications, the central functionality of any chart object are the to_dict() and to_json()</p>\n</li>\n</ul>\n<p> <a href=\"https://altair-viz.github.io/user_guide/internals.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">test123</a></p>\n </details><details><summary> <h3 id=\"vega-embed\">Vega-Embed</h3>\n </summary> <p><a href=\"https://github.com/vega/vega-embed\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">vega-embed</a></p>\n<p> <a href=\"https://vega.github.io/vega-lite/usage/embed.html\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">embed</a></p>\n <p><a href=\"https://observablehq.com/@vega/hello-vega-embed\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">hello-vega-embed</a></p>\n </details><details><summary> <h3 id=\"pivottablejs\">pivottablejs</h3>\n </summary> <p><a href=\"https://pypi.org/project/pivottablejs/\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">pivottablejs</a></p>\n </details><details><summary> <h3 id=\"cross-output-communication\">Cross-output communication</h3>\n </summary> <p>The output of each cell (while in colabs) is hosted in a separate sandboxed iframe without direct access to the contents of other cells, but they can create <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/BroadcastChannel\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">BroadcastChannel</a>s to communicate between cells on the same page.</p>\n <p>This will execute and trigger in realtime in the converted HTML doc: </p>\n <p>This will not run on start</p>\n <pre class='prettyprint'>value = output.eval_js(\"window.localStorage.getItem('localStorageVariable')\");\n value</pre> </details><details><summary> <p>This will execute on start (converted HTML doc) and any time you run the cell (in Colabs): </p>\n </details><details><summary> <h3 id=\"python-eval_js\">Python <a href=\"https://colab.research.google.com/notebooks/snippets/advanced_outputs.ipynb\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">eval_js</a></h3>\n </summary> <p>Evaluates the Javascript expression within the context of the outputframe of the current cell.</p>\n<p> This executes the Javascript as a blocking call from Python and returns the result of the expression.</p>\n<p> If the Javascript expression results in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Promise</a> then the call will block until the promise has settled and use the resulting value.</p>\n<p> <strong>Note:</strong> This differs from <code>display.Javascript</code> in that the Javascript expression is not persisted in the notebook document and will not be executed when the document is reloaded.</p>\n <p>The Javascript is persisted in the outputs of the notebook document and will be executed when the document is reloaded.</p>\n <pre class='prettyprint'>IPython.display.Javascript(''' window.someValue = \"hi\" ''')</pre> <p>What happens here? The last time I executed the following cell: i got : 1626288497132</p>\n <pre class='prettyprint'>import IPython\n from datetime import datetime\n \n js_code = '''\n document.querySelector(\"#output-area\").appendChild(document.createTextNode( Date.now() ));\n '''\n \n IPython.display.Javascript(js_code)</pre> <p>and then this</p>\n <p>Both testval and someValue are undefined in colabs using both <code>%%javascript</code></p>\n <pre class='prettyprint'>js_code = '''document.querySelector(\"#output-area\").appendChild(document.createTextNode( window.testval ));'''\n js_code = '''document.querySelector(\"#output-area\").appendChild(document.createTextNode( window.someVal ));'''\n IPython.display.Javascript(js_code)</pre> </details><details><summary> <h3 id=\"templating\">Templating</h3>\n </summary> <p><a href=\"https://colab.research.google.com/notebooks/snippets/advanced_outputs\" onclick=\"window.pingServer(this)\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://colab.research.google.com/notebooks/snippets/advanced_outputs</a></p>\n </details><details><summary> <h3 id=\"format\">Format</h3>\n </summary> <pre class='prettyprint'>\n resp = requests.get('https://bniajfi.org/wp-json/wp/v2/footer')\n \n from IPython.core.display import display, HTML\n display(HTML(resp.content.decode('utf-8')[:-4]))</pre>\n  <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\"/>\n  "}